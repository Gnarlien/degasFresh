% $Id: a278a105fc4cd17e7d72633091c077110f2fb6be $
\Title{aux2dsetup}

@* Auxiliary routines needed by geometry definition programs. These
routines are called by both |readgeometry| and |definegeometry2d|.

\ID{$Id: a278a105fc4cd17e7d72633091c077110f2fb6be $}

@m FILE 'aux2dsetup.web'

@I macros.hweb
@I sysdep.hweb
@I geomint.hweb
@I zone.hweb
@I detector.hweb
@I geometry2d.hweb
@I string.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@ Determine adjoining zones and faces from two polygon points.

@<Functions...@>=
      subroutine find_poly_zone(face1,type,poly_zone,y_div,
     $                    sect_zone1,num_zone1,sect_zone2,num_zone2)
      implicit_none_f77
      gi_common
      zn_common
      implicit_none_f90
      integer type,y_div                                     // Input
      zn_decl(poly_zone)
      integer face1                                          // Input / Output
      integer num_zone1,num_zone2                            // Output
      integer sect_zone1[*],sect_zone2[*]
      integer count_pos,count_neg,index_pos,                 // Local
     $     index_neg,temp_zone,i,i_max,match,j

      assert(face1 != 0)           // I guess this should always be true!

      count_pos=surfaces[s_pos,s_count,abs(face1)]
      count_neg=surfaces[s_neg,s_count,abs(face1)]

      index_pos=surfaces[s_pos,s_start,abs(face1)]
      index_neg=surfaces[s_neg,s_start,abs(face1)]
      
      num_zone2=0
/*
   For this, |num_zone1| = 0 or |num_zone2| = 0 indicates failure to uniquely
   identify a zone, e.g., because there are no neighbors (universal
   cell). 
*/
      if (count_pos > 0) then
         if (neighbors[index_pos] > 0) then
            sect_zone1[1]=cells[c_zone,neighbors[index_pos]]
            num_zone1=1
         else
            num_zone1=0
            return
         end if
         if (count_pos > 1) then
            do i=2,count_pos
               if (neighbors[index_pos+i-1] > 0) then
                  match=FALSE
                  do j=1,num_zone1
                     if (sect_zone1[j] == cells[c_zone,neighbors[index_pos+i-1]]) 
     $                    match=TRUE
                  end do
                  if (match == FALSE) then
                     num_zone1++
                     assert(num_zone1 <= y_div)    // Dimension of arrays
                     sect_zone1[num_zone1]=cells[c_zone,neighbors[index_pos+i-1]]
                  end if
               else
                  num_zone1=0
                  return
               end if
            end do
         end if
      else
         num_zone1=0
         return
      end if
      face1=abs(face1)  

      if (count_neg > 0) then
         sect_zone2[1]=cells[c_zone,neighbors[index_neg]]
         num_zone2=1
         if (count_neg > 1) then
            do i=2,count_neg
               match=FALSE
               do j=1,num_zone2
                  if (sect_zone2[j] == cells[c_zone,neighbors[index_neg+i-1]]) 
     $                 match=TRUE
               end do
               if (match == FALSE) then
                  num_zone2++
                  assert(num_zone2 <= y_div)    // Dimension of arrays
                  sect_zone2[num_zone2]=cells[c_zone,neighbors[index_neg+i-1]]
               end if
            end do
         end if
      else
         num_zone2=0
         sect_zone2[1]=-1
      end if
@#if 0
/*
   In the case where the two zone types differ, arrange so that the zone-type
   of |sect_zone1| matches the input |type| (no changes needed for opposite 
   case!).
*/
      if ((type != zn_undefined) && (zn_type(zn_index(sect_zone1[1],zi_ptr))) != type) then
@#else
/*
   Revise this test to ensure that |sect_zone1| is associated with the input polygon.
   Note that this step is required since we ignore the sign of |face1| above.
*/
      if (poly_zone != zn_undefined) then
         if (zn_index(sect_zone1[1],zi_ptr) != zn_index(poly_zone,zi_ptr)) then
@#endif
            assert(zn_type(zn_index(sect_zone2[1],zi_ptr)) == type)
            face1=-face1
            i_max=max(num_zone1,num_zone2)
            do i=1,i_max
               temp_zone=sect_zone1[i]
               sect_zone1[i]=sect_zone2[i]
               sect_zone2[i]=temp_zone
            end do
            temp_zone=num_zone1
            num_zone1=num_zone2
            num_zone2=temp_zone
/*
   Verify that the zone pointer and type are as expected.
*/
@#if 0
/*
   blank
*/
@#else
         else
            assert(zn_index(sect_zone1[1],zi_ptr) == zn_index(poly_zone,zi_ptr))
            assert((type == zn_undefined) || (zn_type(zn_index(sect_zone1[1],zi_ptr)) == type))
         end if
@#endif
      else
         assert((type == zn_undefined) || (zn_type(zn_index(sect_zone1[1],zi_ptr)) == type))
      end if

      return
      end

@* Read Sonnet format mesh.

@m sonnet_loop #:0
@m sonnet_eof #:0

@<Functions...@>=
      subroutine read_sonnet_mesh(nunit,nxd_0,nzd_0,ix_min,ix_max,
     $           iz_min,iz_max,nxd,nzd,mesh_xz)

      implicit_none_f77
      implicit_none_f90

      integer nunit,nxd_0,nzd_0,ix_min,ix_max,              // Input
     $        iz_min,iz_max,nxd,nzd

      real mesh_xz[nzd][nxd][0:4][g2_x:g2_z]                // Output

      character*LINELEN line                                // Local
      integer length,ix,iz,ixl,izl,ix_0,iz_0
      real pitch
@#if 0
      real dummy,absx34,absx32,absx41,absx43,cosgam4,singam4,
     $     cosgam3,singam3,sinalf,rave,as

      vc_decl(x34)
      vc_decl(x32)
      vc_decl(x41)
      vc_decl(x43)
@#endif
      st_decls

@#if 0 
      dummy=zero
      open(unit=nunit+1,file='sonnet_mod4',status='unknown',form='formatted')
      open(unit=nunit+2,file='sonnet_angles_1',status='unknown',form='formatted')
      open(unit=nunit+3,file='sonnet_angles_nx',status='unknown',form='formatted')
      write(nunit+1,*)
      write(nunit+1,*) '  Element output:'
      write(nunit+1,*)
      write(nunit+1,'(a,f16.13)') '    R*Btor =   ',dummy
      write(nunit+1,*) '   ncut   =  0'
      write(nunit+1,*)
@#endif

sonnet_loop: continue
      assert(read_string(nunit,line,length))
      assert(length<=len(line))
      length=parse_string(line(:length))
      if (index(line,'===') == 0) go to sonnet_loop

      if (iz_min > 1) then
         do iz_0=1,iz_min-1
            do ix_0=1,nxd_0
               read(nunit,*,err=sonnet_eof)
               read(nunit,*,err=sonnet_eof)
               read(nunit,*,err=sonnet_eof)
               read(nunit,*,err=sonnet_eof)
            end do
         end do
      end if

      do iz_0=iz_min,iz_max
         if (ix_min > 1) then
            do ix_0=1,ix_min-1
               read(nunit,*,err=sonnet_eof)
               read(nunit,*,err=sonnet_eof)
               read(nunit,*,err=sonnet_eof)
               read(nunit,*,err=sonnet_eof)
            end do
         end if
         iz=iz_0-iz_min+1
         do ix_0=ix_min,ix_max
            ix=ix_0-ix_min+1
/*
   The specific ordering to be used in the rest of this code is that a 
   polygon will be traced out in the clockwise direction by following
   the corners in order $1 \rightarrow 4$. The corners used here with
   |mesh_x| and |mesh_z| are chosen so as to translate the known orientation 
   of the Sonnet mesh corners into the desired one. The center is denoted
   as corner $0$.
*/
            read(nunit,'(30x,e17.10,1x,e17.10,8x,e17.10,1x,e17.10)') 
     $           mesh_xz[iz][ix][2][g2_x],mesh_xz[iz][ix][2][g2_z],
     $           mesh_xz[iz][ix][3][g2_x],mesh_xz[iz][ix][3][g2_z]
@#if 0
            read(nunit,'(19x,i3,1x,i3,4x,e17.10,1x,e17.10,8x,e17.10,1x,e17.10)') 
     $           ixl,izl,mesh_xz[iz][ix][2][g2_x],mesh_xz[iz][ix][2][g2_z],
     $           mesh_xz[iz][ix][3][g2_x],mesh_xz[iz][ix][3][g2_z]
            assert(ixl == ix_0-1)
            assert(izl == iz_0-1)
@#endif
@#if 0
            read(nunit,'(49x,e17.10,1x,e17.10)')
     $           mesh_xz[iz][ix][0][g2_x],mesh_xz[iz][ix][0][g2_z]
@#else
            read(nunit,'(18x,e17.10,14x,e17.10,1x,e17.10)') pitch,
     $           mesh_xz[iz][ix][0][g2_x],mesh_xz[iz][ix][0][g2_z]
@#endif
            read(nunit,'(30x,e17.10,1x,e17.10,8x,e17.10,1x,e17.10)')
     $           mesh_xz[iz][ix][1][g2_x],mesh_xz[iz][ix][1][g2_z],
     $           mesh_xz[iz][ix][4][g2_x],mesh_xz[iz][ix][4][g2_z]
            read(nunit,*,err=sonnet_eof)
/*
   This code computes the field line angles of incidence. Note that 
   |pitch| must be read in from the Sonnet file, the vector variables
   have to be declared, etc.
*/
@#if 0
            vc_set(x34,mesh_xz[iz][ix][4][g2_x]-mesh_xz[iz][ix][3][g2_x],
     $           zero,mesh_xz[iz][ix][4][g2_z]-mesh_xz[iz][ix][3][g2_z])
            vc_set(x32,mesh_xz[iz][ix][2][g2_x]-mesh_xz[iz][ix][3][g2_x],
     $           zero,mesh_xz[iz][ix][2][g2_z]-mesh_xz[iz][ix][3][g2_z])
            vc_set(x41,mesh_xz[iz][ix][1][g2_x]-mesh_xz[iz][ix][4][g2_x],
     $           zero,mesh_xz[iz][ix][1][g2_z]-mesh_xz[iz][ix][4][g2_z])
            vc_set(x43,mesh_xz[iz][ix][3][g2_x]-mesh_xz[iz][ix][4][g2_x],
     $           zero,mesh_xz[iz][ix][3][g2_z]-mesh_xz[iz][ix][4][g2_z])


            absx34=vc_abs(x34)
            absx32=vc_abs(x32)
            absx41=vc_abs(x41)
            absx43=vc_abs(x43)

            cosgam4=vc_product(x41,x43)/(absx41*absx43)
            singam4=sqrt(one-cosgam4**2)
            cosgam3=vc_product(x32,x34)/(absx32*absx34)
            singam3=sqrt(one-cosgam3**2)

            sinalf=half*(singam4+singam3)*pitch
            rave=half*(mesh_xz[iz][ix][3][g2_x]+mesh_xz[iz][ix][4][g2_x])
            as=absx34*two*PI*rave
/*
   For DIVIMP, write out just the angles at the targets. Skip the very
   first and last zones (as below). Because the first zones are so small,
   the accuracy of this computation could suffer.
*/
            if ((iz != 1) && (iz != nzd)) then
               if (ix == 2) then
                  write (nunit+2,'(1x,i3,2x,i3,1p,2(2x,e17.10))') 
     $                 ix-1,iz-1,sinalf,sinalf*as
               else if (ix == nxd-1) then
                  write (nunit+3,'(1x,i3,2x,i3,1p,2(2x,e17.10))') 
     $                 ix-1,iz-1,sinalf,sinalf*as
               end if
            end if
@#endif
@#if 0
         if  ((iz != 1) && (iz != nzd) 
     $         && (ix != 1) && (ix != nxd)) then
            write(nunit+1,'(a,i4,a,i3,a,i3,a,e17.10,a,e17.10,a,6x,a,e17.10,a,e17.10,a)') 
     $           '   Element ',(iz-2)*(nxd-2)+ix-2,' = (',ix-2,',',iz-2,'): (',mesh_xz[iz][ix][2][g2_x],',',
     $           mesh_xz[iz][ix][2][g2_z]-const(7.,-1),')','(',
     $           mesh_xz[iz][ix][3][g2_x],',',mesh_xz[iz][ix][3][g2_z]-const(7.,-1),')'
            write(nunit+1,'(a,e17.10,13x,a,e17.10,a,e17.10,a)') '   Field ratio  = ',pitch,
     $           '(',mesh_xz[iz][ix][0][g2_x],',',mesh_xz[iz][ix][0][g2_z]-const(7.,-1),')'
            write(nunit+1,'(29x,a,e17.10,a,e17.10,a,6x,a,e17.10,a,e17.10,a)')
     $           '(',mesh_xz[iz][ix][1][g2_x],',',mesh_xz[iz][ix][1][g2_z]-const(7.,-1),')','(',
     $           mesh_xz[iz][ix][4][g2_x],',',mesh_xz[iz][ix][4][g2_z]-const(7.,-1),')'
            write(nunit+1,*) '  ----------------------------------------------------------------------------------------'
         end if
@#endif
         end do
         if (ix_max < nxd_0) then
            do ix_0=ix_max+1,nxd_0
               read(nunit,*,err=sonnet_eof)
               read(nunit,*,err=sonnet_eof)
               read(nunit,*,err=sonnet_eof)
               read(nunit,*,err=sonnet_eof)
            end do
         end if
      end do
@#if 0
      close(unit=nunit+1)
      close(unit=nunit+2)
      close(unit=nunit+3)
@#endif
      close(unit=nunit)
      return

sonnet_eof: continue
      assert(' Problem reading sonnet mesh; unexpected end of file' == ' ')
      write(stderr,*) ' Problem reading sonnet mesh; unexpected end of file'

      return
      end

@ Sorting Routine. Sorts an |array(1:n)| into ascending order using 
Quicksort, while making the corresponding rearrangement of the array 
|brr(1:n)|. This implementation is taken directly out of {\em Numerical
Recipes} by Press et al. and should be consistent with their version 2.06.

@<Functions...@>=
      subroutine sort2(n,arr,brr)
      implicit_none_f77
      implicit_none_f90
      integer n,m,nstack
      real arr(n)
      integer brr(n)
      parameter (m=7,nstack=50)
      integer i,ir,j,jstack,k,l,istack(nstack)
      real a,b,temp
      jstack=0
      l=1
      ir=n
c Insertion sort when subarray small enough
    1 if (ir-l.lt.m) then
         do j=l+1,ir
            a=arr(j)
            b=brr(j)
            do i=j-1,l,-1
               if (arr(i).le.a) goto 2
               arr(i+1)=arr(i)
               brr(i+1)=brr(i)
            end do
            i=l-1
    2       arr(i+1)=a
            brr(i+1)=b
         end do
         if (jstack.eq.0) return
c Pop stack and begin new round of partitioning
         ir=istack(jstack)
         l=istack(jstack-1)
         jstack=jstack-2
      else
c Choose median of left, center and right elements as partitioning
c element a. Also, arrange so that a(l) <= a(l+1) <= a(ir).
         k=(l+ir)/2
         temp=arr(k)
         arr(k)=arr(l+1)
         arr(l+1)=temp
         temp=brr(k)
         brr(k)=brr(l+1)
         brr(l+1)=temp
         if (arr(l).gt.arr(ir)) then
            temp=arr(l)
            arr(l)=arr(ir)
            arr(ir)=temp
            temp=brr(l)
            brr(l)=brr(ir)
            brr(ir)=temp
         end if
         if (arr(l+1).gt.arr(ir)) then
            temp=arr(l+1)
            arr(l+1)=arr(ir)
            arr(ir)=temp
            temp=brr(l+1)
            brr(l+1)=brr(ir)
            brr(ir)=temp
         end if
         if (arr(l).gt.arr(l+1)) then
            temp=arr(l)
            arr(l)=arr(l+1)
            arr(l+1)=temp
            temp=brr(l)
            brr(l)=brr(l+1)
            brr(l+1)=temp
         end if
c Initialize pointers for partitioning
         i=l+1
         j=ir
c Partitioning element
         a=arr(l+1)
         b=brr(l+1)
c Innermost loop
    3    continue
c Scan up to find element > a.
            i=i+1
         if (arr(i).lt.a) goto 3
c Scan down to find element < a.
    4    continue
            j=j-1
         if (arr(j).gt.a) goto 4
c Pointers crossed. Exit with partitioning complete.
         if (j.lt.i) goto 5
c Exchange elements of both arrays.
         temp=arr(i)
         arr(i)=arr(j)
         arr(j)=temp
         temp=brr(i)
         brr(i)=brr(j)
         brr(j)=temp
c End of innermost loop
         goto 3
c Insert partitioning element in both arrays.
    5    arr(l+1)=arr(j)
         arr(j)=a
         brr(l+1)=brr(j)
         brr(j)=b
         jstack=jstack+2
c Push pointers to larger subarray on stack, process smaller
c subarray immediately.
         assert(jstack <= nstack)
//       if (jstack.gt.nstack) pause 'nstack too small in sort2'
         if (ir-i+1.ge.j-l) then
            istack(jstack)=ir
            istack(jstack-1)=i
            ir=j-1
         else
            istack(jstack)=j-1
            istack(jstack-1)=l
            l=i
         end if
      end if
      goto 1
      end

@* INDEX.
