@* Flight definitions.

% $Id: 9500031758ac9e6a1d9a9ad5d8266beec082cccc $

\ID{$Id: 9500031758ac9e6a1d9a9ad5d8266beec082cccc $}

@I random.hweb
@I particle.hweb

@ A flight is identified by a string tag.

@f fl_decl integer
@f fl_common integer

@m fl_args(x) fl_number(x),fl_source(x),fl_source_kseg(x),
      fl_source_xseg(x),fl_source_type(x),fl_source_root_sp(x),
      pt_args(fl_origin(x)),rn_args(fl_rand(x)),pt_args(fl_stack(x)[1]),
      fl_pointer(x) @;

@m fl_dummy(x) fl_number(x),fl_source(x),fl_source_kseg(x),
      fl_source_xseg(x),fl_source_type(x),fl_source_root_sp(x),
      pt_dummy(fl_origin(x)),rn_dummy(fl_rand(x)),pt_dummy(fl_stack(x)),
      fl_pointer(x) @;

@m fl_decl(x) integer fl_number(x),fl_source(x),fl_source_kseg(x),
      fl_source_xseg(x),fl_source_type(x),fl_source_root_sp(x),
      fl_pointer(x);
      pt_decl(fl_origin(x)); 
      rn_decl(fl_rand(x));
      pt_decl(fl_stack(x)[fl_stack_max]) @;

@m fl_common integer fl_temp @;

@m fl_copy(x,y) 
      fl_number(y)=fl_number(x);
      fl_source(y)=fl_source(x);
      fl_source_kseg(y)=fl_source_kseg(x);
      fl_source_xseg(y)=fl_source_xseg(x);
      fl_source_type(y)=fl_source_type(x);
      fl_source_root_sp(y)=fl_source_root_sp(x);
      pt_copy(fl_origin(x),fl_origin(y));
      rn_copy(fl_rand(x),fl_rand(y));
      fl_pointer(x)=fl_pointer(y);
      do fl_temp=1,fl_pointer(x);
         pt_copy(fl_stack(x)[fl_temp],fl_stack(y)[fl_temp]);
      end do @;

@m fl_check(x) (fl_number(x) >= 0 && (fl_source(x) > 0) &&
      (fl_source_kseg(x) >= 0) && (fl_source_xseg(x) >= 0) &&
      fl_pointer(x) > 0 && fl_pointer(x) <= fl_stack_max
      && pt_check(fl_current(x)))

@m fl_number(x) number_##x
@m fl_source(x) source_##x
@m fl_source_kseg(x) source_kseg_##x
@m fl_source_xseg(x) source_xseg_##x
@m fl_source_type(x) source_type_##x
@m fl_source_root_sp(x) source_root_sp_##x
@m fl_origin(x) origin_##x
@m fl_rand(x) x
@m fl_stack(x) stack_##x
@m fl_pointer(x) pointer_##x
@m fl_current(x) fl_stack(x)[fl_pointer(x)]

@ Length specifications.

@m fl_stack_max 40

@ Macros to manipulate flights.

@m fl_label(x,num,isource) fl_number(x)=num;
      fl_source(x)=isource @;

@m fl_init(x,sy,kseg,xseg,type,rsp) pt_init(fl_origin(x),sy,fl_source(x));
      fl_pointer(x)=1;
      fl_source_kseg(x)=kseg;
      fl_source_xseg(x)=xseg;
      fl_source_type(x)=type;
      fl_source_root_sp(x)=rsp;
      pt_copy(fl_origin(x),fl_current(x)) @;

@* Flight class attribute descriptions.

@ Define a flight. Prefix is |fl|.  

The identifier |flight| is a string tag.

\begin{description}
  \item[|fl_number(flight)|] Is the flight number.
  \item[|fl_source(flight)|] Is the number of the source which gave rise 
to the flight.
  \item[|fl_source_kseg(flight)|] Is the segment number, within
this particular source group,  of the source 
which gave rise to the flight.
  \item[|fl_source_xseg(flight)|] Is the geometry element corresponding
to the segment number which gave rise to the flight; set using
|source_segment_ptr|.
  \item[|fl_source_type(flight)|] Is the type of source initiating this
flight; set using |so_type|.
  \item[|fl_source_root_sp(flight)|] Is the ``root'' species associated
with the source initiating this flight; set using |so_root_sp|.
  \item[|fl_origin(flight)|] Is the particle initiating the flight.
  \item[|fl_rand(flight)|] Is the random number information for the flight.
  \item[|fl_stack(flight)|] Is the stack of particles being processed.
  \item[|fl_pointer(flight)|] Is the pointer to the current particle 
(maximum size |fl_stack_max|).
  \item[|fl_current(flight)|] Is the current particle (same as
|fl_stack(flight)[fl_pointer(flight)]|).
\end{description}

@ Routines using flights.

\begin{description}
  \item[|fl_label(flight,num,isource)|] Sets |fl_number(flight)| to |num| and 
  \item[|fl_source(flight)|] To source number |isource|.
  \item[|fl_init(flight,sy,kseg,xseg,type,rsp)|] Sets up a current flight containing a 
particle of species |sy|, using |fl_origin(flight)| for the other particle 
properties and |fl_source(flight)| as the ``author''.  The source 
segment numbers |kseg| and |xseg| are recorded as separate parameters.  
\end{description}

      
      
