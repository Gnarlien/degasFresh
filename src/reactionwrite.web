% $Id: 44e470e2240411b404e3ccc39c136b93f5b40de0 $
\Title{reactionwrite}


@* Introduction.

\ID{$Id: 44e470e2240411b404e3ccc39c136b93f5b40de0 $}

Reads in a text file of reaction data and writes out a file in NETCDF
format with a complete specification of the reaction.

@m FILE 'reactionwrite.web'

@I macros.hweb
@I xsection.hweb
@I netcdf.hweb
@I sysdep.hweb
@I string.hweb

@ The unnamed module.

@a
      program reactionwrite
      implicit_none_f77
      implicit_none_f90
      call reaction_write('hionize5','../data/ehr5.dat',
     &     'e ionization of H, CR data from ehr5.dat')
      call reaction_write('hrecombine5','../data/ehr5.dat',
     &     'e recombination of H+, CR data from ehr5.dat')
      stop
      end

      @<Functions and subroutines@>
      
@ Set up array sizes to read in data for a particular reaction.

@<Functions...@>=
      subroutine reaction_write(name,filein,version)
      implicit_none_f77
      xs_common                                         // Common
      implicit_none_f90

      character*(*) name,filein,version                 // Input

      integer i,j,k,l,fileid,iline                      // Local
      real delta,density,eionize,a32,e32,a21,e21,
     &     a42,e42,a52,e52
      character*FILELEN fileout
      character*LINELEN tag,description

      nc_decls
      xs_ncdecl
      xs_decls
      st_decls 
      @<Memory allocation interface@>
      
      xs_name=name
      xsection_version=version
      if (index(name,'ionize') != 0) then
         xs_num_dep_var=7
      else if (index(name,'recombine') != 0) then
         xs_num_dep_var=8
      end if

      do i=1,xs_num_dep_var
         xs_eval_name[i]='table'
         xs_rank[i]=2 
         xs_spacing[0,i]='log' 
         xs_var[1,i]='temperature'
         xs_spacing[1,i]='log'
         xs_units[1,i]='eV'  
         xs_mult[1,i]=electron_charge  
         xs_tab_index[1,i]=60   
         delta=const(10.0)**const(0.1)
         xs_min[1,i]=const(10.)**(const(-1.2))
         xs_max[1,i]=xs_min[1,1]*delta**(xs_tab_index[1,i]-1)

         xs_var[2,i]='density'  
         xs_spacing[2,i]='log'        
         xs_units[2,i]='cm^-3'
         xs_mult[2,i]=const(1.0,6)
         xs_tab_index[2,i]=15 
         delta=const(10.0)**const(0.5)
         xs_min[2,i]=const(1.0,10)
         xs_max[2,i]=xs_min[2,i]*delta**(xs_tab_index[2,i]-1)

         do j=xs_rank[i]+1,xs_table_rank_max
            xs_tab_index[j,i]=1
            xs_var[j,i]='unknown'
            xs_spacing[j,i]='unknown'
            xs_units[j,i]='unknown'
            xs_mult[j,i]=zero
            xs_min[j,i]=zero
            xs_max[j,i]=zero
         end do
      end do

      xs_num_dep_var=0
      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='reaction_rate' 
      xs_units[0,xs_num_dep_var]='cm^3/s'  
      xs_mult[0,xs_num_dep_var]=const(1.0,-6) 

      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='background_energy_loss_rate'
      xs_units[0,xs_num_dep_var]='ergs*cm^3/s'
      xs_mult[0,xs_num_dep_var]=const(1.0,-13)

      if (index(name,'recombine') != 0) then
         xs_num_dep_var++
         xs_var[0,xs_num_dep_var]='background_energy_source_rate'
         xs_units[0,xs_num_dep_var]='ergs*cm^3/s'
         xs_mult[0,xs_num_dep_var]=const(1.0,-13)
      end if

      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='emission_rate'
      xs_units[0,xs_num_dep_var]='ergs*cm^3/s'
      xs_mult[0,xs_num_dep_var]=const(1.0,-13)
/*
   This was originally added to provide access to the
   n=2 density in post-processing.  Subsequently
   added the Lyman-alpha line, but keeping this for
   simplicity.
*/
      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='n=2/n=1'
      xs_units[0,xs_num_dep_var]='none'
      xs_mult[0,xs_num_dep_var]=one

      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='emission_rate_Lyman_alpha'
      xs_units[0,xs_num_dep_var]='ergs*cm^3/s'
      xs_mult[0,xs_num_dep_var]=const(1.0,-13)

      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='emission_rate_Balmer_beta'
      xs_units[0,xs_num_dep_var]='ergs*cm^3/s'
      xs_mult[0,xs_num_dep_var]=const(1.0,-13)

      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='emission_rate_Balmer_gamma'
      xs_units[0,xs_num_dep_var]='ergs*cm^3/s'
      xs_mult[0,xs_num_dep_var]=const(1.0,-13)

      do i=xs_num_dep_var+1,xs_num_dep_var+3
         xs_units[0,i]='Angstroms'
         xs_mult[0,i]=const(1.,-10)
         xs_eval_name[i]='table'
         xs_rank[i]=1
         xs_spacing[0,i]='linear'
         xs_var[1,i]='emitter_mass'
         xs_spacing[1,i]='linear'
         xs_units[1,i]='kilograms'
         xs_mult[1,i]=one
         xs_tab_index[1,i]=4
         do j=xs_rank[i]+1,xs_table_rank_max
            xs_tab_index[j,i]=1
            xs_var[j,i]='unknown'
            xs_spacing[j,i]='unknown'
            xs_units[j,i]='unknown'
            xs_mult[j,i]=zero
            xs_min[j,i]=zero
            xs_max[j,i]=zero
         end do
      end do
/*
   Just surround actual mass in a convenient way:
*/
      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='wavelength_H_alpha'
      xs_min[1,xs_num_dep_var]=const(1.5,-27)
      xs_max[1,xs_num_dep_var]=const(1.8,-27)   // is 1.6735e-27

      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='wavelength_D_alpha'
      xs_min[1,xs_num_dep_var]=const(3.2,-27)
      xs_max[1,xs_num_dep_var]=const(3.5,-27)   // 3.3443e-27

      xs_num_dep_var++
      xs_var[0,xs_num_dep_var]='wavelength_T_alpha'
      xs_min[1,xs_num_dep_var]=const(4.85,-27)
      xs_max[1,xs_num_dep_var]=const(5.15,-27)  // 5.0083e-27
/*
  Using a single, isotope independent, wavelength
  for Lyman-alpha, Balmer-beta, and Balmer-gamma for now in 
  lieu of allowing for multiple ``generic'' lines in the ionization routines.
*/
      do iline=1,3
         xs_num_dep_var++
         if (iline == 1) then
            xs_var[0,xs_num_dep_var]='wavelength_Lyman_alpha'
         else if (iline == 2) then
            xs_var[0,xs_num_dep_var]='wavelength_Balmer_beta'
         else 
            xs_var[0,xs_num_dep_var]='wavelength_Balmer_gamma'
         end if
         xs_units[0,xs_num_dep_var]='Angstroms'
         xs_mult[0,xs_num_dep_var]=const(1.,-10)
         xs_eval_name[xs_num_dep_var]='table_external'
         xs_rank[xs_num_dep_var]=0
         xs_spacing[0,xs_num_dep_var]='linear'
         do j=1,xs_table_rank_max
            xs_tab_index[j,xs_num_dep_var]=1
            xs_var[j,xs_num_dep_var]='unknown'
            xs_spacing[j,xs_num_dep_var]='unknown'
            xs_units[j,xs_num_dep_var]='unknown'
            xs_mult[j,xs_num_dep_var]=zero
            xs_min[j,xs_num_dep_var]=zero
            xs_max[j,xs_num_dep_var]=zero
         end do
      end do

/* nothing known about the other dependent variables */
      do i=xs_num_dep_var+1,xs_dep_var_max
         xs_rank[i]=1
         xs_eval_name[i]='unknown'
         xs_var[0,i]='unknown'
         xs_spacing[0,i]='unknown'
         xs_units[0,i]='unknown'
         xs_mult[0,i]=zero
         do j=1,xs_table_rank_max
            xs_tab_index[j,i]=1
            xs_var[j,i]='unknown'
            xs_spacing[j,i]='unknown'
            xs_units[j,i]='unknown'
            xs_mult[j,i]=zero
            xs_min[j,i]=zero
            xs_max[j,i]=zero
         end do
      end do

      xs_ragged_alloc(xs_data,xs_tab_index)

      xs_num_dep_var=0
      xs_num_dep_var++
      if (index(name,'ionize') != 0) then
         call file_read(filein,xs_num_dep_var,'Ionization Rate')
         tag='Neutral'
      else if (index(name,'recombine') != 0) then
         call file_read(filein,xs_num_dep_var,'Recombination Rate')
         tag='Continuum'
      end if

      xs_num_dep_var++
      call file_read(filein,xs_num_dep_var,trim(tag)\/' Electron Losses')
      delta=const(10.0)**const(0.5)
      do j=0,xs_tab_index[2,xs_num_dep_var]-1
         density=xs_min[2,xs_num_dep_var]*delta**j
         assert(density > zero)
         do i=0,xs_tab_index[1,xs_num_dep_var]-1
            xs_data_table(i,j,0,xs_num_dep_var)/=density
         end do
      end do

/*
   Ionization energy as in original DEGAS
*/
      eionize=const(1.3595,1)*electron_charge*const(1.,7)
      if (index(name,'ionize') != 0) then
         do j=0,xs_tab_index[2,xs_num_dep_var]-1
            do i=0,xs_tab_index[1,xs_num_dep_var]-1
/* 
   ADD ionization losses to excitation losses.
*/
               xs_data_table(i,j,0,xs_num_dep_var)+=eionize*xs_data_table(i,j,0,1)
            end do
         end do
      else if (index(name,'recombine') != 0) then
         xs_num_dep_var++
         do j=0,xs_tab_index[2,xs_num_dep_var]-1
            do i=0,xs_tab_index[1,xs_num_dep_var]-1
/* 
   Separate dep. var. for positive contribution to electron energy
*/
               xs_data_table(i,j,0,xs_num_dep_var)=eionize*xs_data_table(i,j,0,1)
            end do
         end do
      end if         

      xs_num_dep_var++
/*
   |e32| = transition energy from $n = 3$ to $n = 2$ (H$_{\alpha}$),
   |a32| = radiative decay rate for this process (``Einstein coefficient'')
*/
      e32=eionize*(one/two**2 - one/(const(3.)**2))
      a32=const(4.41,7)
      call file_read(filein,xs_num_dep_var,trim(tag)\/' n=3 / n=1')
      do j=0,xs_tab_index[2,xs_num_dep_var]-1
         density=xs_min[2,xs_num_dep_var]*delta**j
         assert(density > zero)
         do i=0,xs_tab_index[1,xs_num_dep_var]-1
            xs_data_table(i,j,0,xs_num_dep_var)*=e32*a32/density
         end do
      end do

      xs_num_dep_var++
      call file_read(filein,xs_num_dep_var,trim(tag)\/' n=2 / n=1')
      
      xs_num_dep_var++
      e21=eionize*(one - one/two**2)
      a21=const(4.699,8)
      do j=0,xs_tab_index[2,xs_num_dep_var]-1
         density=xs_min[2,xs_num_dep_var]*delta**j
         assert(density > zero)
         do i=0,xs_tab_index[1,xs_num_dep_var]-1
            xs_data_table(i,j,0,xs_num_dep_var)
     $           =xs_data_table(i,j,0,xs_num_dep_var-1)*e21*a21/density
         end do
      end do
 
      xs_num_dep_var++
      e42=eionize*(one/two**2 - one/(const(4.)**2))
      a42=const(8.419,6)
      call file_read(filein,xs_num_dep_var,trim(tag)\/' n=4 / n=1')
      do j=0,xs_tab_index[2,xs_num_dep_var]-1
         density=xs_min[2,xs_num_dep_var]*delta**j
         assert(density > zero)
         do i=0,xs_tab_index[1,xs_num_dep_var]-1
            xs_data_table(i,j,0,xs_num_dep_var)*=e42*a42/density
         end do
      end do

      xs_num_dep_var++
      e52=eionize*(one/two**2 - one/(const(5.)**2))
      a52=const(2.530,6)
      call file_read(filein,xs_num_dep_var,trim(tag)\/' n=5 / n=1')
      do j=0,xs_tab_index[2,xs_num_dep_var]-1
         density=xs_min[2,xs_num_dep_var]*delta**j
         assert(density > zero)
         do i=0,xs_tab_index[1,xs_num_dep_var]-1
            xs_data_table(i,j,0,xs_num_dep_var)*=e52*a52/density
         end do
      end do

      xs_num_dep_var++
      xs_data_table(0,0,0,xs_num_dep_var)=zero
      xs_data_table(1,0,0,xs_num_dep_var)=const(6.56280,3)
      xs_data_table(2,0,0,xs_num_dep_var)=const(6.56280,3)
      xs_data_table(3,0,0,xs_num_dep_var)=zero

      xs_num_dep_var++
      xs_data_table(0,0,0,xs_num_dep_var)=zero
      xs_data_table(1,0,0,xs_num_dep_var)=const(6.56104,3)
      xs_data_table(2,0,0,xs_num_dep_var)=const(6.56104,3)
      xs_data_table(3,0,0,xs_num_dep_var)=zero

      xs_num_dep_var++
      xs_data_table(0,0,0,xs_num_dep_var)=zero
      xs_data_table(1,0,0,xs_num_dep_var)=const(6.56045,3)
      xs_data_table(2,0,0,xs_num_dep_var)=const(6.56045,3)
      xs_data_table(3,0,0,xs_num_dep_var)=zero

      xs_num_dep_var++
      xs_data_table(0,0,0,xs_num_dep_var)=const(1.215668,3)

      xs_num_dep_var++
      xs_data_table(0,0,0,xs_num_dep_var)=const(4.861,3)

      xs_num_dep_var++
      xs_data_table(0,0,0,xs_num_dep_var)=const(4.341,3)

      do i=xs_num_dep_var+1,xs_dep_var_max
         do j=0,xs_tab_index[3,i]-1
            do k=0,xs_tab_index[2,i]-1
               do l=0,xs_tab_index[3,i]-1
                  xs_data_table(l,k,j,i)=real_unused
               end do
            end do
         end do
      end do

      fileout=trim(name)\/'.nc'
      fileid = nccreate(fileout,NC_CLOBBER,nc_stat)

      description = 
     $  'Reference atomic physics data for a reaction in degas 2'
      call ncattputc(fileid,NC_GLOBAL,'description',NC_CHAR,
     $     string_length(description),
     $     description,nc_stat)

      call ncattputc(fileid,NC_GLOBAL,'data_version',NC_CHAR,
     $     string_length(xsection_version),
     $     xsection_version,nc_stat)
      
      xs_ncdef(fileid)
      call ncendef(fileid,nc_stat)
      xs_ncwrite(fileid)

      var_free(xs_data_tab)
      call ncclose(fileid,nc_stat)

      return
      end

@ Read in the data from the file.

@<Functions...@>=
      subroutine file_read(filename,jdep,tag)
      implicit_none_f77
      xs_common                                 // Common
      implicit_none_f90
      character*(*) filename,tag                // Input
      integer jdep

      integer i,j,k,length,pl_length            // Local
      character*80 line

      st_decls
      xs_decls
      
      open(unit=diskin,file=filename,status='old',form='formatted')

      length=string_length(tag)
      k=0
loop: continue
      read(diskin,'(a)',end=eof) line
      pl_length=parse_string(line)
      if (line(:length) == tag) then
         read(diskin,'(a)') line
         do j=0,xs_tab_index[2,jdep]-1
            read(diskin,*) SP (xs_data_table(i,j,k,jdep),
     &           i=0,xs_tab_index[1,jdep]-1)
            read(diskin,'(a)') line
            read(diskin,'(a)') line
         end do
      else
         goto loop
      end if

eof:  continue
      close(unit=diskin)

      return
      end

@* References.

\bibliographystyle{report}
\bibliography{../../degas}

@* INDEX.

