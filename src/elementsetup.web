% $Id: 3fba2f30a3210e3829fc5e685d348c61a996c042 $
\Title{elementsetup}


@* Routines used to set up the elements file.

\ID{$Id: 3fba2f30a3210e3829fc5e685d348c61a996c042 $}

The \verb+elements_infile+ identified in the \verb+degas2.in+ file
lists all of the elements available to DEGAS 2 for
use in constructing the species. 
As shown in this example, the
atomic number, a symbol, the atomic mass (in AMU), and a descriptive
name are provided. The program |datasetup| reads this file,
translates this information into DEGAS 2 data, and generates the netCDF file
with the symbolic name \verb+elementsfile+.

\begin{verbatim}
#  Z Sy    amu          name

   0 0     0            geometry
  -1 e     5.4858e-4    electron
   0 n     1.008665     neutron
   1 H     1.007825     hydrogen
   1 D     2.0140       deuterium
   1 T     3.01605      tritium
   2 He3   3.01603      helium-3
   2 He    4.002602     helium
   3 Li    6.941        lithium
\end{verbatim}

@m FILE 'elementsetup.web'

@I macros.hweb
@I readfilenames.hweb
@I element.hweb
@I sysdep.hweb
@I string.hweb
@I netcdf.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@ Read in data from \verb+elements_infile+.

@<Functions...@>=
      subroutine read_elements
      implicit_none_f77
      el_common                 // Common
      rf_common
      implicit_none_f90
      st_decls
      integer length,p,b,e // Local
      character*LINELEN line
      character* FILELEN tempfile    //local
      @<Memory allocation interface@>
      
      el_num=0
      element_version='unknown'
      tempfile = filenames_array[elements_infile]
      assert(tempfile != char_undef)
      open(unit=diskin,file=tempfile,
     $     form='formatted',status='old')
      assert( read_string(diskin,line,length) )
      assert(length<=len(line))
      element_version=line(:length)
loop1: continue
      if (! read_string(diskin,line,length) ) goto eof
      el_num=el_num+1
      var_realloca(element_sy)
      var_realloca(element_name)
      var_realloca(element_m)
      var_realloca(element_z)
      length=parse_string(line(:length))
      p=0
      assert( next_token(line,b,e,p) )
      el_z(el_num)=read_integer(line(b:e))
      assert( next_token(line,b,e,p) )
      el_sy(el_num)=read_text(line(b:e))
      assert( next_token(line,b,e,p) )
      el_m(el_num)=read_real(line(b:e))
      assert( next_token(line,b,e,p) )
      el_name(el_num)=read_text(line(b:e))
      goto loop1
eof:  continue
      close(unit=diskin)
      var_reallocb(element_sy)
      var_reallocb(element_name)
      var_reallocb(element_m)
      var_reallocb(element_z)
      return
      end

@ Write out data into netcdf file \verb+elements.nc+
      
@<Functions...@>=
      subroutine nc_write_elements
      implicit_none_f77
      el_common                 // Common
      rf_common
      implicit_none_f90
      nc_decls                 // Local
      st_decls
      integer fileid
      character *FILELEN tempfile      //local
      el_ncdecl
      character*LINELEN description,program_version

      program_version=
     $     'DEGAS 2 Git commit: $Format:%H$, ref names: $Format:%d$'


      tempfile = filenames_array[elementsfile]
      assert(tempfile != char_undef)
      fileid = nccreate(tempfile,NC_CLOBBER,nc_stat)

      description = 'Data for elements in degas 2'
      call ncattputc(fileid,NC_GLOBAL,'description',NC_CHAR,
     $     string_length(description),
     $     description,nc_stat)

      call ncattputc(fileid,NC_GLOBAL,'data_version',NC_CHAR,
     $     string_length(element_version),
     $     element_version,nc_stat)
      
      call ncattputc(fileid,NC_GLOBAL,'program_version',NC_CHAR,
     $     string_length(program_version),
     $     program_version,nc_stat)
      
      el_ncdef(fileid)
      call ncendef(fileid,nc_stat)
      el_ncwrite(fileid)
      
      call ncclose(fileid,nc_stat)
      
      return
      end

      



@* References.

\bibliographystyle{report}
\bibliography{../../degas}

@* INDEX.

