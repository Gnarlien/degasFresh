% $Id: ca45d6adb244d1dab566d7b48c442548877fce7e $
\Title{def2dplasma}

@* Default plasma setup routine.  This routine is called by {\tt defineback}.
The {\tt Makefile} will load this routine unless it finds a file called
{\tt usr2dplasma.web} (containing a subroutine |get_n_t|). To ensure
that this routine is in the executable you can do:
\begin{verbatim}
cd $HOME/degas2/src
rm usr2dplasma.web
touch def2dplasma.web
cd ../SUN
gmake defineback
\end{verbatim}

For additional details, see the documentation at the top of {\tt defineback}.

\ID{$Id: ca45d6adb244d1dab566d7b48c442548877fce7e $}

@m FILE 'def2dplasma.web'

@I macros.hweb
@I sysdep.hweb
@I background.hweb
@I zone.hweb
@I string.hweb
@I geomint.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@ Find background densities, temperatures, and flow velocities. These are
read from a file using a rather flexible, user-specified format. The key
assumption for this routine (conceivably others could be developed) is that
all data pertaining to a particular zone are contained on a single line of
the file. If the zone number is provided as the first number of a line,
it will be used in assigning the data values on that line; in principle,
the any ordering of zones could be used. Note that this zone number is the
``absolute'' zone, not the plasma zone number. If the zone number is not 
specified, the line number is used as the zone number.

@m open_file(aunit,aname)    open(unit=aunit,file=aname,status='old',form='formatted',iostat=open_stat);
         assert(open_stat == 0) @;

@m format_max LINELEN     // |format_code| is parsed from a line

// Reserve first 9 values for background indices
@m form_undefined 0
@m form_zone 10
@m form_density 11
@m form_temperature 12
@m form_velocity_1 13
@m form_velocity_2 14
@m form_velocity_3 15

@m data_loop #:0
@m kount_loop #:0    // If ``count\_loop'', will assume it's a comment

@m zone_iy_mapm(iy,zone) zone_iy_map[(zone-1)*dim_y+iy]

@<Functions...@>=
      subroutine get_n_t(nt_string)

      define_dimen(iy_zone_ind,dim_y*zn_num)

      define_varp(n_iy,INT,zone_ind)
      define_varp(zone_iy_map,INT,iy_zone_ind)

      implicit_none_f77
      bk_common                                             // Common
      zn_common
      gi_common
      implicit_none_f90

      character*FILELEN nt_string                           // Input

      integer p,b,e,length,count,line_num,                  // Local
     $        sub_count,open_stat,diskin3,dim_y,iy,
     $        symmetric_plasma
      integer format_code[format_max]
      character*LINELEN line,plasma_format
      character*FILELEN plasma_file

      zn_decl(zone)
      zn_decl(iy_zone)
      bk_decl(back)

      declare_varp(n_iy)
      declare_varp(zone_iy_map)

      @<Memory allocation interface@>
      st_decls
      zn_decls

      var_alloc(n_iy)
      dim_y=1
      do zone=1,zn_num
         n_iy[zone]=0  
      end do
/*
   Assuming here that we will frequently want the plasma data
   to be toroidally symmetric with the values in a single plane being 
   specified in the input file.  We use here the values of
   |zn_index(zone,zi_ptr)| to count the other zones which
   point to them and set up a mapping that we can use later
   in the subroutine.  Note that we make no assumptions about
   the value of this zone index |iy|.  The ``reference'' zones are
   identified as the ones having |zn_index(zone,zi_ptr)| = |zone|;
   for them, |n_iy[zone]| holds the number of zones referring to it.
   For the others, |zn_index(zone,zi_ptr)| $\neq$ |zone| and
  |n_iy[zone]| serves as a pointer into the mapping array.
*/
      do zone=1,zn_num
         if (zn_index(zone,zi_ptr) != zone) then
            n_iy[zn_index(zone,zi_ptr)]++
            dim_y=max(n_iy[zn_index(zone,zi_ptr)],dim_y)
            n_iy[zone]=n_iy[zn_index(zone,zi_ptr)]
         end if
      end do

      assert((dim_y == 1) 
     $     || (geometry_symmetry == geometry_symmetry_plane_hw)
     $     || (geometry_symmetry == geometry_symmetry_cyl_hw)
     $     || (geometry_symmetry == geometry_symmetry_cyl_section))

      var_alloc(zone_iy_map)
      do zone=1,zn_num
         do iy=1,dim_y
            zone_iy_mapm(iy,zone)=int_undef
         end do
      end do
      if (dim_y > 1) then
         do zone=1,zn_num
            if (zn_index(zone,zi_ptr) != zone) then
               assert((n_iy[zone] > 0) && (n_iy[zone] <= dim_y))
               zone_iy_mapm(n_iy[zone],zn_index(zone,zi_ptr))=zone
            end if
         end do
      end if

      p=0
      assert(next_token(nt_string,b,e,p))
      plasma_file=nt_string(b:e)
/*
   Continue parsing this string to see if the symmetry is specified
*/
      if (next_token(nt_string,b,e,p)) then
         if (nt_string(b:e) == '2D') then
            symmetric_plasma=TRUE
         else if (nt_string(b:e) == '3D') then
            symmetric_plasma=FALSE
         else
            assert(' Unexpected plasma symmetry specification ' 
     $           == nt_string(b:e))
         end if
      else                        
         symmetric_plasma=TRUE     // Default case
      end if
      diskin3=diskin+2
      open_file(diskin3,plasma_file)
      assert(read_string(diskin3,line,length))
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
/*
   First line of the file must be a format string
*/
      plasma_format=line(:length)
      call parse_format(plasma_format,bk_num,format_code,count)
      assert(count > 0)
      line_num=0

data_loop: continue
      if (! read_string(diskin3,line,length)) goto eof
      line_num++
      zone=line_num
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      sub_count=0

kount_loop: continue
      sub_count++
      if (sub_count > count) goto data_loop
      assert(next_token(line,b,e,p))
      if (format_code[sub_count] == form_zone) then
         zone=read_integer(line(b:e))
         assert(zn_check(zone))
         assert((zn_index(zone,zi_ptr) == zone) 
     $        || (symmetric_plasma == FALSE))
         assert(zn_type(zone) == zn_plasma)
      else if (format_code[sub_count] == form_density) then
         sub_count++
         back=format_code[sub_count]
         assert(bk_check(back))
         assert(zn_check(zone))
         assert((zn_index(zone,zi_ptr) == zone) 
     $        || (symmetric_plasma == FALSE))
         assert(zn_type(zone) == zn_plasma)
         bk_n(back,zone)=read_real(line(b:e))
         assert(bk_n(back,zone) >= zero)
         if ((dim_y > 1) && (symmetric_plasma == TRUE)) then
            do iy=1,dim_y
               iy_zone=zone_iy_mapm(iy,zone)
               if ((zn_check(iy_zone)) 
     $              && (zn_type(iy_zone) == zn_plasma)) then
                  bk_n(back,iy_zone)=bk_n(back,zone)
               end if
            end do
         end if
      else if (format_code[sub_count] == form_temperature) then
         sub_count++
         back=format_code[sub_count]
         assert(bk_check(back))
         assert(zn_check(zone))
         assert((zn_index(zone,zi_ptr) == zone) 
     $        || (symmetric_plasma == FALSE))
         assert(zn_type(zone) == zn_plasma)
         bk_temp(back,zone)=read_real(line(b:e))*electron_charge
         assert(bk_temp(back,zone) >= zero)
         if ((dim_y > 1) && (symmetric_plasma == TRUE)) then
            do iy=1,dim_y
               iy_zone=zone_iy_mapm(iy,zone)
               if ((zn_check(iy_zone)) 
     $              && (zn_type(iy_zone) == zn_plasma)) then
                  bk_temp(back,iy_zone)=bk_temp(back,zone)
               end if
            end do
         end if
      else if (format_code[sub_count] == form_velocity_1) then
         sub_count++
         back=format_code[sub_count]
         assert(bk_check(back))
         assert(zn_check(zone))
         assert((zn_index(zone,zi_ptr) == zone) 
     $        || (symmetric_plasma == FALSE))
         assert(zn_type(zone) == zn_plasma)
         bk_v(back,zone)[1]=read_real(line(b:e))
         if ((dim_y > 1) && (symmetric_plasma == TRUE)) then
            do iy=1,dim_y
               iy_zone=zone_iy_mapm(iy,zone)
               if ((zn_check(iy_zone)) 
     $              && (zn_type(iy_zone) == zn_plasma)) then
                  bk_v(back,iy_zone)[1]=bk_v(back,zone)[1]
               end if
            end do
         end if
      else if (format_code[sub_count] == form_velocity_2) then
         sub_count++
         back=format_code[sub_count]
         assert(bk_check(back))
         assert(zn_check(zone))
         assert((zn_index(zone,zi_ptr) == zone) 
     $        || (symmetric_plasma == FALSE))
         assert(zn_type(zone) == zn_plasma)
         bk_v(back,zone)[2]=read_real(line(b:e))
         if ((dim_y > 1) && (symmetric_plasma == TRUE)) then
            do iy=1,dim_y
               iy_zone=zone_iy_mapm(iy,zone)
               if ((zn_check(iy_zone)) 
     $              && (zn_type(iy_zone) == zn_plasma)) then
                  bk_v(back,iy_zone)[2]=bk_v(back,zone)[2]
               end if
            end do
         end if
      else if (format_code[sub_count] == form_velocity_3) then
         sub_count++
         back=format_code[sub_count]
         assert(bk_check(back))
         assert(zn_check(zone))
         assert((zn_index(zone,zi_ptr) == zone) 
     $        || (symmetric_plasma == FALSE))
         assert(zn_type(zone) == zn_plasma)
         bk_v(back,zone)[3]=read_real(line(b:e))
         if ((dim_y > 1) && (symmetric_plasma == TRUE)) then
            do iy=1,dim_y
               iy_zone=zone_iy_mapm(iy,zone)
               if ((zn_check(iy_zone)) 
     $              && (zn_type(iy_zone) == zn_plasma)) then
                  bk_v(back,iy_zone)[3]=bk_v(back,zone)[3]
               end if
            end do
         end if
      end if
      goto kount_loop

eof:  continue
      close(unit=diskin3)

      return
      end



@* INDEX.
