$Id: 870caf769d54f5bfef18cdac47877ee72ed2e7ca $
\Title{poly_to_tri}

@* Read in a polygon netCDF file (i.e., the g2 class) and transform
rectangles and triangles into Triangle's ``nodes'' and ``elements''.

The full name of the polygon netCDF file is specified on the command
line; the resulting |.ele| and |.node| files will have the same root
name.  The only manipulation of triangles is that a counter-clockwise
orientation is ensured.  Each rectangle is split into two counter-clockwise
triangles.

Only plasma and vacuum zones are included, avoiding the more complex
polygon structures typically used for specifying the material 
boundaries.  The values of |zone_index| are included as the
last two columns in the |.node|
file, and the zone number appears in the last column of the
|.ele| file.

\ID{$Id: 870caf769d54f5bfef18cdac47877ee72ed2e7ca $}

@m FILE 'poly_to_tri.web'

@I macros.hweb
@I string.hweb
@I sysdep.hweb
@I netcdf.hweb
@I readfilenames.hweb
@I geometry2d.hweb
@I zone.hweb
@I sector.hweb

@ The unnamed module.

@a
      @<Functions and subroutines@>

@ The Main Program.

@m main_code_macros_here 0

@<Functions...@>=
      program poly_to_tri

      define_dimen(node_ind,num_nodes)
      define_dimen(tri_ind,num_tri)
      define_dimen(corner_ind,0,2)

      define_varp(nodes,FLOAT,g2_xz_ind,node_ind)
      define_varp(boundary_nodes,INT,node_ind)
      define_varp(node_index,INT,zone_index_ind,node_ind)
      define_varp(triangles,INT,corner_ind,tri_ind)
      define_varp(triangle_zone,INT,tri_ind)

      implicit_none_f77
      zn_common
      sc_common
      g2_common
      implicit_none_f90

      integer nargs,fileid,ipoly,zone,num_nodes,num_tri,mesh_sense,
     $        i,j,this_node,ele_unit,node_unit,sector
      integer this_polygon[0:3]
      character*FILELEN polygon_nc_file,file_root

      vc_decl(yhat)
      vc_decl(test_vec_1)
      vc_decl(test_vec_2)
      vc_decl(test_vec_3)
      vc_decl(node_x)

      declare_varp(nodes)
      declare_varp(boundary_nodes)
      declare_varp(node_index)
      declare_varp(triangles)
      declare_varp(triangle_zone)

      @<Memory allocation interface@>
      sy_decls
      vc_decls
      g2_ncdecl
      nc_decls
      st_decls

      num_nodes=0
      num_tri=0
      var_alloc(nodes)
      var_alloc(boundary_nodes)
      var_alloc(node_index)
      var_alloc(triangles)
      var_alloc(triangle_zone)

      call readfilenames
/*
   I think this is all we need.  Only using the geometry to get at
   the zone types since we will be processing only plasma and
   vacuum zones.
*/
      call read_geometry

      nargs=arg_count()
      if (nargs != 1) then
         assert('Command line must specify the name of the polygon netCDF file' == ' ')
      end if
      call command_arg(1,polygon_nc_file)

      fileid=ncopen(polygon_nc_file,NC_NOWRITE,nc_stat)
      if (nc_stat != 0) then
         assert('That polygon netCDF file cannot be opened!' == ' ')
      end if
      g2_ncread(fileid)

      vc_set(yhat,zero,one,zero)
      do ipoly=1,g2_num_polygons
         zone=g2_polygon_zone[ipoly]
         if ((zn_type(zone) == zn_vacuum) || (zn_type(zone) == zn_plasma)) then
/*
   The idea is that the user will have used |triangulate_polygon| or
   |triangulate_to_zones| in breaking up the original polygons input
   to |definegeometry2d.web|; those should all be triangles.  The
   quadrilaterals here will be from a Sonnet mesh.
*/
            vc_set(test_vec_1,g2_polygon_xz[ipoly][1][g2_x]
     $               -g2_polygon_xz[ipoly][0][g2_x],zero,
     $           g2_polygon_xz[ipoly][1][g2_z]-g2_polygon_xz[ipoly][0][g2_z])
            vc_set(test_vec_2,g2_polygon_xz[ipoly][2][g2_x]
     $               -g2_polygon_xz[ipoly][1][g2_x],zero,
     $           g2_polygon_xz[ipoly][2][g2_z]-g2_polygon_xz[ipoly][1][g2_z])
            vc_cross(test_vec_1,test_vec_2,test_vec_3)
            if (vc_product(test_vec_3,yhat) > zero) then
               mesh_sense=1    // clockwise
            else if(vc_product(test_vec_3,yhat) < zero) then
               mesh_sense=2    // counter-clockwise
            else
               assert('Mesh cell degenerate' == ' ')
            end if
            assert((g2_polygon_points(ipoly) == 3) ||
     $           (g2_polygon_points(ipoly) == 4))
            do i=0,g2_polygon_points(ipoly)-1
               this_node=0
               if (num_nodes > 0) then
                  do j=1,num_nodes
                     if ((nodes[j][g2_x] == g2_polygon_xz[ipoly][i][g2_x])
     $                    && (nodes[j][g2_z] == g2_polygon_xz[ipoly][i][g2_z]))
     $                    then
                        this_node=j
                     end if
                  end do
               end if
               if (this_node == 0) then
                  num_nodes++
                  var_realloca(nodes)
                  var_realloca(boundary_nodes)
                  var_realloca(node_index)
                  nodes[num_nodes][g2_x]=g2_polygon_xz[ipoly][i][g2_x]
                  nodes[num_nodes][g2_z]=g2_polygon_xz[ipoly][i][g2_z]
                  node_index[num_nodes][zi_ix]=0  // Initialize
                  node_index[num_nodes][zi_iz]=0 
/*
   Determine whether or not this node lies on a ``boundary''.  Since
   we have access to all of the geometry data, this amounts to searching
   through the wall, target, and exit sectors to see if it matches
   one of their points.
*/
                  vc_set(node_x,nodes[num_nodes][g2_x],zero,nodes[num_nodes][g2_z])           
                  boundary_nodes[num_nodes]=0   // Not on boundary
                  do sector=1,nsectors
                     if 
     $         (((sc_target_check(sector_type_pointer[sector][sc_target])) 
     $       || (sc_wall_check(sector_type_pointer[sector][sc_wall])) 
     $       || (sc_exit_check(sector_type_pointer[sector][sc_exit])))
     $       && ((vc_equal(node_x,sector_points[sector][sc_neg]))
     $           || (vc_equal(node_x,sector_points[sector][sc_pos])))) then
                        boundary_nodes[num_nodes]=1   // Is on boundary
                     end if
                  end do
                  this_node=num_nodes
               end if
               this_polygon[i]=this_node
/*
   Attempt to propagate |zone_index| information from the original geometry
   data (specifically, that remaining from the Sonnet mesh) to the nodes.
   To keep this one-to-one, need to pick a specific point in each polygon.
   The choice of point 2 is somewhat arbitrary.  Do this based on |this_node|
   rather than when a new node is defined since the early zones contribute 
   multiple nodes.
*/
               if ((i == 2) && (zn_index(zone,zi_ix) > 0)
     $             && (zn_index(zone,zi_iz) > 0)) then
                  node_index[this_node][zi_ix]=zn_index(zone,zi_ix)
                  node_index[this_node][zi_iz]=zn_index(zone,zi_iz)
               end if
            end do
            num_tri++
            var_realloca(triangles)
            var_realloca(triangle_zone)
/*
   The first bit here takes care of all triangles and the first
   triangle generated from rectangles.
*/
            triangles[num_tri][0]=this_polygon[0]
            triangle_zone[num_tri]=zone
            if (mesh_sense == 1) then
/*
   Want counter-clockwise triangles, so have to reverse these.
*/
               triangles[num_tri][1]=this_polygon[2]
               triangles[num_tri][2]=this_polygon[1]
            else
               triangles[num_tri][1]=this_polygon[1]
               triangles[num_tri][2]=this_polygon[2]
            end if
/* 
   Now create the second triangle from rectangles.
*/
            if (g2_polygon_points(ipoly) == 4) then
               num_tri++
               var_realloca(triangles)
               triangles[num_tri][0]=this_polygon[0]
               triangle_zone[num_tri]=zone
               if (mesh_sense == 1) then
                  triangles[num_tri][1]=this_polygon[3]
                  triangles[num_tri][2]=this_polygon[2]
               else
                  triangles[num_tri][1]=this_polygon[2]
                  triangles[num_tri][2]=this_polygon[3]
               end if
            end if
         end if
      end do

      node_unit=diskout
      assert(index(polygon_nc_file,'.nc') > 0)
      file_root=polygon_nc_file(:index(polygon_nc_file,'.nc')-1)
      open(unit=node_unit,file=trim(file_root)\/'.node')
      write(node_unit,*) num_nodes,' 2   0   1'
      do i=1,num_nodes
         write(node_unit,'(i6,2x,f18.15,2x,f18.15,2x,i3,2x,i5,2x,i5)') i,
     $        nodes[i][g2_x],nodes[i][g2_z],boundary_nodes[i],
     $        node_index[i][zi_ix],node_index[i][zi_iz]
      end do
      close(unit=node_unit)

      ele_unit=diskout
      open(unit=ele_unit,file=trim(file_root)\/'.ele')
/*
   The ``1'' here represents the number of triangle
   attributes in the file, here, it is the zone number
   from |g2_polygon_zone|.  Note that this must
   be formatted as a floating point number in the file.
*/
      write(ele_unit,*) num_tri,' 3    1'
      do i=1,num_tri
         write(ele_unit,'(4(i6,2x),f8.1)') i,triangles[i][0],triangles[i][1],
     $        triangles[i][2],areal(triangle_zone[i])
      end do
      close(unit=ele_unit)
/*
   Just to prevent complaints from |var_free|.
*/
      var_reallocb(nodes)
      var_reallocb(boundary_nodes)
      var_reallocb(triangles)
      var_reallocb(triangle_zone)

      var_free(nodes)
      var_free(boundary_nodes)
      var_free(triangles)
      var_free(triangle_zone)

      stop
      end

      








