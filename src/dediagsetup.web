% $Id: 1462b87eb261b2df3fa692bd6fd2088b5c104a9c $
\Title{dediagsetup}

@* Introduction.

\ID{$Id: 1462b87eb261b2df3fa692bd6fd2088b5c104a9c $}

These routines are used in setting up the detector and diagnostic information.
The geomtry-specific routines will be included elsewhere; these routines
are somewhat more general.

@m FILE 'dediagsetup.web'

@I macros.hweb
@I sysdep.hweb
@I detector.hweb
@I geomint.hweb
@I location.hweb
@I zone.hweb
@I vector.hweb
@I problem.hweb
@I sector.hweb
@I reaction.hweb
@I species.hweb
@I materials.hweb


@ The main program.

@a

@<Functions and Subroutines@>

@ Setup detector view data for a single chord.  The endpoints, halfwidth,
and averaging algorithm (uniform or circular) are input.  The geometry 
tracking algorithm traces the chord (via the subchords that emulate
the width of the view) through the problem space, yielding the relative
contribution from each zone, |zone_frags|.  The arguments do directly
correspond to the arrays in the detector common block.  However, by
specifying them in the argument list, one chord at a time, this routine
can be called in parallel by a post-processor, facilitating the
generation of high resolution camera images. NOTE: while this code does
allow endpoints to lie outside the plasma and vacuum regions, they {\em
must} be inside the universal cell. Thus, when the latter is established,
it must be made large enough to encompass all relevant diagnostic points.

The original treatment not only handled just 2-D cases, but also required
the chords to be perpendicular to the ignorable coordinate axis (e.g., the
chord could not have a $\hat{y}$ component). The current treatment handles 2-D
cases in which this restriction does not apply as well as fully 3-D geometries.
We will refer to both of these situations, for simplicity, as ``3-D''.
      
@m view_symmetric 1     // For 2-D symmetric cases

@m view_3d_uniform 2    // These two denote 3-D cases, one for
@m view_3d_circular 3   // each of the two algorithm options

@<Functions...@>=
      subroutine detector_view_setup(vc_dummy(points),halfwidth,algorithm,
     $                                 zone_frags)

      implicit_none_f77
      gi_common                           // Common
      zn_common
      implicit_none_f90

      integer algorithm                   // Input
      real halfwidth
      vc_decl(points[de_view_start:de_view_end])

      real zone_frags[zn_num]             // Output
      
      integer j,k,option,jmin,jmax,       // Local
     $        kmin,kmax,nang         
      real ang,dang,mult,tmax,t,theta_k,phi_j,omega
      logical done
      lc_decl(xx)
      vc_decl(x0)
      vc_decl(x1)
      vc_decl(deltax)
      vc_decl(v)
      vc_decl(yhat)
      vc_decl(xhat)
      vc_decl(zhat)
      vc_decl(delta_par)
      vc_decl(delta_perp)
      vc_decl(delta_perp_1)
      vc_decl(delta_perp_2)
      vc_decl(ux)
      vc_decl(uy)
      vc_decl(uz)
      vc_decl(u)

      external track                      // External
      logical track

      lc_decls
      @<Memory allocation interface@>
      vc_decls
      
      do j=1,zn_num
         zone_frags[j]=zero
      end do

      vc_set(yhat,zero,one,zero)    // Ignorable coordinate in sym. geom.
      vc_set(xhat,one,zero,zero)    // The other two coordinate axes; used 
      vc_set(zhat,zero,zero,one)    // for 3-D cases
      dang=halfwidth
      vc_copy(points[de_view_start],x0)
      vc_copy(points[de_view_end],x1)
      vc_difference(x1,x0,deltax)
      vc_unit(deltax,delta_par)
/*
   This is the original treatment.  Since the approach to
   averaging around the chord relied on symmetry in the ignorable
   coordinate, the last expression in this group was actually
   an assertion there.  Additional details on the approach
   used here are provided in the {\em Defining Radiation
   Detectors} section of the User's Manual. 
*/
      if (((geometry_symmetry == geometry_symmetry_plane) ||
     $     (geometry_symmetry == geometry_symmetry_oned) ||
     $     (geometry_symmetry == geometry_symmetry_cylindrical))
     $     && (vc_product(deltax,yhat) == zero)) then
         option=view_symmetric
         vc_cross(delta_par,yhat,delta_perp)
         nang=max(1,nint(const(30.)*(dang*const(1.8,2)/PI))) // 30 virtual chords per degree
         jmin=-nang
         jmax=nang
         kmin=1
         kmax=1
      else 
/*
   This is for the 3-D cases. We first need to define vectors 
   perpendicular to the chord.  Assume that the choice of these vectors 
   is otherwise arbitrary. Begin by determining
   which of the coordinate axes is ``most perpendicular'' to the 
   chord direction; that ends up being $\vec{u}$. Additional details 
   on the approach used here are provided in the {\em Defining Radiation
   Detectors} section of the User's Manual. 
*/
         vc_cross(delta_par,xhat,ux)
         vc_cross(delta_par,yhat,uy)
         vc_cross(delta_par,zhat,uz)
         if (vc_abs(ux) >= max(vc_abs(uy),vc_abs(uz))) then
            vc_copy(xhat,u)
         else if (vc_abs(uy) >= max(vc_abs(ux),vc_abs(uz))) then
            vc_copy(yhat,u)
         else
            assert(vc_abs(uz) > max(vc_abs(ux),vc_abs(uy)))
            vc_copy(zhat,u)
         end if
         vc_cross(delta_par,u,delta_perp_1)
         vc_unit(delta_perp_1,delta_perp_1)
         vc_cross(delta_par,delta_perp_1,delta_perp_2)
         vc_unit(delta_perp_2,delta_perp_2)
         assert(vc_product(delta_par,delta_perp_1) <= epsilon)
         assert(vc_product(delta_par,delta_perp_2) <= epsilon)
         assert(vc_product(delta_perp_1,delta_perp_2) <= epsilon)
         if (algorithm == de_algorithm_uniform) then
            option=view_3d_uniform
            nang=6   
            jmin=1
            jmax=2*nang
            kmin=1
            kmax=2*nang
         else if (algorithm == de_algorithm_circular) then
            option=view_3d_circular
            nang=6
            jmin=1
            jmax=2*nang
            kmin=1
            kmax=nang
         end if
      end if
/*
   Integrate over the subchords.  The expressions for the weights, etc. are
   described in the {\em Defining Radiation Detectors} section of the
   User's Manual.
*/
      do j=jmin,jmax
         do k=kmin,kmax
            if (option == view_symmetric) then
               ang=dang*areal(j)/areal(nang)
               vc_scale(cos(ang),delta_par,v)
               vc_xvt(v,delta_perp,sin(ang),v)
               if (algorithm == de_algorithm_uniform) then
                  mult=one/(const(4.)*PI*areal(2*nang+1))
               else if (algorithm == de_algorithm_circular) then
                  mult=one/(two*PI**2*areal(nang))*sqrt(one-(areal(j)/areal(nang))^2)
               else
                  assert('Unsupported averaging algorithm' == ' ')
               end if
            else if (option == view_3d_uniform) then
               vc_copy(delta_par,v)
               vc_xvt(v,delta_perp_1,(areal(j)-half-areal(nang))*sin(dang)/areal(nang),v)
               vc_xvt(v,delta_perp_2,(areal(k)-half-areal(nang))*sin(dang)/areal(nang),v)
               omega=const(4.)*atan((sin(dang))**2 / (sqrt(one+two*(sin(dang))**2)))
               mult=(sin(dang))**2/(const(4.)*PI
     $              *(areal(nang)**2*(vc_abs(v))**3)*omega)
            else
               assert(option == view_3d_circular)
               theta_k=(areal(k)-half)*dang/areal(nang)
               phi_j=(areal(j)-half)*PI/areal(nang)
               vc_copy(delta_par,v)
               vc_xvt(v,delta_perp_1,sin(theta_k)*cos(phi_j),v)
               vc_xvt(v,delta_perp_2,sin(theta_k)*sin(phi_j),v)
               omega=two*PI*(one-cos(dang))
               mult=dang*sin(theta_k)/(const(4.)*areal(nang)**2*omega)
            end if
            vc_copy(x0,lc_x(xx))
            lc_set(xx)
            assert(lc_zone(xx) > 0)
            if (zn_type(lc_zone(xx)) != zn_vacuum && zn_type(lc_zone(xx)) != zn_plasma) then
               tmax=100    // Track to vacuum or plasma boundary
loop:          continue
               t=zero
               done=track(TRACK_BASIC,tmax,lc_x(xx),v,lc_cell(xx),t,
     $              lc_x(xx),lc_cell(xx),lc_face(xx),lc_cell_next(xx),
     $              lc_sector(xx),lc_sector_next(xx))
               if (lc_cell_next(xx) == 0) go to skip  // Leaving universal cell
               if (!done) then
                  tmax=tmax-t
                  assert(lc_face(xx) != 0)
                  lc_zone_next(xx)=cells[c_zone,lc_cell_next(xx)]
                  lc_thru_face(xx)
                  if (zn_type(lc_zone(xx)) != zn_vacuum && zn_type(lc_zone(xx)) != zn_plasma) goto loop
               else
                  assert('Viewing chord longer than expected' == ' ')
               end if
            else
@#if 0
/*
   Removing this at least for now since the C-Mod camera vertices 
   are in fact inside the vessel.  Having this printed once or a few
   times might be preferable, but would need to pass down some sort
   of indicator from the calling routine.   
*/
               write(stdout,*) 'Viewing chord started inside plasma / vacuum: '
@#endif
            end if
            tmax=100     // Track through plasma or vacuum
loop1:      continue
            t=zero
            done=track(TRACK_BASIC,tmax,lc_x(xx),v,lc_cell(xx),t,
     $           lc_x(xx),lc_cell(xx),lc_face(xx),lc_cell_next(xx),
     $           lc_sector(xx),lc_sector_next(xx))
            assert(!done)
            if (zn_type(lc_zone(xx)) == zn_plasma) then  // none in vacuum
               zone_frags[lc_zone(xx)] += t*vc_abs(v)*mult
            end if
            tmax=tmax-t
            assert(lc_face(xx) != 0)
            lc_zone_next(xx)=cells[c_zone,lc_cell_next(xx)]
            if (!done && (zn_type(lc_zone_next(xx)) == zn_plasma || zn_type(lc_zone_next(xx)) == zn_vacuum || zn_type(lc_zone_next(xx)) == zn_exit)) then // UEDGE cases have the core plasma defined as an exit
               lc_thru_face(xx)
               goto loop1
            end if
skip:       continue
         end do   // $k$
      end do      // $j$
      do j=1,zn_num
            zone_frags[j]=zone_frags[j]/zn_volume(j)
      end do
      
      return
      end

      @ Add detector data for a single view to the global array,
      compressing the data in the process to remove zero entries.
      
@<Functions...@>=
      subroutine add_zone_frags(view,zone_frags)

      implicit_none_f77
      de_common                                    // Common
      zn_common
      implicit_none_f90

      integer view                                 // Input
      real zone_frags[zn_num]

      integer zone                                 // Local

      @<Memory allocation interface@>

      do zone=1,zn_num
         if (zone_frags[zone] > zero) then
            de_zone_frags_size++
            de_zone_frags_dim=max(de_zone_frags_dim,de_zone_frags_size)
            var_realloca(de_zone_frags)
            var_realloca(de_zone_frags_zones)
            if (de_zone_frags_num[view] == 0)
     $           de_zone_frags_start[view]=de_zone_frags_size
            de_zone_frags_num[view]++
            if (zone < de_zone_frags_min_zn[view]) 
     $           de_zone_frags_min_zn[view]=zone
            if (zone > de_zone_frags_max_zn[view]) 
     $           de_zone_frags_max_zn[view]=zone
            de_zone_frags[de_zone_frags_size]=zone_frags[zone]
            de_zone_frags_zones[de_zone_frags_size]=zone
         end if
      end do

      assert(de_zone_frags_num[view] > 0)
      assert(de_zone_frags_min_zn[view] != int_unused)
      assert(de_zone_frags_max_zn[view] >= de_zone_frags_max_zn[view])

      return
      end

@ Initialize arrays set up to hold the compressed
global array of detector data.

@<Functions...@>=
      subroutine initialize_zone_frags

      implicit_none_f77
      de_common                                    // Common
      implicit_none_f90

      integer i                                    // Local
      
      @<Memory allocation interface@>

      de_zone_frags_size=0
      de_zone_frags_dim=mem_inc
      var_alloc(de_zone_frags)
      var_alloc(de_zone_frags_start)
      var_alloc(de_zone_frags_num)
      var_alloc(de_zone_frags_zones)
      var_alloc(de_zone_frags_min_zn)
      var_alloc(de_zone_frags_max_zn)

      do i=1,detector_total_views
         de_zone_frags_start[i]=0
         de_zone_frags_num[i]=0
         de_zone_frags_min_zn[i]=int_unused
         de_zone_frags_max_zn[i]=-int_unused
      end do

      return
      end

@ Initialize a new detector group. This routine bears a strong, 
not-coincidental similarity to |diag_grp_init|.

@<Functions...@>=
      subroutine de_grp_init(name,num,var,tab_index,var_min,var_max,mult,
     $   spacing,grp_views)
      implicit_none_f77
      de_common                                    // Common
      pr_common
      zn_common
      implicit_none_f90

      integer num,var,tab_index,spacing            // Input
      integer grp_views[*]
      real var_min,var_max,mult
      character*(*) name
      integer i                                    // Local

      @<Memory allocation interface@>

      de_grps++
      var_realloca(detector_name)
      var_realloca(detector_num_views)
      var_realloca(detector_var)
      var_realloca(detector_tab_index)
      var_realloca(detector_min)
      var_realloca(detector_delta)
      var_realloca(detector_spacing)
      var_realloca(de_view_base)
      
      detector_name[de_grps]=name
      detector_num_views[de_grps]=num
      detector_var[de_grps]=var
      detector_tab_index[de_grps]=tab_index
      de_max_bins=max(de_max_bins,tab_index)
      if (tab_index > 0) then
         assert(var != de_var_unknown)
         if (spacing == de_spacing_linear) then
            detector_min[de_grps]=var_min*mult
/*
   Note that |tab_index| is the {\em number of bins} here, not the number
   of points as this nomenclature is used elsewhere in the code.
*/
            detector_delta[de_grps]=(var_max-var_min)*mult/tab_index
         else if (spacing == de_spacing_log) then
            detector_min[de_grps]=log(var_min*mult)
            detector_delta[de_grps]=log(var_max/var_min)/tab_index
         else
            assert('Unsupported spacing' == ' ')
         end if
         detector_spacing[de_grps]=spacing
      else
         assert(var == de_var_unknown)
         detector_min[de_grps]=zero
         detector_delta[de_grps]=zero
         detector_spacing[de_grps]=de_spacing_unknown
      end if

      de_view_base[de_grps]=de_view_size
/*
   NOTE: this assumes that the groups are established consecutively!!
   (Probably OK since this routine sets |de_grps|.)   
*/
      var_realloc(de_view_tab,de_view_size-1,de_view_size-1+num)
      de_view_size+=num

      do i=1,num
         de_view_pointer(i,de_grps)=grp_views[i]
      end do

      return
      end

@ Set up diagnostic sectors.

@<Functions...@>=
      subroutine default_diag_setup
      
      define_dimen(sector_ind1,nsectors)
      define_varp(grp_sectors,INT,sector_ind1)

      implicit_none_f77
      sc_common                                       // Common
      implicit_none_f90
      
      integer num,var,tab_index,spacing,i,i_tot       // Local
      real var_min,var_max,mult

      @<Memory allocation interface@>

      declare_varp(grp_sectors)

      var_alloc(grp_sectors)

      sc_diagnostic_grps=0
      sc_diag_size=0
      sc_diag_max_bins=0

      num=sc_target_num+sc_wall_num
      assert(num > 0)       // This would seem pretty certain?
      var=sc_diag_unknown
      tab_index=0
      var_min=zero
      var_max=zero
      mult=zero
      spacing=sc_diag_spacing_unknown
      i_tot=0
      if (sc_target_num > 0) then
         do i=1,sc_target_num
            i_tot++
            grp_sectors[i_tot]=target_sector[i]
         end do
      end if
      if (sc_wall_num > 0) then
         do i=1,sc_wall_num
            i_tot++
            grp_sectors[i_tot]=wall_sector[i]
         end do
      end if
      assert(num == i_tot)
      call diag_grp_init('Wall and Target Counts',num,var,tab_index,var_min,
     $     var_max,mult,spacing,grp_sectors)

      if (sc_exit_num > 0) then
         do i=1,sc_exit_num
            grp_sectors[i]=exit_sector[i]
         end do
         call diag_grp_init('Exit Counts',sc_exit_num,var,tab_index,var_min,
     $        var_max,mult,spacing,grp_sectors)
      end if

      i_tot=0
      if (sc_target_num > 0) then
         do i=1,sc_target_num
            i_tot++
            grp_sectors[i_tot]=target_sector[i]
         end do
      end if
      if (sc_wall_num > 0) then
         do i=1,sc_wall_num
            i_tot++
            grp_sectors[i_tot]=wall_sector[i]
         end do
      end if
      assert(num == i_tot)
      var=sc_diag_energy
      tab_index=4
      var_min=const(1.,-1)      // $0.1 \rightarrow 1000$ eV in steps of 10.
      var_max=const(1.,3)
      mult=electron_charge
      spacing=sc_diag_spacing_log
      call diag_grp_init('Wall and Target Energy Spectrum',num,var,tab_index,
     $     var_min,var_max,mult,spacing,grp_sectors)
      
      var=sc_diag_angle
      tab_index=4
      var_min=const(1.,1)      // 10 to 90 degrees in 20 degree increments
      var_max=const(9,1)
      mult=PI/const(1.8,2)
      spacing=sc_diag_spacing_linear
      call diag_grp_init('Wall and Target Angle Spectrum',num,var,tab_index,
     $     var_min,var_max,mult,spacing,grp_sectors)

      var_free(grp_sectors)

      return
      end

@ Initialize a new diagnostic group.

@<Functions...@>=
      subroutine diag_grp_init(name,num,var,tab_index,var_min,var_max,mult,
     $   spacing,grp_sectors)
      implicit_none_f77
      sc_common                                    // Common
      pr_common
      implicit_none_f90

      integer num,var,tab_index,spacing            // Input
      integer grp_sectors[*]
      real var_min,var_max,mult
      character*(*) name
      integer i                                    // Local

      @<Memory allocation interface@>

      sc_diagnostic_grps++
      assert(sc_diagnostic(sc_diagnostic_grps) <= sc_type_max)
      var_realloca(diagnostic_grp_name)
      var_realloca(diagnostic_num_sectors)
      var_realloca(diagnostic_var)
      var_realloca(diagnostic_tab_index)
      var_realloca(diagnostic_min)
      var_realloca(diagnostic_delta)
      var_realloca(diagnostic_spacing)
      var_realloca(diagnostic_grp_base)
      
      diagnostic_grp_name[sc_diagnostic_grps]=name
      diagnostic_num_sectors[sc_diagnostic_grps]=num
      diagnostic_var[sc_diagnostic_grps]=var
      diagnostic_tab_index[sc_diagnostic_grps]=tab_index
      sc_diag_max_bins=max(sc_diag_max_bins,tab_index)
      if (tab_index > 0) then
         assert(var != sc_diag_unknown)
         if (spacing == sc_diag_spacing_linear) then
            diagnostic_min[sc_diagnostic_grps]=var_min*mult
/*
   Note that |tab_index| is the {\em number of bins} here, not the number
      of points as this nomenclature is used elsewhere in the code.
*/
            diagnostic_delta[sc_diagnostic_grps]=(var_max-var_min)*mult/tab_index
         else if (spacing == sc_diag_spacing_log) then
            diagnostic_min[sc_diagnostic_grps]=log(var_min*mult)
            diagnostic_delta[sc_diagnostic_grps]=log(var_max/var_min)/tab_index
         else
            assert('Unsupported spacing' == ' ')
         end if
         diagnostic_spacing[sc_diagnostic_grps]=spacing
      else
         assert(var == sc_diag_unknown)
         diagnostic_min[sc_diagnostic_grps]=zero
         diagnostic_delta[sc_diagnostic_grps]=zero
         diagnostic_spacing[sc_diagnostic_grps]=sc_diag_spacing_unknown
      end if

      diagnostic_grp_base[sc_diagnostic_grps]=sc_diag_size
/*
   NOTE: this assumes that the groups are established consecutively!!
   (Probably OK since this routine sets |sc_diagnostic_grps|.) Note
   also that this will start off with a size of -1. This is what other
   |ragged_alloc| routines do.
*/
      var_realloc(diagnostic_sector_tab,sc_diag_size-1,sc_diag_size-1+num)
      sc_diag_size+=num

      do i=1,num
         diagnostic_sector(i,sc_diagnostic_grps)=grp_sectors[i]
         sector_type_pointer[grp_sectors[i]][sc_diagnostic(sc_diagnostic_grps)]=i
      end do

      return
      end

@* Pack up detector arrays.

@<Functions...@>=
      subroutine end_detectors
      implicit_none_f77
      de_common
      zn_common
      implicit_none_f90
      integer i

      @<Memory allocation interface@>

      vc_set(de_view_points[0][de_view_start],real_unused,real_unused,real_unused)
      vc_set(de_view_points[0][de_view_end],real_unused,real_unused,real_unused)
      de_view_algorithm[0]=int_unused
      de_view_halfwidth[0]=real_unused
@#if 0   // Do not need this now?
      do i=1,zn_num
         de_zone_frags[i][0]=real_unused
      end do
@#endif
      var_reallocb(detector_name)
      var_reallocb(detector_num_views)
      var_reallocb(detector_var)
      var_reallocb(detector_tab_index)
      var_reallocb(detector_min)
      var_reallocb(detector_delta)
      var_reallocb(detector_spacing)
      var_reallocb(de_view_base)
      var_reallocb(de_zone_frags)
      var_reallocb(de_zone_frags_zones)

      if (detector_total_views == 0) then
         assert(de_view_size == 1)
         de_view_tab[0]=int_unused
      end if

      return
      end
