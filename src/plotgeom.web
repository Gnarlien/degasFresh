% $Id: 7c4804bd922cb6dca7dcb86cfc20f56be836e25f $
\Title{plot geometry}


@* Introduction.

\ID{$Id: 7c4804bd922cb6dca7dcb86cfc20f56be836e25f $}

Introduction\ldots

@m FILE 'plotgeom.web'

@m MIDSLICE 1

@I macros.hweb

@I geomint.hweb
@I location.hweb
@I background.hweb
@I zone.hweb
@I sysdep.hweb
@I problem.hweb
@I reaction.hweb
@I species.hweb
@I materials.hweb
@I string.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@ Set up parameters for the pixel mesh.  The lengths of a 3-D pixel mesh,
corresponding to the $x$, $y$, and $z$ directions,
|alen|, |blen|, and |clen| (in meters) are input.  The input parameter
|pixsize| controls the total number of pixels in the $x$ and $y$
directions.  The numer of pixels in these two directions, |na| and |nb|,
are computed so that their product is no larger than |pixsize|; the size 
of these square pixels, |dx|, is also returned.  The size of the 
pixels in the $z$ direction, |dz|, is taken to be $|z_scale| |dx|$.
The corresponding number of mesh points needed to fill out the length
|clen| is returned, |nc|.

@<Functions...@>=
      subroutine get_pixel_mesh(alen,blen,clen,pixsize,z_scale,
     $                          na,nb,nc,dx,dz)

      implicit_none_f77
      implicit_none_f90

      real alen,blen,clen,z_scale             // Input
      integer pixsize
      real dx,dz                              // Output
      integer na,nb,nc

      assert(alen > 0 && blen > 0)
      dx = sqrt(alen*blen/areal(pixsize))  // length of one pixel
      na = int(alen/dx)                    // na is the number of pixels in a
      nb = int(blen/dx)                    // nb .... in b
      assert(na*nb <= pixsize)
      if (clen > zero) then
         dz=z_scale*dx
         nc=int(clen/dz)
         assert(nc > 1)
      else
         nc=1
         dz=zero
      end if

      return
      end

@ Find pixel zones on a set of 3-D slices through the geometry.
The slices starts at $\vect x_0$ with the $x$ axis parallel to $\vect a$, 
$y$ axis parallel to $\vect b$, and $z$ axis parallel to $\vect c$.  
The number of pixels in these directions are |na|, |nb|, and |nc|,
respectively.  The mesh spacing in $x$ and $y$ is the same, |dx| (set
by |get_pixel_mesh|).  The mesh spacing in the $z$ direction is |dz|.
|x0| must be within the universal cell.  The axis labels are returned
in |xa| (ranging from $|x0|[1]$ to $|x0|[1] + |alen|$), |xb|, and
|xc| (similarly defined).  The zone number corresponding to each pixel
location in the problem space is returned in |pixel_zones|.

@<Functions...@>=
      subroutine set_pixel_zones(x0,a,b,c,na,nb,nc,dx,dz,
     $                           xa,xb,xc,pixel_zones)

      implicit_none_f77
      gi_common          
      implicit_none_f90

      real dx,dz                                           // Input
      real x0[3],a[3],b[3],c[3]                         
      integer na,nb,nc
      real xa[0:na-1],xb[0:nb-1],xc[0:nc-1]                // Output
      integer pixel_zones[0:na*nb*nc-1]                  
      integer i,j,k,ind,direction,istart,istop,icurrent,   // Local
     $        inext,uck,outside_u_c
      real vx[3],vy[3],vz[3],x_tmp[3],tmax,t,xpos,tuc
      logical done
      zn_decl(zone)
      lc_decl(xx)

      @<Memory allocation interface@>
      vc_decls
      lc_decls
      external track,cell_enter
      logical track
      real cell_enter

      if (nc > 1) then
         vc_unit(c,vz)
      else
         vc_set(vz,zero,zero,zero)
      end if

      do j=0,na*nb*nc-1
         pixel_zones[j]=0
      end do

      vc_unit(a,vx)            // vx is unit vector corresponding to a
      vc_unit(b,vy)            // vy is unit vector corresponding to b
      
      do j=0,na-1                // Axis for writing to HDF file
         vc_xvt(x0,vx,dx*(float(j)+half),x_tmp)
         xa[j]=vc_product(x_tmp,vx)
      end do

      do j=0,nb-1
@#if HDF4
/*
   This coordinate is traced in the opposite direction to facilitate display
   in a PC based application.
*/
         vc_xvt(x0,vy,dx*(nb-1-float(j)+half),x_tmp)    // See |ind| below
@#else
         vc_xvt(x0,vy,dx*(float(j)+half),x_tmp)    // See |ind| below
@#endif
         xb[j]=vc_product(x_tmp,vy)
      end do

      do j=0,nc-1
         vc_xvt(x0,vz,dz*(float(j)+half),x_tmp)
         xc[j]=vc_product(x_tmp,vz)
      end do

      do k=0,nc-1

         vc_xvt(x0,vy,half*dx,lc_x(xx))       // step along b half a pixel

         if (nc > 1) then
            vc_xvt(lc_x(xx),vz,(float(k)+half)*dz,lc_x(xx))
         end if

         lc_set(xx)
         if (lc_cell(xx) <= 0) then
            outside_u_c=TRUE
         else
            outside_u_c=FALSE
         end if
/*
   Reset |vx| in case the direction was reversed at the end of the 
   previous slice.
*/
         vc_unit(a,vx)
         direction=1
         xpos=zero
         istop=-1  // 1st mesh point is 0
      
         do j=0,nb-1
            tmax=areal(na)*dx              // Go |alen| horizontally

loop:       continue                       // Loop over |na| mesh points

            if (lc_cell(xx) <= 0) then
               assert(outside_u_c == TRUE)
/* 
   The horizontal track is outside the universal cell.  Since it may
   be leaving it in between mesh points, the distance remaining to
   the next point is not known.  Calculate it using the value
   of |istop|.
*/
               if (direction > 0) then
                  icurrent=istop+1
                  inext=min(icurrent+1,na)
               else
                  icurrent=istop
                  inext=max(icurrent-1,0)
               end if
               t=direction*(areal(inext)*dx-xpos)
               vc_xvt(lc_x(xx),vx,t,lc_x(xx))
               lc_set(xx)
/*
   Check to see if the new mesh point is inside the universal cell.
   If not, use |zn_undefined| to label the point.  If it is, use
   |cell_enter| to see how far we've stepped inside it.  If more than
   half of |dx|, use the new zone value to label the new point.
*/
               zone=zn_undefined
               if (lc_cell(xx) > 0) then
                  tuc=cell_enter(0,lc_x(xx),vx,uck)
                  if ((tuc < zero) && (abs(tuc) < dx)) then
                     assert(outside_u_c == TRUE)
                     outside_u_c=FALSE
                  else
                     assert(' Improper entry into universal cell' == ' ')
                  end if
                  if (abs(tuc)/dx > half) zone=lc_zone(xx)
               end if
/*
   Do a fuzzy test here to allow for roundoff.  Don't have to do
   likewise with |track| since it sets |t| = |tmax| exactly.
*/
               if (abs(tmax-t) <= geom_epsilon) then
                  done=.true.
                  t=tmax     
               else
                  done=.false.
               endif
            else
/*
   The horizontal track is inside the universal cell.  Track to the
   next zone boundary.
*/
               done=track(TRACK_BASIC,tmax,lc_x(xx),vx,lc_cell(xx),t,
     $              lc_x(xx),lc_cell(xx),lc_face(xx),lc_cell_next(xx),
     $              lc_sector(xx),lc_sector_next(xx))
               assert(lc_cell_next(xx) >= 0)
               if (lc_cell_next(xx) == 0) then
/*
   |track| claims to have left the universal cell. Check the other variables
   to verify that they are consistent with that.  Regarding the test
   using |surfaces|, the opposite side of the universal cell face is not
   used and, thus, should have no neighbors (a count of 0).
*/
                  assert(outside_u_c == FALSE)
                  assert(lc_cell(xx) > 0)
                  assert(surfaces(s_sign(-lc_face(xx)),s_count,abs(lc_face(xx))) == 0)
                  assert(surfaces(s_sign(lc_face(xx)),s_count,abs(lc_face(xx))) > 0)
                  outside_u_c=TRUE
               end if
               if (lc_face(xx) != 0) then
                  lc_zone_next(xx)=cells[c_zone,lc_cell_next(xx)]
               end if
               zone=lc_zone(xx)
               lc_thru_face(xx)
            end if
/*
   Update mesh point indices and distances.
*/
            istart=int(xpos/dx+half)
/*
   This moves |xpos| same distance as done by |track| and sets |istop|
   accordingly.  So, |xpos| just measures distance relative to start of 
   the horizontal track.
*/
            xpos=xpos+direction*t    
            istop=int(xpos/dx+half)
            if (direction > 0) then
               istop = istop-1
            else
               istart = istart-1
            end if
/*
   Record zone data from the above steps.
*/
            if (direction*(istop-istart) >= 0) then
               do i=istart,istop,direction
@#if HDF4
                  ind=(k*nb+(nb-1-j))*na+i
@#else
                  ind=(k*nb+j)*na+i
@#endif
                  pixel_zones[ind]=zone
               end do
            end if
            tmax=tmax-t
            if (!done) then         // Still more to go
               goto loop
            end if
            assert(tmax == zero)
/*
   Done with horizontal track.  Go vertically |dx|.  This is analogous 
   to the horizontal tracking except that we keep no record of boundaries 
   crossed in the process.
*/
            tmax=dx             
loop1:      continue
            if (lc_cell(xx) <= 0) then
               assert(outside_u_c == TRUE)
               vc_xvt(lc_x(xx),vy,tmax,lc_x(xx))
               tmax=zero
               lc_set(xx)
/*
   But, do take note of crossing back into the universal cell.  Use
   the same consistency test here as in the horizontal case.
*/
               if (lc_cell(xx) > 0) then
                  tuc=cell_enter(0,lc_x(xx),vy,uck)
                  if ((tuc < zero) && (abs(tuc) < dx)) then
                     assert(outside_u_c == TRUE)
                     outside_u_c=FALSE
                  else
                     assert(' Improper entry into universal cell' == ' ')
                  end if
               end if
            else
               done=track(TRACK_BASIC,tmax,lc_x(xx),vy,lc_cell(xx),t,
     $              lc_x(xx),lc_cell(xx),lc_face(xx),lc_cell_next(xx),
     $              lc_sector(xx),lc_sector_next(xx))
               assert(lc_cell_next(xx) >= 0)
               if (lc_cell_next(xx) == 0) then
/*
   |track| claims to have left the universal cell. This is the same
   check as is used above for the horizontal tracking.
*/
                  assert(outside_u_c == FALSE)
                  assert(lc_cell(xx) > 0)
                  assert(surfaces(s_sign(-lc_face(xx)),s_count,abs(lc_face(xx))) == 0)
                  assert(surfaces(s_sign(lc_face(xx)),s_count,abs(lc_face(xx))) > 0)
                  outside_u_c=TRUE
               end if
               if (lc_face(xx) != 0) then
                  lc_zone_next(xx)=cells[c_zone,lc_cell_next(xx)]
               end if
               tmax=tmax-t
               lc_thru_face(xx)
               if (!done) then
                  goto loop1
               end if
            end if
            assert(tmax == zero)
/*
   Done with vertical step.  Reverse the horizontal direction and
   reset mesh point index and distance.
*/
            direction=-direction  
            if (direction > 0) then
               assert(abs(xpos) <= geom_epsilon)
               xpos = zero
               istop=-1
            else
               assert(abs(xpos-areal(na)*dx) <= geom_epsilon)
               xpos = areal(na)*dx
               istop=na
            end if
            vc_scale(-one,vx,vx)
         end do                   // Loop in vertical  direction
      end do                      // Loop in 3rd dimension

      return
      end

@ Write data to HDF file.  This routine writes to the HDF file |hdffile|
the zone-based data contained in the real array |zone_data|.  |clabel| is
a text label describing those data; its units are |cunits|, and the
format that should be used for displaying them is |cformt|.
The pixel mesh is described here by the dimensions |na|, |nb|, |nc| and 
axis labels |xa|, |xb|, |xc|.  The zone number at each of these pixels
is |pixel_zones|.  Since all of these large arrays are dynamically
allocated, we also pass down the argument list the real array used
to hold the pixel-based version of the data, |pixel_data|.

@<Functions...@>=
      subroutine write_hdf(hdffile,zone_data,clabel,cunits,cformt,
     $                     na,nb,nc,xa,xb,xc,pixel_zones,pixel_data)
      implicit_none_f77
      zn_common
      implicit_none_f90

      character*(*) hdffile,clabel,cunits,cformt        // Input
      integer na,nb,nc
      integer pixel_zones[0:na*nb*nc-1]
      real zone_data[zn_num],xa[0:na-1],xb[0:nb-1],xc[0:nc-1],
     $     pixel_data[0:na*nb*nc-1]

@#if HDF4
      integer i,rank,ret                                // Local         
      integer*4 dims[3]                              
      external dspdata,dssdast,dssdims,dssdisc,dssnt    // External
      integer dspdata,dssdast,dssdims,dssdisc,dssnt

      do i=0,na*nb*nc-1
         if (pixel_zones[i] != zn_undefined) then
            pixel_data[i]=zone_data[pixel_zones[i]]
         else
            pixel_data[i]=zero
         end if
      end do
/*
   This sets the number type for the HDF routines to 
   DFNT_FLOAT64 (= 6).  We assume here that a ``real'' number is 64 bits;
   the precision-setting routines in |sysdep.hweb| are targeted at
   that objective.  However, we should be alert for possible
   conflicts.  The default, DFNT_FLOAT32 (= 5) should be equivalent
   to single precision.
*/
      ret=dssnt(6)
      dims[1]=na
      dims[2]=nb
      if (nc == 1) then
         rank=2
      else
         assert(nc > 1) 
         rank=3
         dims[3]=nc
      end if
      ret=dssdims(rank,dims)
      ret=dssdisc(1,dims[1],xa[0])
      ret=dssdisc(2,dims[2],xb[0])
      if (rank == 3) then
         ret=dssdisc(3,dims[3],xc[0])
      end if
      ret=dssdast(clabel,cunits,cformt,'cartesian')
      ret=dspdata(hdffile,rank,dims,pixel_data[0])

@#elif SILO
      real time_slice
      integer i,rank,ret,ret2,var_opts,time_ind,dbfile_local
      integer dims[3]
@#if MIDSLICE
      integer j,ind    // For hack
      real avg
@#endif
      st_decls
      include 'silo.inc'
/*
   These are set in the calling program and passed via common
   so we don't have to alter the interface of this routine.
*/
      integer dbfile,dbfile_td
      logical write_mesh
      character*FILELEN mesh_name,var_name
      common /silo_common/ dbfile,dbfile_td,write_mesh,mesh_name

      do i=0,na*nb*nc-1
         if (pixel_zones[i] != zn_undefined) then
            pixel_data[i]=zone_data[pixel_zones[i]]
         else
            pixel_data[i]=zero
         end if
      end do
      dims[1]=na
      dims[2]=nb
      if (nc == 1) then
         rank=2
      else
         assert(nc > 1) 
         rank=3
         dims[3]=nc
      end if
      ret=dbmkoptlist(1,var_opts)
      assert(ret != -1)
      if (len(cunits) > 0) then
         ret=dbaddcopt(var_opts,DBOPT_UNITS,cunits,len(cunits))
         assert(ret != -1)
      end if
      i=index(hdffile,'.hdf')
      time_ind=index(hdffile,'$')
      if (time_ind > 0) then
         dbfile_local=dbfile_td
         time_slice=areal(read_integer(hdffile(time_ind+1:i-1)))
         ret=dbadddopt(var_opts,DBOPT_DTIME,time_slice)
         assert(ret != -1)
         var_name=hdffile(:time_ind-1)
      else
         dbfile_local=dbfile
         var_name=hdffile(:i-1)
      end if
      if (write_mesh) then
         if (nc == 1) then
            ret=dbputqm(dbfile_local, trim(mesh_name),string_length(mesh_name),
     $           'x',1,'y',1,'z',1,xa[0],xb[0],DB_F77NULL,dims,rank,
     $           silo_precision,DB_COLLINEAR,DB_F77NULL,ret2)
         else
            ret=dbputqm(dbfile_local, trim(mesh_name),string_length(mesh_name),
     $           'x',1,'y',1,'z',1,xa[0],xb[0],xc[0],dims,rank,silo_precision,
     $           DB_COLLINEAR,DB_F77NULL,ret2)
         end if
         assert((ret != -1) && (ret2 != -1))
         write_mesh=.false.
      end if
/*
   Now output the data
*/
      ret=dbputqv1(dbfile_local,trim(var_name),string_length(var_name),
     $     trim(mesh_name),string_length(mesh_name),
     $     pixel_data[0],dims,rank,DB_F77NULL,0,silo_precision,
     $     DB_NODECENT,var_opts,ret2)
      assert((ret != -1) && (ret2 != -1))
@#if MIDSLICE
/*
   Hack to write out 1-D data.
*/
      if ((trim(var_name) == 'spDden') || (trim(var_name) == 'spD2den')
     $     || ((var_name(1:6)) == 'halpha' || (var_name(4:6) == 'flx')
     $     || (var_name(5:7) == 'flx') || (trim(var_name) == 'bk_t2')
     $     || (trim(var_name) == 'bk_n1')
     $     || (trim(var_name) == 'bk_t1')
     $     || (trim(var_name) == 'DpionizeV'))) then
         open(unit=diskout,file=trim(var_name)\/'1D.txt',status='unknown')
         do i=0,na-1
            avg=zero
            do j=0,nb-1
               ind=j*na+i
               avg+=pixel_data[ind]/areal(nb)
            end do
            write(diskout,'(2x,i3,2x,f8.5,2x,1pe13.5)') i,xa[i],avg
         end do
         close(unit=diskout)
      end if
@#endif
@#endif

      return
      end

@ Automated test of the geometry.  The ``pixel map'' routines are the
same ones used for postprocessing.  However, a lower resolution
grid is employed and almost the entire universal cell is covered.
This should catch geometry errors that get by |check_geometry|.

@<Functions...@>=
      subroutine pixel_map_test

      define_dimen(a_ind,0,na-1)
      define_dimen(b_ind,0,nb-1)
      define_dimen(c_ind,0,nc-1)
      define_dimen(pixel_ind,0,na*nb*nc-1)

      define_varp(xa,FLOAT,a_ind)
      define_varp(xb,FLOAT,b_ind)
      define_varp(xc,FLOAT,c_ind)
      define_varp(pixel_zones,INT,pixel_ind)
      define_varp(pixel_data,FLOAT,pixel_ind)
      define_varp(zone_data,FLOAT,zone_ind)

      implicit_none_f77
      gi_common
      zn_common
      implicit_none_f90
      real alen,blen,clen,z_scale,r_min,r_max,phi_min,phi_max,
     $     x_min,x_max,y_min,y_max,dx,dz
      integer pixsize,na,nb,nc,i,nq,q_min,iq,q_next,q_max
      vc_decl(x)
      vc_decl(a)
      vc_decl(b)
      vc_decl(c)

      declare_varp(xa)
      declare_varp(xb)
      declare_varp(xc)
      declare_varp(pixel_zones)
      declare_varp(pixel_data)
      declare_varp(zone_data)
      
      @<Memory allocation interface@>
      vc_decls
      st_decls
@#if SILO
      include 'silo.inc'
      integer dbfile,dbfile_td,ret
      logical write_mesh
      character*FILELEN mesh_name,silo_file
      common /silo_common/ dbfile,dbfile_td,write_mesh,mesh_name
      silo_file='geomtestc.silo'
      ret=dbcreate(trim(silo_file),string_length(silo_file),
     $     DB_CLOBBER,DB_LOCAL,DB_F77NULL,0,silo_format,dbfile)
      assert((ret != -1) && (dbfile != -1))
@#endif
      if (geometry_symmetry == geometry_symmetry_oned) then
         x[1]=universal_cell_min[1]
         x[2]=universal_cell_min[2]
         x[3]=universal_cell_min[3]
         vc_set(a,one,zero,zero)
         alen=universal_cell_max[1]-universal_cell_min[1]
         vc_set(b,zero,zero,one)
         blen=universal_cell_max[3]-universal_cell_min[3]
         vc_set(c,zero,zero,zero)
         clen=zero
         pixsize=1000
         z_scale=zero
      else if ((geometry_symmetry == geometry_symmetry_plane)
     $     || (geometry_symmetry == geometry_symmetry_cylindrical)) then
         x[1]=universal_cell_min[1]
         x[2]=universal_cell_min[2]
         x[3]=universal_cell_min[3]
         vc_set(a,one,zero,zero)
         alen=universal_cell_max[1]-universal_cell_min[1]
         vc_set(b,zero,zero,one)
         blen=universal_cell_max[3]-universal_cell_min[3]
         vc_set(c,zero,zero,zero)
         clen=zero
         pixsize=40000
         z_scale=zero
      else if (geometry_symmetry == geometry_symmetry_plane_hw) then
         x[1]=universal_cell_min[1]
         vc_set(a,one,zero,zero)
         alen=universal_cell_max[1]-universal_cell_min[1]
         x[2]=universal_cell_min[2]
         vc_set(b,zero,one,zero)
         blen=universal_cell_max[2]-universal_cell_min[2]
         x[3]=universal_cell_min[3]
         vc_set(c,zero,zero,one)
         clen=universal_cell_max[3]-universal_cell_min[3]
         pixsize=40000
         z_scale=one
      else if (geometry_symmetry == geometry_symmetry_cyl_hw) then
         x[1]=-universal_cell_max[1]
         vc_set(a,one,zero,zero)
         alen=two*universal_cell_max[1]
         x[2]=x[1]
         vc_set(b,zero,one,zero)
         blen=alen
         x[3]=universal_cell_min[3]
         vc_set(c,zero,zero,one)
         clen=universal_cell_max[3]-universal_cell_min[3]
         pixsize=40000
         z_scale=one
      else if (geometry_symmetry == geometry_symmetry_cyl_section) then
         r_min=universal_cell_min[1]
         r_max=universal_cell_max[1]
         phi_min=universal_cell_min[2]
         phi_max=universal_cell_max[2]
         x_min=min(r_min*cos(phi_min),r_min*cos(phi_max),
     $             r_max*cos(phi_min),r_max*cos(phi_max))
         x_max=max(r_min*cos(phi_min),r_min*cos(phi_max),
     $             r_max*cos(phi_min),r_max*cos(phi_max))
         y_min=min(r_min*sin(phi_min),r_min*sin(phi_max),
     $             r_max*sin(phi_min),r_max*sin(phi_max))
         y_max=max(r_min*sin(phi_min),r_min*sin(phi_max),
     $             r_max*sin(phi_min),r_max*sin(phi_max))
/* 
   The above only works when the problem is confined inside a
   single quadrant.  Otherwise, the $x$, $y$ extrema arise at
   intermediate toroidal angles.  First, determine the total
   number of quadrants spanned. 

   Determine quadrant associated with |phi_min|.
*/
         if ((cos(phi_min) > zero) && (sin(phi_min) >= zero)) then
            q_min=1
         else if ((cos(phi_min) <= zero) && (sin(phi_min) > zero)) then
            q_min=2
         else if ((cos(phi_min) < zero) && (sin(phi_min) <= zero)) then
            q_min=3
         else if ((cos(phi_min) >= zero) && (sin(phi_min) < zero)) then
            q_min=4
         else
            assert(' Unable to located quadrant for phi_min' == ' ')
         end if
/*
   Determine quadrant associated with |phi_max|.
*/
         if ((cos(phi_max) > zero) && (sin(phi_max) >= zero)) then
            q_max=1
         else if ((cos(phi_max) <= zero) && (sin(phi_max) > zero)) then
            q_max=2
         else if ((cos(phi_max) < zero) && (sin(phi_max) <= zero)) then
            q_max=3
         else if ((cos(phi_max) >= zero) && (sin(phi_max) < zero)) then
            q_max=4
         else
            assert(' Unable to located quadrant for phi_max' == ' ')
         end if
         nq=q_max-q_min+1
         if (nq <= 0) nq=nq+4
         assert(nq >= 1)
         if (nq > 1) then

/*
   Loop over quadrants covered, noting extrema associated with each.
*/
            do iq=1,nq-1
               q_next=mod(q_min-1+iq,4)+1
               if (q_next == 1) then
                  x_max=r_max
               else if (q_next == 2) then
                  y_max=r_max
               else if (q_next == 3) then
                  x_min=-r_max
               else if (q_next == 4) then
                  y_min=-r_max
               else
                  assert(' Unexpected value of q_next' == ' ')
               end if
            end do
         end if
         x[1]=x_min
         vc_set(a,one,zero,zero)
         alen=x_max-x_min
         x[2]=y_min
         vc_set(b,zero,one,zero)
         blen=y_max-y_min
         x[3]=universal_cell_min[3]
         vc_set(c,zero,zero,one)
         clen=universal_cell_max[3]-universal_cell_min[3]
         pixsize=40000
         z_scale=one
      else
         assert(' Unexpected value of geometry_symmetry' == ' ')
      end if
/*
   Nudge the $x$ boundaries in by $\epsilon$ at both ends.  The
   subroutine does track the full distance in $x$.  Can get some
   roundoff error problems by intending for that track to land
   exactly at a universal cell surface.
*/
      x[1]+=geom_epsilon
      alen-=two*geom_epsilon

      call get_pixel_mesh(alen,blen,clen,pixsize,z_scale,
     $     na,nb,nc,dx,dz)

      var_alloc(xa)
      var_alloc(xb)
      var_alloc(xc)
      var_alloc(pixel_zones)
      var_alloc(pixel_data)
      var_alloc(zone_data)

      call set_pixel_zones(x,a,b,c,na,nb,nc,dx,dz,xa,xb,xc,pixel_zones)
@#if SILO
      write_mesh=.true.
      mesh_name='geomtestc2d'
@#endif
/*
   This is just Charles' original ``zone function''.  I believe the
   purpose was to use (most of) an 8-bit palette to color the
   zones with a minimum chance of color matching between adjacent
   zones (i.e., suspect that $97 / 252$ is related to the golden
   mean).
*/
      do i=1,zn_num
         zone_data[i]=areal(3+mod(97*i,255-3))
      end do
      call write_hdf('geomtestc.hdf',zone_data,'zone function',' ','E11.3',
     $     na,nb,nc,xa,xb,xc,pixel_zones,pixel_data)

      var_free(xa)
      var_free(xb)
      var_free(xc)
      var_free(pixel_zones)
      var_free(pixel_data)
      var_free(zone_data)
@#if SILO
      ret=dbclose(dbfile)
      assert(ret != -1)
@#endif

      return
      end

@* References.

\bibliographystyle{report}
\bibliography{../../degas}

@* INDEX.

