% $Id: 688be6bc47f23e20460f73ccbfdea5cf452fc1a6 $
\Title{Simple memory allocation routines}

@* A template FWEB file.

\ID{$Id: 688be6bc47f23e20460f73ccbfdea5cf452fc1a6 $}

These are some simple routines to allocate blocks of memory from a 1d
integer array.  These are needed because it is inconvenient to store
pointers into an array in Fortran 77 or Fortran 90.  Using these
routines we can indices store indices into the 1d array.  The layout is
as follows: each block of memory is surrounded by two additional memory
locations.  These locations contain the same value.  The sign says
whether the memory block is allocated (negative means yes).  The
magnitude is the size of the memory block PLUS 2.

@m FILE 'allocate.web'

@I macros.hweb
@I allocate.hweb

@ The main program.

@a
@#if 0
      program allocate
      implicit_none_f77
      al_common
      implicit_none_f90
      logical check_mem
      integer alloc_mem,realloc_mem
      external check_mem,init_mem,alloc_mem,realloc_mem,free_mem,end_mem
      integer p,p1,p2
      call init_mem
      assert(check_mem())
      p=alloc_mem(20)
      assert(check_mem())
      p1=alloc_mem(30)
      assert(check_mem())
      p=realloc_mem(p,20,40)
      assert(check_mem())
      p2=alloc_mem(19)
      assert(check_mem())
      call free_mem(p2,19)
      assert(check_mem())
      call free_mem(p1,30)
      assert(check_mem())
      call free_mem(p,40)
      assert(check_mem())
      call end_mem
      assert(check_mem())
      stop
      end
@#endif
      @<Functions and subroutines@>

@ Initialize the package

@<Functions...@>=
      subroutine init_mem
      implicit_none_f77
      al_common
      implicit_none_f90
      
      memsize=0
      return
      end

@ Check the integrity of the data structures.

@<Functions...@>=
      function check_mem()
      implicit_none_f77
      al_common
      implicit_none_f90
      logical check_mem
      integer ptr,size
      logical lastfree,free

      if (memsize < 0) then
         check_mem=.false.
         return
      end if
      
      check_mem=.false.
      lastfree=.false.
      ptr=0
loop: continue
      if (ptr==memsize) goto break
      size=memory[ptr]
      if (abs(size) < 0) then
         write(stderr,*) 'Zero length block'
         return
      end if
      if (ptr+abs(size)>memsize) then
         write(stderr,*) 'Block too big'
         return
      end if
      free=size>0
      if (lastfree && free) then
         write(stderr,*) 'Two consecutive free blocks'
         return
      end if
      if (memory[ptr+abs(size)-1] != size) then
         write(stderr,*) 'Size mismatch'
         return
      end if
c      write(stderr,*) 'Block start, stop, size, free: ',ptr,ptr+abs(size)-1,abs(size)-2,free
      ptr=ptr+abs(size)
      lastfree=free
      goto loop
break: continue
      check_mem=.true.
      return
      end

@ Enlarge memory array by at least |n|.

@<Functions...@>=
      subroutine enlarge_mem(n)
      implicit_none_f77
      al_common
      implicit_none_f90
      integer n
      integer new_memsize
      @<Memory allocation interface@>

      assert(n>=0)
      if (n==0) return
      new_memsize=max(memsize+n+2,memsize+100,2*memsize)
      var_realloc(memory,memsize-1,new_memsize-1)
      memory[memsize]=new_memsize-memsize
      memory[new_memsize-1]=memory[memsize]
      memsize=new_memsize
      call merge_mem(memsize-memory[memsize-1])
      return
      end

@ Merge a newly created free block into free neighbors.
@<Functions...@>=
      subroutine merge_mem(ptr)
      implicit_none_f77
      al_common
      implicit_none_f90
      integer ptr
      integer nptr
      assert(memory[ptr]>0)
      nptr=ptr
      if (nptr>0) then
         if (memory[nptr-1] > 0) then
            memory[nptr+memory[nptr]-1] += memory[nptr-1]
            memory[nptr-memory[nptr-1]] = memory[nptr+memory[nptr]-1]
            nptr -= memory[nptr-1]
         end if
      end if
      if (nptr+memory[nptr] < memsize) then
         if (memory[nptr+memory[nptr]] > 0) then
            memory[nptr] += memory[nptr+memory[nptr]]
            memory[nptr+memory[nptr]-1] = memory[nptr]
         end if
      end if
      return
      end
      
@ Allocate block of memory.

@<Functions...@>=
      function alloc_mem(n)
      implicit_none_f77
      al_common
      implicit_none_f90
      integer n,alloc_mem
      integer size,ptr,i
      external enlarge_mem

      assert(n>=0)
      if (n==0) then
         alloc_mem=0
         return
      end if

      ptr=0
loop: continue
      if (ptr==memsize) goto break
      size=memory[ptr]
      if (size-2 >= n) goto break1
      ptr=ptr+abs(size)
      goto loop
break: continue
      call enlarge_mem(n)
      ptr=memsize-memory[memsize-1]
      size=memory[ptr]
break1: continue
      if (size-2 > n) then
         memory[ptr+n+2]=size-(n+2)
         memory[ptr+size-1]=size-(n+2)
      end if
      memory[ptr+(n+2)-1]=-(n+2)
      memory[ptr]=-(n+2)
      alloc_mem=ptr+1
@#if DEBUG
      do i=0,n-1
         memory[alloc_mem+i]=int_uninit
      end do
@#endif
      return
      end

@ Reallocate space.  No attempt is made to reallocate in place.

@<Functions...@>=
      function realloc_mem(p,on,n)
      implicit_none_f77
      al_common
      implicit_none_f90
      integer p,on,n,realloc_mem
      integer np,i,alloc_mem
      external alloc_mem,free_mem

      assert(on >= 0 && n > 0)
      if (on==n) then
         realloc_mem=p
         return
      end if
      np=alloc_mem(n)
      do i=0,min(on,n)-1
         memory[np+i]=memory[p+i]
      end do
      call free_mem(p,on)
      realloc_mem=np
      return
      end

@ Free space.

@<Functions...@>=
      subroutine free_mem(p,n)
      implicit_none_f77
      al_common
      implicit_none_f90
      integer p,n
      external merge_mem
      
      assert(n>=0)
      if (n==0) return
      
      assert(-memory[p-1]==n+2 && -memory[p+n]==n+2)
      memory[p-1]=n+2
      memory[p+n]=n+2
      call merge_mem(p-1)
      return
      end
      
@ Terminate package.

@<Functions...@>=
      subroutine end_mem
      implicit_none_f77
      al_common
      implicit_none_f90
      @<Memory allocation interface@>

      if (memsize==0) return
      assert(memsize>0)
      assert(memory[0]==memsize && memory[memsize-1]==memsize)
      var_free(memory)
      memsize=0
      return
      end

@* INDEX.
