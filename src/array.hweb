@* Macros for defining and manipulating arrays.
% $Id: cfaf9fb1a893ca6d19890e8dcc110613b4dd7c64 $

@ Macro definitions.

\ID{$Id: cfaf9fb1a893ca6d19890e8dcc110613b4dd7c64 $}

@m MAX_DIM 5
@m CHAR 0
@m INT 1
@m FLOAT 2
@m COMMA ,
@m paste(x,y) _paste(x,y)
@m _paste(x,y) x##y

@ Declaring dimensions and variables.
Each vector that is declared has one or more dimensions which have
names. These  have to be defined first. Character variables have a name 
associated with their length. Each of these dimension names will have an
upper  and lower bound. 
|@@f define_dimen integer | tells web to format the variables in
|define_dimen|  as integers. The macro |define_dimen(name,...)| defines the
lower and upper bounds of the dimension name |name|. It defines  variables by
prefixing |min| and |max| to the dimension name. If 1 arg. is
given, it puts the lower limit (|min_name|) =1, and upper limit
(|max_name|) = the first (and only) argument in |define_dimen|. If 2
args. are given,  it puts the lower  limit as the first arg and the upper
limit as the second. 

@f define_dimen integer

/* \#0 is the number of args represented by the dots.(atmost 2) \#\# pastes
the strings on either side of it after appropriate expansions, hence |name|
is expanded to the variable's name. \#n represents the nth argument
represented by the dots. */

@m define_dimen(name,...)
      $ASSERT( #0 == 1 || #0 == 2)
      $IF(#0 == 1, $DEFINE(min_##name 1),$DEFINE(min_##name #1))
      $IF(#0 == 1, $DEFINE(max_##name #1),$DEFINE(max_##name #2))

/* Once the variables |min_name| and |max_name| are defined for each
dimension name, the macro |range(name)| defines the range of the name.
|range_size(name)|  defines the size (upper limit - lower limit +1). */

@m range(name) range_min(name):range_max(name)
@m rangea(name) range_min(name),range_max(name)
@m range_star(name) range_min(name):*
@m range_stara(name) range_min(name):range_min(name)
@m range_min1(name) min_##name
@m range_min(name) (range_min1(name))
@m range_max1(name) max_##name
@m range_max(name) (range_max1(name))
@m range_size(name) (range_max(name)-range_min(name)+1)
 
@f define_var integer

/* The macro |define_var| defines variables of the form |ind_x_n| which are
equated with  the args. to |define_var| represented by dots. The args. are 
names of the dimensions of the array |x| or name of the length of character
variable |x|. The macro defines a variable |type_x| (an integer which tells us
whether it is real(2), integer(1) or character(0) ). 
|x|  is substituted by the name of the array/character variable  and |n|
is the no. of the  arg. represented by the dots.
|rank_x| is the no. of args represented by the dots. */

// Suppose  we have defined :
// |define_dimen|(a,0,10)
// |define_dimen|(b,1,10)
// |define_dimen|(c,5,20)
// |define_var|(temp,real,a,b,c)

// we get |ind_temp_1| = a, |ind_temp_2| =b, |ind_temp_3| = c

/* |ind_x_m| equals the name of the last argument and
|ind_temp_m| =c in the above example.  */

@m define_var(x,type,...) $ASSERT( #0 <= MAX_DIM && #0 >= 0)
      $ASSERT( type >= CHAR && type <= FLOAT )
      $ASSERT( type != CHAR || #0 >= 1)
      $IF( type == CHAR, $ASSERT(range_min(#1) == 1), )
      $DEFINE(type_##x type)
      $DEFINE(rank_##x #0)
      $IF(#0 >= 1, $DEFINE(ind_##x##_1 #1),)
      $IF(#0 >= 2, $DEFINE(ind_##x##_2 #2),)
      $IF(#0 >= 3, $DEFINE(ind_##x##_3 #3),)
      $IF(#0 >= 4, $DEFINE(ind_##x##_4 #4),)
      $IF(#0 >= 5, $DEFINE(ind_##x##_5 #5),)
      $DEFINE(ind_##x##_m $IFCASE(#0,0,#1,#2,#3,#4,#5))

@m define_varp(x,type,...)
      $ASSERT(( type == CHAR && #0 >= 2 ) || ( type != CHAR && #0 >= 1 ))
      define_var(x,type,#.)

/* Return type declaration (including character size) */
@#if FORTRAN77
@m char_spec(size)
    *(size)
@#else
@m char_spec(size)
    (len=size)
@#endif

@m var_type(x)
      $IFCASE(type_##x, character, integer, real)
      $IF(type_##x == CHAR, char_spec(range_max(ind_##x##_1)),)

@m var_type_star(x)
      $IFCASE(type_##x, character, integer, real)
      $IF(type_##x == CHAR, char_spec(*),)

/* The explicit array shape, e.g., |(0:1,3:10)| */
@m array_shape(x)
      $IF(type_##x == CHAR,
          $IFCASE(rank_##x,,,
          (range(ind_##x##_2)),
          (range(ind_##x##_2),range(ind_##x##_3)),
          (range(ind_##x##_2),range(ind_##x##_3),range(ind_##x##_4)),
          (range(ind_##x##_2),range(ind_##x##_3),range(ind_##x##_4),range(ind_##x##_5))),
          $IFCASE(rank_##x,,
          (range(ind_##x##_1)),
          (range(ind_##x##_1),range(ind_##x##_2)),
          (range(ind_##x##_1),range(ind_##x##_2),range(ind_##x##_3)),
          (range(ind_##x##_1),range(ind_##x##_2),range(ind_##x##_3),range(ind_##x##_4)),
          (range(ind_##x##_1),range(ind_##x##_2),range(ind_##x##_3),range(ind_##x##_4),range(ind_##x##_5)))) @;

/* The shape with the last bound unspecified, e.g., |(0:1,3:*)| */
@#if FORTRAN77
@m array_shape_star(x)
      $IF(type_##x == CHAR,
          $IFCASE(rank_##x,,,
          (range_star(ind_##x##_2)),
          (range(ind_##x##_2),range_star(ind_##x##_3)),
          (range(ind_##x##_2),range(ind_##x##_3),range_star(ind_##x##_4)),
          (range(ind_##x##_2),range(ind_##x##_3),range(ind_##x##_4),range_star(ind_##x##_5))),
          $IFCASE(rank_##x,,
          (range_star(ind_##x##_1)),
          (range(ind_##x##_1),range_star(ind_##x##_2)),
          (range(ind_##x##_1),range(ind_##x##_2),range_star(ind_##x##_3)),
          (range(ind_##x##_1),range(ind_##x##_2),range(ind_##x##_3),range_star(ind_##x##_4)),
          (range(ind_##x##_1),range(ind_##x##_2),range(ind_##x##_3),range(ind_##x##_4),range_star(ind_##x##_5)))) @;

/* The shape with the last size set to 1.  This is because IBM's xlf doesn't
like a pointer array to have a starred last dimension */

@m array_shape_stara(x)
      $IF(type_##x == CHAR,
          $IFCASE(rank_##x,,,
          (range_stara(ind_##x##_2)),
          (range(ind_##x##_2),range_stara(ind_##x##_3)),
          (range(ind_##x##_2),range(ind_##x##_3),range_stara(ind_##x##_4)),
          (range(ind_##x##_2),range(ind_##x##_3),range(ind_##x##_4),range_stara(ind_##x##_5))),
          $IFCASE(rank_##x,,
          (range_stara(ind_##x##_1)),
          (range(ind_##x##_1),range_stara(ind_##x##_2)),
          (range(ind_##x##_1),range(ind_##x##_2),range_stara(ind_##x##_3)),
          (range(ind_##x##_1),range(ind_##x##_2),range(ind_##x##_3),range_stara(ind_##x##_4)),
          (range(ind_##x##_1),range(ind_##x##_2),range(ind_##x##_3),range(ind_##x##_4),range_stara(ind_##x##_5)))) @;
@#endif

/* A Fortran-90 style rank, e.g., |(:,:)| */
@#if FORTRAN90
@m array_rank(x)
      $IF(type_##x == CHAR,
          $IFCASE(rank_##x,,,
          (:),
          (:,:),
          (:,:,:),
          (:,:,:,:)),
          $IFCASE(rank_##x,,
          (:),
          (:,:),
          (:,:,:),
          (:,:,:,:),
          (:,:,:,:,:))) @;
@#endif

/* Comma separated shape, e.g., |0,1,3,y|.  Character length is the
first argument */

@#if FORTRAN90
@m array_arglistc(x,y)
      $IF(type_##x == CHAR,
          $IFCASE(rank_##x,,
          range_max(ind_##x##_1),
          range_max(ind_##x##_1) COMMA range_min(ind_##x##_2) COMMA y,
          range_max(ind_##x##_1) COMMA rangea(ind_##x##_2) COMMA range_min(ind_##x##_3) COMMA y,
          range_max(ind_##x##_1) COMMA rangea(ind_##x##_2) COMMA rangea(ind_##x##_3) COMMA range_min(ind_##x##_4) COMMA y,
          range_max(ind_##x##_1) COMMA rangea(ind_##x##_2) COMMA rangea(ind_##x##_3) COMMA rangea(ind_##x##_4) COMMA range_min(ind_##x##_5) COMMA y),
          $IFCASE(rank_##x,,
          range_min(ind_##x##_1) COMMA y,
          rangea(ind_##x##_1) COMMA range_min(ind_##x##_2) COMMA y,
          rangea(ind_##x##_1) COMMA rangea(ind_##x##_2) COMMA range_min(ind_##x##_3) COMMA y,
          rangea(ind_##x##_1) COMMA rangea(ind_##x##_2) COMMA rangea(ind_##x##_3) COMMA range_min(ind_##x##_4) COMMA y,
          rangea(ind_##x##_1) COMMA rangea(ind_##x##_2) COMMA rangea(ind_##x##_3) COMMA rangea(ind_##x##_4) COMMA range_min(ind_##x##_5) COMMA y)) @;

@m array_arglist(x)
      array_arglistc(x,range_max(ind_##x##_m))

@m var_typea(x)
      paste($IFCASE(type_##x,c,i,r),$IF(type_##x == CHAR,$EVAL(rank_##x-1),rank_##x))
@#endif

@f declare_var integer

/* |declare_var(x)| declares the variable x. It may be a character, real or
integer and can have 0 to |MAX_DIM| dimensions. For this to work, the
values of |ind_x_n| and corresponding |range| must be known through the
|define_dimen| and |define_var| macros explained earlier. */

// suppose we have 
// |define_dimen(len_junk,10) |
// |define_dimen(len_junk_array,32) |
// |define_dimen(dim_junk_array,1,5) |
// |define_var(junk,CHAR,len_junk) |
// |define_var(junk_array,CHAR,len_junk_array,dim_junk_array)  |
// |declare_var(junk) |
// |declare_var(junk_arrray)|
// we get:
// character $\star$ 10 junk
// character $\star$ 32 |junk_array(1:5)|

// {\bf NB} the syntax of the \$IF statement is :

/* \$IF (expression,true,false). note the position of the commas
carefully. They seperate the true  and false parts. */

@m declare_var(x)
      var_type(x) x array_shape(x) @;

@f declare_varp integer

/* |declare_varp(x)| is similar to |declare_var(x)|, but it declares a
pointer to an array x . It is necessary to declare a pointer to an array
for dynamic allocation. So the last upper dimension is not fixed.
suppose we have : */

// |define_dimen(len_junk_array,32) |
// |define_dimen(lower_junk_array,1)|
// |define_var(junk_array,CHAR,len_junk_array,lower_junk_array) |
// |declare_varp (junk_array) |
// then we get:
// character $\star$ 32 |junk_array(1:*)|
// |pointer(ptr_junk_array,junk_array) |

/* The last statement  comes from the macro |ptr_decl(x)| which is explained
later. */

@#if FORTRAN77
@#if !IBM
@m declare_varp(x)
      ptr_decl(x);
      var_type(x) x array_shape_star(x) @;
@#else
@m declare_varp(x)
      ptr_decl(x);
      var_type(x) x array_shape_stara(x) @;
@#endif
@#else
@m declare_varp(x)
      var_type(x),dimension array_rank(x), pointer :: x @;
@#endif

/* |array_size(x)| is the total size of an array x. It is given as the product
of the  ranges of the dimensions. The range is defined by a macro
|range_size| and is basically - dimU - dimL +1	*/

@m array_size(x)
      $IFCASE(rank_##x,1,(range_size(ind_##x##_1)),
      (range_size(ind_##x##_1)*range_size(ind_##x##_2)),
      (range_size(ind_##x##_1)*range_size(ind_##x##_2)*range_size(ind_##x##_3)),
      (range_size(ind_##x##_1)*range_size(ind_##x##_2)*range_size(ind_##x##_3)*range_size(ind_##x##_4)),
      (range_size(ind_##x##_1)*range_size(ind_##x##_2)*range_size(ind_##x##_3)*range_size(ind_##x##_4)*range_size(ind_##x##_5)))
/* 
   |array_unit(x)| is the size calculated by leaving out the last dimension of
   the array x.  This was previously set for use only with FORTRAN77, but don't
   know why.  Using this with FORTRAN90 rather than developing analogous
   capability (via |size| function?).
*/
@m array_unit(x)
      $IFCASE(rank_##x,,1,
      (range_size(ind_##x##_1)),
      (range_size(ind_##x##_1)*range_size(ind_##x##_2)),
      (range_size(ind_##x##_1)*range_size(ind_##x##_2)*range_size(ind_##x##_3)),
      (range_size(ind_##x##_1)*range_size(ind_##x##_2)*range_size(ind_##x##_3)*range_size(ind_##x##_4)))

/* |array_sizev(x,y)| gives the size of an array x if its last
dimension (upper limit) is y. This can be used to calculate the new size of
an array x if it's last dimension is changed. It's basically the product of
the size calculated by leaving out the last dimension (|array_unit(x)|) and
the new size of the last dimension which is just = (dimnU -dimnL +1) where
dimnU is y and dimnL is known.( lower limit of last dimension given by
|range_min(ind_x_m)| */

@#if FORTRAN77
@m array_sizev(x,y) array_unit(x)*((y)-range_min(ind_##x##_m)+1)
@#endif

/* |var_beg(x)| gives the initial element of an array */

@m var_beg(x)
      x $IF(type_##x == CHAR,
          $IFCASE(rank_##x,,,
          (range_min(ind_##x##_2)),
          (range_min(ind_##x##_2),range_min(ind_##x##_3)),
          (range_min(ind_##x##_2),range_min(ind_##x##_3),range_min(ind_##x##_4)),
          (range_min(ind_##x##_2),range_min(ind_##x##_3),range_min(ind_##x##_4),range_min(ind_##x##_5))),
          $IFCASE(rank_##x,,
          (range_min(ind_##x##_1)),
          (range_min(ind_##x##_1),range_min(ind_##x##_2)),
          (range_min(ind_##x##_1),range_min(ind_##x##_2),range_min(ind_##x##_3)),
          (range_min(ind_##x##_1),range_min(ind_##x##_2),range_min(ind_##x##_3),range_min(ind_##x##_4)),
          (range_min(ind_##x##_1),range_min(ind_##x##_2),range_min(ind_##x##_3),range_min(ind_##x##_4),range_min(ind_##x##_5)))) @;


@ Array slices for passing to subroutines.  I think we only need a full
one-dimensional slice of numeric arrays and that's what's given here.

@#if FORTRAN77
@m slice1(x,dims) x dims [range_min(ind_##x##_1)]
@#else
@m slice1(x,dims) x dims [:]
@#endif

@ Macros to simplify memory allocation

/* |ptr_decl(x)| declares a pointer to an array x and calls it |ptr_x|
where |x| is the name of the array. */

@#if FORTRAN77
@f ptr_decl integer
@m ptr_decl(x) pointer (ptr_##x,x)
@m mem_assign(x,p) ptr_#x=p
@#else
@m mem_assign(x,p) x ASSIGN p
@#endif

/* |real_alloc(x,n)| allocates memory for a real array x of size |n|
.|real_realloc(x,on,n)| reallocates memory for an real array x which has a size
|on| but needs a size |n|. Once the array has been used, it's memory
can be freed using |real_free(x,n)| */

@#if FORTRAN77
@m real_alloc(x,n) ptr_##x=mem_alloc(n) @;
@m real_realloc(x,on,n) ptr_##x=mem_realloc(ptr_##x,on,n) @;
@m real_free(x,n) call mem_free(ptr_##x,n) @;
@#endif

/* similar macros for allocating, reallocating and freeing  memory for
integers. they use the same function calls, only the size is different,
this is handled by using |int_mem(n)| instead of just n	which does the
right thing */

@#if FORTRAN77
@m int_alloc(x,n) real_alloc(x,int_mem(n)) @;
@m int_realloc(x,on,n) real_realloc(x,int_mem(on),int_mem(n)) @;
@m int_free(x,n) real_free(x,int_mem(n)) @;
@#endif

/* similar macros for allocating, reallocating and freeing  memory for
characters. they use the same function calls, only the size is different,
this is handled by using |char_mem(n)| instead of just n which does the
right thing */

@#if FORTRAN77
@m char_alloc(x,n) real_alloc(x,char_mem(n)) @;
@m char_realloc(x,on,n) real_realloc(x,char_mem(on),char_mem(n)) @:
@m char_free(x,n) real_free(x,char_mem(n)) @;
@#endif

/* |var_alloc(x)|, |var_realloc(x,on,n)| and |var_free(x)| are generalisations
of the above macros which were meant for a specific type. Here, the macro
does the right thing depending on whether the allocation, reallocation or
freeing has to be done for a real, integer or character. It finds out the
size of the array too, using the macro |array_size(x)|. note the use of
|array_sizev(x,y)| to get the size of x with the last dimension set to |n|
and |on|	*/

@#if FORTRAN77
@m var_alloc(x) $IFCASE(type_##x,
      char_alloc(x,array_size(x)),
      int_alloc(x,array_size(x)),
      real_alloc(x,array_size(x)))
@#else
@m var_alloc(x)
      x ASSIGN paste(mem_alloc_,var_typea(x))(array_arglist(x),#x) @;
@#endif

@#if FORTRAN77
@m var_realloc(x,on,n) $IFCASE(type_##x,
      char_realloc(x,array_sizev(x,on),array_sizev(x,n)),
      int_realloc(x,array_sizev(x,on),array_sizev(x,n)),
      real_realloc(x,array_sizev(x,on),array_sizev(x,n)))
@#else
@m var_realloc(x,on,n)
      x ASSIGN paste(mem_realloc_,var_typea(x))(x,array_arglistc(x,on),n,#x) @;
@#endif

@#if FORTRAN77
@m var_free(x) $IFCASE(type_##x,
      char_free(x,array_size(x)),
      int_free(x,array_size(x)),
      real_free(x,array_size(x)))
@#else
@m var_free(x)
      call paste(mem_free_,var_typea(x))(x,array_arglist(x),#x) @;
@#endif

@ Macros to accomodate growing arrays.  

@m mem_inc 100

/* |mem_size(x)| returns the size in the nearest unit of |mem_inc| for a
given size x. eg.. |mem_size(1)|, |mem_size(2)| ... |mem_size(100)| all
return 100, but |mem_size(101)| ...|mem_size(200)| = 200 etc. */

@m mem_size(x) (int(((x)+mem_inc-1)/mem_inc)*mem_inc) // $\lceil x/|mem_inc| \rceil |mem_inc|$

/*| array_sizea(x)| gives the size of an array x using the nearest
multiple of |mem_inc| as the last range. for eg.. if |mem_inc| =5, then
|mem_size(1)| to |mem_size(5)| = 5, |mem_size(6)| to |mem_size(10)| = 10
etc. now if x is x(1:5), |array_sizea(x)| is 1 $\times $ 5 = 5 and if x is
x(1:6), it is 1 $\times$ 10 = 10.
 |array_sizeb(x)| gives the previous size of x using the nearest multiple
of |mem_inc|  as the last range. it is just the |mem_size(x)| using the
last index minus |mem_inc|. eg.. if x is x(1:6), |array_sizeb(x)| =
1 $\times$ (|mem_size(6)| - 5) = 1 $\times $ (10 -5) =5 
|array_sizec(x,y)| gives  the size of an array x using the nearest
multiple of |mem_inc| as the last range (same as |array_sizea(x)| so
far). It uses the upper limit y for the last index instead of the original
value.	*/

@m last_sizea(x) mem_size(range_size(ind_##x##_m))
@m last_sizeb(x) (mem_size(range_size(ind_##x##_m))-mem_inc)
@m last_sizec(x,y) mem_size((y)-range_min(ind_##x##_m)+1)

@m last_ubound(x) range_max(ind_##x##_m)
@m last_ubounda(x) (last_sizea(x)+range_min(ind_##x##_m)-1)
@m last_uboundb(x) (last_sizeb(x)+range_min(ind_##x##_m)-1)
@m last_uboundc(x,y) (last_sizec(x,y)+range_min(ind_##x##_m)-1)

@#if FORTRAN77
@m array_sizea(x) array_unit(x)*last_sizea(x)
@m array_sizeb(x) array_unit(x)*last_sizeb(x)
@m array_sizec(x,y) array_unit(x)*last_sizec(x,y)
@#endif

/* |var_realloca(x)| reallocates the size of an array x if it's growing in
increments of 1, but increments it in steps of |mem_inc| when it's size has
just exceeded the limit. since the value of the range at this point is like
|mem_inc| *n +1 (n is an integer), |mem_size(range_size(indx_m)| gives the
next higher multiple of its size. This is the new size. The old size is
this value minus |mem_inc| which is what the macros |array_sizea(x)| and
|array_sizeb(x)| return.*/

@#if FORTRAN77
@m var_realloca(x) if (mod(range_size(ind_##x##_m),mem_inc) == 1) then;
      $IFCASE(type_##x,
      char_realloc(x,array_sizeb(x),array_sizea(x)),
      int_realloc(x,array_sizeb(x),array_sizea(x)),
      real_realloc(x,array_sizeb(x),array_sizea(x)));
      end if @;
@#else
@m var_realloca(x) if (mod(range_size(ind_##x##_m),mem_inc) == 1) then;
      var_realloc(x,last_uboundb(x),last_ubounda(x));
      end if @;
@#endif

/* |var_reallocb(x)| sets the size of the array to the actual size at that
time given by |array_size| , if the range size of the last index is not a
multiple of |mem_inc| (which means the growth has saturated ) */

@#if FORTRAN77
@m var_reallocb(x) if (mod(range_size(ind_##x##_m),mem_inc) != 0) then;
      $IFCASE(type_##x,
      char_realloc(x,array_sizea(x),array_size(x)),
      int_realloc(x,array_sizea(x),array_size(x)),
      real_realloc(x,array_sizea(x),array_size(x)));
      end if @;
@#else
@m var_reallocb(x) if (mod(range_size(ind_##x##_m),mem_inc) != 0) then;
      var_realloc(x,last_ubounda(x),last_ubound(x));
      end if @;
@#endif

/* |var_reallocc(x,on,n)| reallocates the size of an array x if the sizes
of x corresponding to the old value of upper limit of the last dim. (on)
rounded off to the nearest multiple of |mem_inc| and the size 
of x corresponding to the new value of upper limit of the
last dim. (n)  rounded off to the nearest multiple of |mem_inc| are not the
same. */

@#if FORTRAN77
@m var_reallocc(x,on,n) if (mem_size((on)-range_min(ind_##x##_m)+1) !=
      mem_size((n)-range_min(ind_##x##_m)+1)) then;
      $IFCASE(type_##x,
      char_realloc(x,array_sizec(x,on),array_sizec(x,n)),
      int_realloc(x,array_sizec(x,on),array_sizec(x,n)),
      real_realloc(x,array_sizec(x,on),array_sizec(x,n)));
      end if @;
@#else
@m var_reallocc(x,on,n) if (mem_size((on)-range_min(ind_##x##_m)+1) !=
      mem_size((n)-range_min(ind_##x##_m)+1)) then;
      var_realloc(x,last_uboundc(x,on),last_uboundc(x,n));
      end if @;
@#endif

@ Define package functions.

/* Categories of package definition macros */

@m PK_DUMMY 0
@m PK_DIMEN 1
@m PK_VAR 2
@m PK_VARP 3
@m PK_VARLOCAL 4
@m PK_CAT_MIN PK_DUMMY
@M PK_CAT_MAX PK_VARLOCAL

@m register(pk,n,x,cat) _register(pk,n,x,cat)
@m _register(pk,n,x,cat)
     $DEFINE(VAR_##pk##_##n x)
     $DEFINE(CAT_##pk##_##n cat)

@m package_init(pk) $DEFINE(COUNT_##pk 0)
      $DEFINE(pk##_common process_pk(pk,common))
      $DEFINE(pk##_module process_pk(pk,module))
      $DEFINE(pk##_ncdef(fileid) process_pk(pk,ncdef,fileid))
      $DEFINE(pk##_ncwrite(fileid) process_pk(pk,ncwrite,fileid))
      $DEFINE(pk##_ncread(fileid) process_pk(pk,ncread,fileid))
      $DEFINE(pk##_ncdecl process_pk(pk,ncdecl))
      $DEFINE(pk##_pvmput process_pk(pk,pvmput))
      $DEFINE(pk##_pvmget process_pk(pk,pvmget))
      $DEFINE(pk##_mpibcast process_pk(pk,mpibcast))
      $DEFINE(pk##_mpibcastna process_pk(pk,mpibcastna))
      $DEFINE(pk##_mpisend(dest,tag) process_pk(pk,mpisend,dest,tag))
      $DEFINE(pk##_mpireceive(source,tag) process_pk(pk,mpireceive,source,tag))

@m package_end(pk)

@m define_dimen_pk(pk,name,...)
      define_dimen(name,#.)
      $INCR(COUNT_##pk)
      register(pk,COUNT_##pk,name,PK_DIMEN)
      
@m define_dummy_pk(pk,name,type,...)
      define_var(name,type,#.)
      $INCR(COUNT_##pk)
      register(pk,COUNT_##pk,name,PK_DUMMY)

@m define_var_pk(pk,name,type,...)
      define_var(name,type,#.)
      $INCR(COUNT_##pk)
      register(pk,COUNT_##pk,name,PK_VAR)

@m define_varp_pk(pk,name,...)
      define_varp(name,#.)
      $INCR(COUNT_##pk)
      register(pk,COUNT_##pk,name,PK_VARP)

@m define_varlocal_pk(pk,name,type,...)
      define_var(name,type,#.)
      $INCR(COUNT_##pk)
      register(pk,COUNT_##pk,name,PK_VARLOCAL)

@ Iterating macros.  These iterate over all the entities in a package,
invoking a macro for entity.

@m process_pk(pk,module,...) $DEFINE(TEMPCOUNT 0)
      start_##module(pk,#.)
      iterate_pk(pk,module,#.)
      end_##module(pk,#.)

// The ``*'' here is significant

@m*  iterate_pk(pk,module,...)
      $INCR(TEMPCOUNT)
      $IF(TEMPCOUNT <= COUNT_##pk,
          do_##module(pk,paste(VAR_##pk##_,TEMPCOUNT),paste(CAT_##pk##_,TEMPCOUNT),#.)
          iterate_pk(pk,module,#.)
          ,)

@#if FORTRAN77
@m start_common(pk)
     $DEFINE(COMMON_C 0) $DEFINE(COMMON_I 0) $DEFINE(COMMON_R 0) $DEFINE(COMMON_P 0)

@m end_common(pk)
      $IF(COMMON_C > 0, save /pk##_com_c/;,)
      $IF(COMMON_I > 0, save /pk##_com_i/;,)
      $IF(COMMON_R > 0, save /pk##_com_r/;,)
      $IF(COMMON_P > 0, save /pk##_com_p/;,)

@m do_common(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        declare_var(var);
          $IFCASE(paste(type_,var),
            common /pk##_com_c/ var; $INCR(COMMON_C),
            common /pk##_com_i/ var; $INCR(COMMON_I),
            common /pk##_com_r/ var; $INCR(COMMON_R)),
        declare_varp(var); common /pk##_com_p/ paste(ptr_,var); $INCR(COMMON_P),
        declare_var(var);
          $IFCASE(paste(type_,var),
            common /pk##_com_c/ var; $INCR(COMMON_C),
            common /pk##_com_i/ var; $INCR(COMMON_I),
            common /pk##_com_r/ var; $INCR(COMMON_R)),
        )

@#else

@m start_common(pk)
@m end_common(pk)
      use pk##_mod;
@m do_common(pk,var,cat)

@#endif

@#if FORTRAN90

@#if 0
// This version only outputs |module|, and |end module| if there's a body.
// This break things with MPI on non-MPI builds.
// This follow version fixes this.
@m start_module(pk)
      $DEFINE(MODULE_SIZE 0)

@m end_module(pk)
      $IF(MODULE_SIZE > 0, end module pk##_mod;,)


@m do_module(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        $IF(MODULE_SIZE == 0, module pk##_mod; implicit_none_f90mod; save;,)
          declare_var(var);
          $INCR(MODULE_SIZE),
        $IF(MODULE_SIZE == 0, module pk##_mod; implicit_none_f90mod; save;,)
          declare_varp(var);
          $INCR(MODULE_SIZE),
        $IF(MODULE_SIZE == 0, module pk; implicit_none_f90mod; save;,)
          declare_var(var);
          $INCR(MODULE_SIZE),
        )
@#else
@m start_module(pk)
      module pk##_mod; implicit_none_f90mod; save;

@m end_module(pk)
      end module pk##_mod;


@m do_module(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
          declare_var(var);,
          declare_varp(var);,
          declare_var(var);,
        )
@#endif
@#else

@m start_module(pk)
@m end_module(pk)
@m do_module(pk,var,cat)

@#endif

@m start_ncdef(pk,fileid)

@m do_ncdef(pk,var,cat,fileid)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        dimen_def(fileid,var);,
        var_def(fileid,var);,
        var_def(fileid,var);,
        )

@m end_ncdef(pk,fileid)

@m start_ncdecl(pk)

@m do_ncdecl(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        integer dimid(var);,
        integer dimid(var);,
        integer dimid(var);,
        )

@m end_ncdecl(pk)


@m start_ncwrite(pk,fileid)

@m do_ncwrite(pk,var,cat,fileid)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        var_write(fileid,var);,
        var_write(fileid,var);,
        )

@m end_ncwrite(pk,fileid)

@m start_ncread(pk,fileid)

@m do_ncread(pk,var,cat,fileid)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        dimen_inq(fileid,var);,
        var_inq(fileid,var); var_read(fileid,var);,
        var_inq(fileid,var); var_alloc(var); var_read(fileid,var);,
        )

@m end_ncread(pk,fileid)

@m start_pvmput(pk)

@m do_pvmput(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        pvm_put(var);,
        pvm_put(var);,
        )

@m end_pvmput(pk)

@m start_pvmget(pk)

@m do_pvmget(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        pvm_get(var);,
        var_alloc(var); pvm_get(var);,
        )

@m end_pvmget(pk)

@m start_mpibcast(pk)

@#if MPI
@m do_mpibcast(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        mpi_broadcast(var);,
        if (mpi_rank != mpi_degas2_root) then; var_alloc(var); endif;mpi_broadcast(var);,
        )
@#else
@m do_mpibcast(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        ,
        ,
        )
@#endif

@m end_mpibcast(pk)
//
// This is the same as the above, but skips the
// allocation step on the slaves; to be used
// for iterative calculations.
//
@m start_mpibcastna(pk)

@#if MPI
@m do_mpibcastna(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        mpi_broadcast(var);,
        mpi_broadcast(var);,
        )
@#else
@m do_mpibcastna(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        ,
        ,
        )
@#endif

@m end_mpibcastna(pk)

@m start_mpisend(pk,dest,tag)

@#if MPI
@m do_mpisend(pk,var,cat,dest,tag)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        mpi_send(var,dest,tag);,
        mpi_send(var,dest,tag);,
        )
@#else
@m do_mpisend(pk,var,cat,dest,tag)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        ,
        ,
        )
@#endif

@m end_mpisend(pk,dest,tag)

@m start_mpireceive(pk,source,tag)

@#if MPI
@m do_mpireceive(pk,var,cat,source,tag)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        mpi_receive(var,source,tag);,
        var_alloc(var); mpi_receive(var,source,tag);,
        )
@#else
@m do_mpireceive(pk,var,cat,source,tag)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        ,
        ,
        ,
        ,
        )
@#endif

@m end_mpireceive(pk,source,tag)

@m do_netcdfa(pk,var,cat)
      $ASSERT( cat >= PK_CAT_MIN && cat <= PK_CAT_MAX )
      $IFCASE(cat,
        netcdf0(var);,
        netcdf1(var);,
        netcdf2(var);,
        netcdf3(var);,
        )


@* Description of array definition macros.

These macros aid in defining array
operations. The way the macros are used is outlined below; they are largely
invoked in other header files. The primary exceptions to this rule are
the pointer-related macros, |var_alloc|, |var_realloc|, and |var_free|.
Perhaps the {\em best} way to see what 
these macros do is to examine the FORTRAN
code produced by the WEB preprocessor.

The macros used most frequently are those associated with ``package
definition'':
\begin{description}
  \item [|package_init(CL)|] This would be the first macro executed for the
class with abbreviation |CL|. It begins the package definition process by
telling WEB to define ``variables'' (really they are macros the names of which
are defined ``on-the-fly'' using the class abbreviations) 
like |CL_common_b|, |CL_ncreada|, and
|CL_pvmput|. Then, in the actual WEB code, the programmer uses these
phrases to symbolize a complete set of declarations or definitions for this
class. This set of definitions, etc. 
are built up by subsequent macro calls made in the header 
file as the various dimensions and variables are defined. It is worth
going through these macros or ``variables'' one by one:
  \item [|CL_common_a|] Produces common blocks containing scalar (FORTRAN)
variables. This includes a ``save'' statement for each one. The suffix
``\_a'' is used to represent scalars; likewise, ``\_b'' is used for 
``dimensions'' (see below) and
``\_c'' for arrays. Note that typically one finds in the header
file for the class a macro |CL_common| which concatenates one or more
of these macros into a single one. 
  \item [|CL_ncdef|] Handles the dimensions and variable definitions required
for the ``definition'' phase of creating a new netCDF file.
  \item [|CL_ncwrite|] Writes all of the netCDF variables in class |CL| into
the netCDF file specified.
  \item [|CL_ncread|] Reads all of the netCDF variables in class |CL| from the
specified netCDF file into the FORTRAN code.
  \item [|CL_ncdecl|] Declares for the FORTRAN compiler the integer identifiers
netCDF uses to identify the various dimensions and variables in the class
|CL|.
  \item [|CL_pvmput|] Associated with PVM\ldots
  \item [|CL_pvmget|] Associated with PVM\ldots
  \item [|define_dimen_pk|(|CL,dimname|,\ldots)] 
This defines a dimension, i.e., 
assigns a name, |dimname|, to an integer range. This macro is primarily
required only for the netCDF-related macros listed above; the resulting
``dimensions'' do not appear in the final FORTRAN code except as numbers
in these netCDF calls.
  \item [|define_var_pk|(|CL,varname,type|,\ldots)] Defines a 
FORTRAN variable |varname|.
This can be a scalar, array, or a character variable. |varname| is also added
to the corresponding netCDF and PVM macro definitions.
  \item [|define_varp_pk|(|CL,varname|,\ldots)] Defines a FORTRAN pointer to be
associated with |varname|. Again, the macro appends entries 
to all of the corresponding
netCDF and PVM macro definitions. Note that in the case of |CL_ncread|, the
macro |var_alloc(varname)| (see below) is included. 
In general, a pointer should
be used for variables with dimensions which are not known at compile time.
\end{description}

These ``package'' macros are largely built up on the other macros defined
in this header file. The most significant of these are:
\begin{description}
  \item [|define_dimen(dimname,min,max)|] Defines a dimension range |dimname|
as running from |min| to |max|; produces no code.
  \item [|define_var|(|array,type,dimname1,dimname2|,\ldots)] 
Defines |array| of type |type| (|CHAR|, |INT|, or |FLOAT|) as having
first dimension |dimname1| (as declared with a |define_dimen| or 
|define_dimen_pk| macro), and so on. The number of dimensions in the
argument list is the rank of |array|. This macro is used for scalars as
well (rank 0). Again, no code is produced by this
macro.
  \item [|declare_var(varname)|] Once a variable |varname| 
is defined, this macro is used
to actually declare it in the FORTRAN code; the result is a type
(including dimensions for arrays and string length for character strings)
declaration statement. The variable type 
is handled automatically by the macro. Note that for character strings,
the first dimension provides the length of each element of the array. This
makes interaction with netCDF easier where only single character variables
are permitted.
  \item [|declare_varp(varname)|] Same as |declare_var|, 
but also uses |ptr_decl|
to actually declare the pointer variable itself (see below).
  \item [|array_size(arrayname)|] Gives the size of |arrayname|, 
i.e., the total number of
elements in an array.
  \item [|array_unit(arrayname)|] Number of elements in one 
``slice'' (i.e., one
unit of the last array index) of the array |arrayname|.
  \item [|array_sizev(arrayname,newmax)|] Gives the size of the array 
|arrayname| if the upper
limit of the last index were set to |newmax|.
  \item [|ptr_decl(arrayname)|] Declares a pointer names |ptr_arrayname| 
to be associated
with the array |arrayname|.
  \item [|var_alloc(arrayname)|] Allocates space for array |arrayname|; 
this assumes that all
of its dimensions have been defined.
  \item [|var_realloc(arrayname,oldmax,newmax)|] Is used when there 
is an increase in the
last dimension of an array |arrayname|; |oldmax| is the old value for the upper
limit and |newmax| is the new value.
  \item [|var_free(arrayname)|] Deallocates the memory associated with the 
array |arrayname|.
  \item [|var_realloca(arrayname)|] Used to reallocate space  when the last 
dimension of array |arrayname| grows by one. 
The allocation will only take place
every |mem_inc| (defined in this file) steps. 
  \item [|var_reallocb(arrayname)|] Once |arrayname| has grown to its 
final size
(via repeated invocations of |var_realloca|), this macro is used to repack
the array in the smallest possible space.
  \item [|var_reallocc(arrayname,oldmax,newmax)|] Used to reallocate 
space when the
last dimension of array |arrayname| is growing by steps other than one; 
|oldmax| and
|newmax| are the old and new values of the upper limit of the last dimension,
respectively.
\end{description}

If one wishes to understand more completely these macros, it is useful
to be familiar with some of the predefined WEB macros. Throughout the
macro definitions also be aware of which quantities are the arguments 
of the macros, which are other macros, and which are strings meant to
appear in the final FORTRAN code. The binary operators used in the
macros are the same as those used in C; see the section entitled
``Expression Evaluation'' in the WEB manual if these are unfamiliar
to you.
\begin{description}
  \item [@@f] Denotes a formatting declaration for WEB; affects only the
typeset output.
  \item [@@m] A macro definition.
  \item [\#\#] Is the concatenation or paste operator. It is typically used
to paste a string argument to a macro into a string inside the macro 
definition. For example, if we used somewhere |ptr_decl(foo)|, the
definition |ptr_##x| would be expanded as |ptr_foo| in the FORTRAN code.
  \item [\ldots] When an ellipsis appears in an argument list, it means that this
macro has a variable number of arguments. The ellipsis may be preceded by
specified arguments as well.
  \item [\mbox{\#0}] When the macro has a variable number of arguments, `\#0' 
expands during WEB processing into the actual number of variable arguments
used in this particular invocation of the macro; note that this number does
not include any arguments explicitly specified at the beginning of the
macro argument list.
  \item[\mbox{\#1}] Also for a variable number of arguments, `\#n' with $n>0$ is 
replaced during WEB processing by the n-th argument in the actual invocation
of the macro. Again, this does not count any explicit arguments in the 
macro definition.
  \item[\$DEFINE] This WEB macro is typically used to assign a particular
value, usually obtained from a macro argument, to a local (i.e., to the
preprocessor) variable, the
name of a which is also likely constructed using a macro arguement. The
other macros whose names begin with an underscore 
such as ``\$IFCASE'' are described in the WEB manual; their usage should
be obvious. The most effective use of the ``\$DEFINE'' macro arises in the
construction lengthy package 
declarations such as |pk_ncdecl| where |pk| represents
one of the two letter class designations. Through repeated use of 
``\$DEFINE'' and ``\$UNDEF'', these macros are built up piece by piece during
the execution of other macros such as |define_dimen_pk| and |define_var_pk|.
\end{description}
