@* Detector definitions.

% $Id: 62fa6600658b611e62d008e866ca4d8970489c9a $

\ID{$Id: 62fa6600658b611e62d008e866ca4d8970489c9a $}

@I vector.hweb
@I zone.hweb

@ Parameters and characteristics of detectors. Some of these arrays represent
input data, some are derived. These detectors are specifically ``viewing''
detectors for which a line-of-sight (or ``view'') is required. Surface detectors are
intended to be represented by the diagnostic sub-class of sectors.

@f de_decl integer

@m de_args(x) x

@m de_dummy(x) x

@m de_decl(x) integer x @;

@m de_lookup(name) string_lookup(name,detector_name[1],de_grps)

@ Length specifications.

@m de_sy_len 24
@m de_name_len 100

@m de_var_unknown 0     // Independent variables
@m de_var_wavelength 1

@m de_spacing_unknown 0  // Spacing for independent variables
@m de_spacing_linear 1
@m de_spacing_log 2

@m de_view_start 0
@m de_view_end 1

@m de_algorithm_unknown 0
@m de_algorithm_uniform 1
@m de_algorithm_circular 2

@m de_view_pointer(i,grp) de_view_tab[de_view_base[grp]+i-1]

@ Definition of the common blocks.

@a
      package_init(de)

      define_dimen_pk(de,de_symbol_string,de_sy_len)
      define_dimen_pk(de,de_name_string,de_name_len)

      define_var_pk(de,de_grps,INT) 
      define_dimen_pk(de,de_grp_ind,0,de_grps)

      define_var_pk(de,de_max_bins,INT)

      define_var_pk(de,de_zone_frags_dim,INT)
      define_dimen_pk(de,de_zone_frags_ind,de_zone_frags_dim)
      define_var_pk(de,de_zone_frags_size,INT)

      define_varp_pk(de,detector_name,CHAR,de_name_string,de_grp_ind)
      define_varp_pk(de,detector_num_views,INT,de_grp_ind)   
      
      define_varp_pk(de,detector_var,INT,de_grp_ind)         

      define_varp_pk(de,detector_tab_index,INT,de_grp_ind)   
      define_varp_pk(de,detector_min,FLOAT,de_grp_ind)       
      define_varp_pk(de,detector_delta,FLOAT,de_grp_ind)
      define_varp_pk(de,detector_spacing,INT,de_grp_ind)

      define_var_pk(de,detector_total_views,INT)             
      define_dimen_pk(de,de_tot_view_ind,0,detector_total_views)
      
      define_dimen_pk(de,de_start_end_ind,de_view_start,de_view_end)
      define_varp_pk(de,de_view_points,FLOAT,vector,de_start_end_ind,de_tot_view_ind)
      define_varp_pk(de,de_view_algorithm,INT,de_tot_view_ind)                       
      define_varp_pk(de,de_view_halfwidth,FLOAT,de_tot_view_ind)
      
      define_varp_pk(de,de_zone_frags,FLOAT,de_zone_frags_ind)
      define_varp_pk(de,de_zone_frags_start,INT,de_tot_view_ind)
      define_varp_pk(de,de_zone_frags_num,INT,de_tot_view_ind)
      define_varp_pk(de,de_zone_frags_zones,INT,de_zone_frags_ind)
      define_varp_pk(de,de_zone_frags_min_zn,INT,de_tot_view_ind)
      define_varp_pk(de,de_zone_frags_max_zn,INT,de_tot_view_ind)

      define_varp_pk(de,de_view_base,INT,de_grp_ind)         
      define_var_pk(de,de_view_size,INT)                     
      define_dimen_pk(de,de_view_ind,0,de_view_size-1)       
      define_varp_pk(de,de_view_tab,INT,de_view_ind)
      package_end(de)

@* Detector class attribute descriptions.

@ Define detectors. Prefix is |de|. 

This class is primarily intended to model
light gathering diagnostics of various types, although other uses will 
probably be found. An individual detector is basically represented by
a viewing chord and an angular halfwidth. The signal collected by each
detector may (or may not) be broken down into individual bins (e.g., of
wavelength). 

Each viewing chord, angular halfwidth, and averaging algorithm (i.e., some
model for how the physical detector averages the signal over its spot
size), together make for a single ``view''. One or more related views form
a ``group''. Each view and group are represented by integers indexing into
the arrays below. 

\begin{description}
  \item[|de_grps|] Number of groups which have been defined.

  \item[|de_max_bins|] Used in conjunction with |sc_diag_max_bins| to check
      the dimension for the bins scoring array, |max_bins|.

  \item[|de_zone_frags_dim|] Dimension of the compressed |de_zone_frags|
array.

  \item[|de_zone_frags_size|] Actual size of the compressed |de_zone_frags|
array.

  \item[|detector_name[group_ind]|] Descriptive name for each detector group.

  \item[|detector_num_views[group_ind]|] Number of views comprising each
detector group.

  \item[|detector_var[group_ind]|] Independent variable for spectrum-collecting
(e.g., |de_var_wavelength|) detector groups.

  \item[|detector_tab_index[group_ind]|] Number of bins for 
spectrum-collecting detectors. For simplicity, only rank 0 
(designated by |detector_tab_index| = 0) or 1 detectors are 
permitted.

  \item[|detector_min[group_ind]|] Minimum value for the independent
variable.

  \item[|detector_delta[group_ind]|] Increment between independent
variable bins.

  \item[|detector_spacing[group_ind]|] Spacing method for independent
variables. Presently only uniform-linear and uniform-log are 
treated.

  \item[|detector_total_views|] Total number of views which have been 
defined.

  \item[|de_view_points[i,se,view_ind]|] |i|th position coordinate
of the start |se| = |de_view_start| or end |de_view_end| of viewing
chord |view_ind|.

  \item[|de_view_algorithm[view_ind]|] Algorithm (currently 
|de_algorithm_uniform| or |de_uniform_circular|) for averaging over the
detector viewing width. See subr. |detector_view_setup| for implementation
details.

  \item[|de_view_halfwidth[view_ind]|] Angular half-width (in radians) 
associated with the viewing chord |view_ind|.

  \item[|de_zone_frags[zone_frags_ind]|] Compressed array containing
the path lengths of chords through all of the zones in the
problem divided by the zone volume times $4 \pi$; an additional
factor accounts for the averaging over a finite halfwidth. Only
nonzero values are retained in this array; the subsequent
arrays map these data into the full set of zones.  This is
defined before the run so the chord-integrated contributions can be
made from volume scores (during or after the run).

  \item[|de_zone_frags_start[view_ind]|] Pointer into the |de_zone_frags|
array indicating the beginning of the list of entries for chord |view_ind|.

  \item[|de_zone_frags_num[view_ind]|] Number of entries in the |de_zone_frags|
array for chord |view_ind|.

  \item[|de_zone_frags_zones[zone_frags_ind]|] Zone numbers corresponding to each of the
entries in |de_zone_frags|.

  \item[|de_zone_frags_min_zn[view_ind]|] Smallest zone number in |de_zone_frags_zone|
for chord |view_ind|.

  \item[|de_zone_frags_max_zn[view_ind]|] Largest zone number in |de_zone_frags_zone|
for chord |view_ind|.

  \item[|de_view_base[group_ind]|] Index into |de_view_tab| for the
first viewing chord of |group_ind|.

  \item[|de_view_size|] Length of |de_view_tab|. Note: should be set = 1
if there are no detectors to ensure |de_view_tab| can be allocated
and written to the netCDF file.

  \item[|de_view_tab[i]|] List coordinating the |de_grps| groups with
their constituent 
|detector_total_views| viewing chords. The |detector_num_views| chords
for each group are added to this array when the group is defined with
the first one appearing at |i| = |detector_view_base[group_ind]|.
\end{description}

@ Routines using detectors.

\begin{description}
  \item[|de_lookup(name)|] Returns the integral detector group number
associated with |name|.

  \item[|de_view_pointer(i,group_ind)|] |i|th viewing chord
(1 $\rightarrow$ |detector_num_views[group_ind]|) of group |group_ind|;
i.e., this is the entry into the list of all |detector_total_views|
viewing chords.
\end{description}

