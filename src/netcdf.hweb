@* Macros used to read and write netCDF files.
% $Id: 0245361c5e83bd76334c6266d7bd079f1a09abe5 $

@ Macro definitions from \verb/netcdf.inc/

\ID{$Id: 0245361c5e83bd76334c6266d7bd079f1a09abe5 $}

@m nccreate nccre               // Longer versions of subroutine names
@m ncopen ncopn               
@m ncredef ncredf             
@m ncendef ncendf
@m ncclose ncclos
@m ncattput ncapt
@m ncattputc ncaptc
@m ncattget ncagt
@m ncattgetc ncagtc
@m ncdimdef ncddef
@m ncvardef ncvdef
@m ncvarput ncvpt
@m ncvarputc ncvptc
@m ncvarget ncvgt
@m ncvargetc ncvgtc
@m ncdimid ncdid
@m ncdiminq ncdinq
@m ncvarid ncvid
@m ncvarinq ncvinq
@m ncvarget ncvgt
@m ncvargetc ncvgtc

@m NC_CHAR 2
@m NC_BYTE 1
@m NC_SHORT 3
@m NC_LONG 4
@m NC_FLOAT 5
@m NC_DOUBLE 6
@#if defined(NETCDFV2)
@m NC_CLOBBER 11
@m NC_NOCLOBBER 15
@#else
@m NC_CLOBBER 0
@m NC_NOCLOBBER 4
@m NF_64BIT_OFFSET 512   // Not available under V. 2.
@m NF_NETCDF4 4096       // AKA HDF5; V. 4 or later
@#endif
@m NC_WRITE 1
@m NC_NOWRITE 0
@m NC_GLOBAL 0
@m NC_FATAL 1
@m NC_VERBOSE 2

@m NC_REAL NC_DOUBLE
@m NC_INT NC_LONG
@m MAX_NC_NAME 128

@ Routines to declare the dimensions.

@f nc_decls integer
@m nc_decls integer nc_dims(MAX_DIM),nc_corner(MAX_DIM),nc_edge(MAX_DIM),nc_stat,nc_size,nc_rank,nc_attr,nc_type;
      character*MAX_NC_NAME nc_dummy;
      external ncopen,ncvarid,ncdimid,nccreate,ncvardef,ncdimdef,nf_get_vara_text,nf_inq_format;
      integer ncopen,ncvarid,ncdimid,nccreate,ncvardef,ncdimdef,nf_get_vara_text,nf_inq_format @;

@m dimid1(name) name##_id
@m dimid(name) dimid1(name)

@m dimen_def(fileid,name)
      dimid(name) = ncdimdef(fileid,#name,range_size(name),nc_stat) @;

@m var_def(fileid,name)
      $IF(rank_##name >= 1, nc_dims(1)=dimid(ind_##name##_1);,)
      $IF(rank_##name >= 2, nc_dims(2)=dimid(ind_##name##_2);,)
      $IF(rank_##name >= 3, nc_dims(3)=dimid(ind_##name##_3);,)
      $IF(rank_##name >= 4, nc_dims(4)=dimid(ind_##name##_4);,)
      $IF(rank_##name >= 5, nc_dims(5)=dimid(ind_##name##_5);,)
      dimid(name) = ncvardef(fileid,#name,
      $IFCASE(type_##name,NC_CHAR,NC_INT,NC_REAL),
      rank_##name,nc_dims,nc_stat) @;

@m var_write(fileid,name)
      $IF(rank_##name >= 1, nc_corner(1)=1; nc_edge(1)=range_size(ind_##name##_1);,)
      $IF(rank_##name >= 2, nc_corner(2)=1; nc_edge(2)=range_size(ind_##name##_2);,)
      $IF(rank_##name >= 3, nc_corner(3)=1; nc_edge(3)=range_size(ind_##name##_3);,)
      $IF(rank_##name >= 4, nc_corner(4)=1; nc_edge(4)=range_size(ind_##name##_4);,)
      $IF(rank_##name >= 5, nc_corner(5)=1; nc_edge(5)=range_size(ind_##name##_5);,)
      $IF(type_##name == CHAR,
        call ncvarputc(fileid,dimid(name),nc_corner,nc_edge,name,array_size(name),nc_stat),
        call ncvarput(fileid,dimid(name),nc_corner,nc_edge,name,nc_stat)) @;

@m dimen_inq(fileid,name)
      dimid(name) = ncdimid(fileid,#name,nc_stat);
      call ncdiminq(fileid,dimid(name),nc_dummy,nc_size,nc_stat);
      assert(nc_size == range_size(name)) @;

@m var_inq(fileid,name)
      dimid(name) = ncvarid(fileid,#name,nc_stat);
      call ncvarinq(fileid,dimid(name),nc_dummy,nc_type,nc_rank,nc_dims,nc_attr,nc_stat);
      $IF(rank_##name >= 1, assert( nc_dims(1) == dimid(ind_##name##_1) );,)
      $IF(rank_##name >= 2, assert( nc_dims(2) == dimid(ind_##name##_2) );,)
      $IF(rank_##name >= 3, assert( nc_dims(3) == dimid(ind_##name##_3) );,)
      $IF(rank_##name >= 4, assert( nc_dims(4) == dimid(ind_##name##_4) );,)
      $IF(rank_##name >= 5, assert( nc_dims(5) == dimid(ind_##name##_5) );,) @;

@#if 0
/* These used to be part of |var_inq|.  Removed to avoid tangle problems. */
      assert(nc_rank == rank_##name);
      assert(nc_rank >= 0 && nc_rank <= MAX_DIM);
      assert( $IFCASE(type_##name,NC_CHAR,NC_INT,NC_REAL) == nc_type ) @;
@#endif

@#if 0
@m var_read(fileid,name)
      $IF(rank_##name >= 1, nc_corner(1)=1; nc_edge(1)=range_size(ind_##name##_1);,)
      $IF(rank_##name >= 2, nc_corner(2)=1; nc_edge(2)=range_size(ind_##name##_2);,)
      $IF(rank_##name >= 3, nc_corner(3)=1; nc_edge(3)=range_size(ind_##name##_3);,)
      $IF(rank_##name >= 4, nc_corner(4)=1; nc_edge(4)=range_size(ind_##name##_4);,)
      $IF(rank_##name >= 5, nc_corner(5)=1; nc_edge(5)=range_size(ind_##name##_5);,)
      $IF(type_##name == CHAR,
        call ncvargetc(fileid,dimid(name),nc_corner,nc_edge,name,array_size(name),nc_stat),
        call ncvarget(fileid,dimid(name),nc_corner,nc_edge,name,nc_stat)) @;
@#else
@m var_read(fileid,name)
      $IF(rank_##name >= 1, nc_corner(1)=1; nc_edge(1)=range_size(ind_##name##_1);,)
      $IF(rank_##name >= 2, nc_corner(2)=1; nc_edge(2)=range_size(ind_##name##_2);,)
      $IF(rank_##name >= 3, nc_corner(3)=1; nc_edge(3)=range_size(ind_##name##_3);,)
      $IF(rank_##name >= 4, nc_corner(4)=1; nc_edge(4)=range_size(ind_##name##_4);,)
      $IF(rank_##name >= 5, nc_corner(5)=1; nc_edge(5)=range_size(ind_##name##_5);,)
      $IF(type_##name == CHAR,
        nc_stat=nf_get_vara_text(fileid,dimid(name),nc_corner,nc_edge,name),
        call ncvarget(fileid,dimid(name),nc_corner,nc_edge,name,nc_stat)) @;
@#endif

@* Description of netCDF Macros.

The purpose of these macros is to reduce the amount of effort the user has
to expend to read and write netCDF files. In particular, since the WEB
preprocessor already knows the type and dimensioning information for every
variable in the header files, it can generate the required netCDF function
calls on the fly during processing. In order to fully comprehend these
macros, it is useful to be familiar with the concepts of netCDF files and
some of the details about the routines used to deal with them. Perhaps
the most helpful information can be found within the ``Info'' feature
of {\em Emacs} on the PPPL Theory workstations.

Note that the programmer is not likely to call directly 
any of the macros defined
in this file.
Rather, one would be more likely to use
the netCDF-related package macros defined in array.hweb. At the same
time, a few of the netCDF routines are simple enough that they are called
directly. Let us consider a
hypothetical class, cl. Here is a typical sequence of subroutine and macro
calls used to create and write a new netCDF file:

\begin{verbatim}
      integer fileid                          \\ With other declarations
      cl_ncdecl                               \\ Declare netCDF id integers
       .
       .
       .
      fileid = nccreate('cl.nc',NC_CLOBBER,nc_stat)   \\ Enter define mode
      call ncattputc(fileid,NC_GLOBAL,'data_version', \\ Put attributes
     $   NC_CHAR,string_length(cl_version),
     $   cl_version,nc_stat)
      cl_ncdef(fileid) 
      call ncendef(fileid,nc_stat)                    
      cl_ncwrite(fileid)                               \\ Now in data mode
      call ncclose(fileid,nc_stat)
\end{verbatim}

The steps used to read an existing file generally look like:

\begin{verbatim}
      integer fileid                          \\ With other declarations
      cl_ncdecl                               \\ Declare netCDF id integers
       .
       .
       .
      fileid = ncopen('cl.nc',NC_NOWRITE,nc_stat) 
      call ncattgetc(fileid,NC_GLOBAL,'data_version',
     $   cl_version,len(cl_version),nc_stat)          \\ Get attributes
      cl_ncread
      call ncclose(fileid,nc_stat)
\end{verbatim}

These macros are extremely effective. It is instructive to look at the
FORTRAN code generated by the WEB preprocessor to appreciate just how much
effort these macros save. For information on these macros, see the
documentation associated with the header file array.hweb.

Looking more closely now at the macros defined in this header 
file, we see that they are minimal extensions of the
actual netCDF routines. 
\begin{description}
  \item[|dimen_def(fileid,dimname)|] Obtains the size of dimension |dimname|
and constructs the line of FORTRAN required to call |ncdimdef|; that
routine actually defines
the dimension for file |fileid|. Note that  \#name in the
macro definition instructs WEB to ``stringize'' the macro argument
|name| (for FORTRAN, place
in single quotes) .
  \item[|var_def(fileid,varname)|] Checks the rank of the variable |varname|,
writes its dimensions to the FORTRAN code via the local array |nc_dims|,
and then assembles the call to |ncvardef|, including the type declaration,
which defines |varname| in file |fileid|.
  \item[|var_write(fileid,varname)|] First writes out to the FORTRAN 
code the length of every ``edge'' (one for each dimension) of the
variable |varname|; this is done using the local arrays |nc_corner|
and |nc_edge|. Then, either the netCDF routine |ncvarputc| (for character
strings) or |ncvarput| is called to actually write the data to the file.
  \item[|dimen_inq(fileid,dimname)|] Creates two lines of code. The first
obtains from the netCDF file the value of the identifier for dimension
|dimname|; this will be stored in a local integer variable generated by
the |dimid(dimname)| macro. The second line of code obtains the size of
the dimension using |ncdiminq|. 
This is checked against the expected size.
  \item[|var_inq(fileid,varname)|] Generates two lines of code. The first
obtains from the netCDF file the value of the identifier for variable
|varname|; this will be stored in a local integer variable generated by
the |dimid(varname)| macro. The second line of code obtains the rank,
type, and size of |varname|. Each of these is checked in turn against
the expected values.
  \item[|var_read(fileid,varname)|] First writes out to the FORTRAN 
code the length of every ``edge'' (one for each dimension) of the
variable |varname|; this is done using the local arrays |nc_corner|
and |nc_edge|. Then, either the netCDF routine |ncvargetc| (for character
strings) or |ncvarget| is called to actually retrieve the data from the file.
Note that |ncvargetc| has been replaced by the function |nf_get_vara_text|      
due to an incompatibility with the library.
\end{description}
