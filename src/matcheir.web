% $Id: 612550be71b5c0795e85827a40144916dd875580 $
\Title{matcheir}

@* Read in DEGAS 2 output file, followed by text output from a corresponding
EIRENE run.  This code is hardwired to extract certain tallies from the
latter and match it against the DEGAS 2 values. The code is hardwired to
read the text output from the EIRENE recombination benchmark run,
|output_rec10b|.

\ID{$Id: 612550be71b5c0795e85827a40144916dd875580 $}

@m FILE 'matcheir.web'

@I macros.hweb 
@I tally.hweb
@I output.hweb
@I netcdf.hweb
@I sysdep.hweb
@I readfilenames.hweb
@I problem.hweb
@I background.hweb
@I string.hweb

@ The main program

@a
      program matcheir
      implicit_none_f77
      implicit_none_f90
      character*FILELEN file2

      call readfilenames

@#if 0
      call read_geometry
      call nc_read_species
      call nc_read_reactions
      call nc_read_materials
      call nc_read_pmi
      call nc_read_problem
      call nc_read_background
      call nc_read_tally

      call nc_read_output
@#endif
      call degas_init
      call nc_read_output

      call command_arg(1,file2)
      call match_data(file2)

      stop
      end

      @<Functions and Subroutines@>

@ Read EIRENE data into hardwired slots in output arrays corresponding
to those in DEGAS 2. Note: these comparisons are made between numbers
without ``post-processing'' such as the pre-computed contributions from
recombination. Hence, only the |output_grp| and |output_all| arrays
are used. Additional hacking is also required to ensure that equivalent
quantities are being compared.

@<Functions...@>=
      subroutine match_data(file2)

      define_varp(eir_all,FLOAT,output_moments_ind,output_tab_ind)
      define_varp(eir_grp,FLOAT,output_moments_ind,output_tab_ind,output_grps_ind)
      define_varp(zone_map,INT,output_ind_1,output_ind_2)
      define_varp(mean_work,FLOAT,output_ind_1,output_ind_2)

      implicit_none_f77
      pr_common                                            // Common
      so_common
      tl_common
      ou_common
      zn_common
      sp_common
      implicit_none_f90

      character*FILELEN file2                              // Input  

      integer start_lines[3]                               // Local
      integer i,is,jline,jscore,species_ind,zone

      real multiplier,rsd_min,rsd_max,prob,tot_scale_curr

      character*80 line
      character*2 stra_name

      @<Memory allocation interface@>
      st_decls

      declare_varp(eir_all)
      declare_varp(eir_grp)
      declare_varp(zone_map)
      declare_varp(mean_work)

      var_alloc(eir_all)
      var_alloc(eir_grp)
      var_alloc(zone_map)
      var_alloc(mean_work)

      do zone=1,zn_num
         if (zone_type[zone] == zn_plasma) then
            zone_map(zone_index[zone][1],zone_index[zone][2])=zone
            mean_work(zone_index[zone][1],zone_index[zone][2])=zero
         end if
      end do

      do i=0,tally_size-1
         eir_all[i][o_mean]=zero
         eir_all[i][o_var]=zero
      end do

      assert(output_old_file == TRUE)

/*
   With the implementation of the restart capability, the |output_grp| array
   is written to the netCDF file in ``raw'' form. Need to normalize it here
   to permit comparison with the EIRENE data. The follow section of code
   is essentially the same as in {\tt flighttest}.
*/
      tot_scale_curr=zero
      do is=1,so_grps
         tot_scale_curr+=so_scale(is)*so_tot_curr(is)
      end do

      do is=1,so_grps
         do i=0,tally_size-1
            prob=so_scale(is)*so_tot_curr(is)/tot_scale_curr
            output_grp[is][i][o_mean]=output_grp[is][i][o_mean]*prob
            if (output_weight_grp[is] > zero) then
               output_grp[is][i][o_var]=output_grp[is][i][o_var]*prob**2/(output_weight_grp[is]-one)
            else
               assert(output_num_flights[is]==0 && output_grp[is][i][o_var]==zero)
               output_grp[is][i][o_var]=zero
            end if
         end do
      end do

      do i=0,tally_size-1
         do is=1,so_grps
            output_grp[is][i][o_var]=sqrt(output_grp[is][i][o_var])/max(abs(output_grp[is][i][o_mean]),const(1.0,-100))
            output_grp[is][i][o_mean]*=tot_scale_curr
         end do
      end do
/*
   Initialize EIRENE data arrays and convert DEGAS 2 relative standard
   deviations to standard error squared (the most convenient quantity for
   comparisons).
*/
      do is=1,so_grps
         do i=0,tally_size-1
            eir_grp[is][i][o_mean]=zero
            eir_grp[is][i][o_var]=zero
            output_grp[is][i][o_var]=(output_grp[is][i][o_var]*output_grp[is][i][o_mean])**2
         end do
      end do

      open(unit=diskin,file=file2,status='old',form='formatted')

      start_lines[1]=250  // Lines at top of file
      start_lines[2]=89   // Between stratum sections
      do is=1,so_grps     // Just do the two individual strata - skip total.

         write(stra_name,'(i2.2)') is   // To label output files
         do jline=1,start_lines[is]
            read(diskin,'(a)') line
         end do

         do i=1,13
            if (i == 1) then
               jscore=string_lookup('neutral density',tally_name,tl_num)
               species_ind=2    // test index for D  
               multiplier=sp_m(pr_test(species_ind))
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_test(species_ind)),
     $              ' neutral density'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)
               open(unit=diskout,file='nD'\/stra_name\/'_diff',
     $              status='unknown',form='formatted')
               rsd_min=zero                                    // D DENSITY
               rsd_max=const(2.,-1)
               call compare(output_grp[is][0][o_mean],eir_grp[is][0][o_mean],
     $            jscore,species_ind,rsd_min,rsd_max,diskout)
               close(unit=diskout)

            else if (i == 2) then
               jscore=string_lookup('neutral density',tally_name,tl_num)
               species_ind=3    // test index for D2   
               multiplier=sp_m(pr_test(species_ind))
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_test(species_ind)),
     $              ' neutral density'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)
               open(unit=diskout,file='nD2'\/stra_name\/'_diff',
     $              status='unknown',form='formatted')
               rsd_min=zero                                   // D2 DENSITY
               rsd_max=const(2.,-1)
               call compare(output_grp[is][0][o_mean],eir_grp[is][0][o_mean],
     $            jscore,species_ind,rsd_min,rsd_max,diskout)
               close(unit=diskout)

            else if (i == 3) then
               jscore=string_lookup('neutral density',tally_name,tl_num)
               species_ind=4    // test index for D2+   
               multiplier=sp_m(pr_test(species_ind))
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_test(species_ind)),
     $              ' neutral density'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)
               open(unit=diskout,file='nD2p'\/stra_name\/'_diff',
     $              status='unknown',form='formatted')
               rsd_min=zero                                    // D2+ DENSITY
               rsd_max=const(2.,-1)
               call compare(output_grp[is][0][o_mean],eir_grp[is][0][o_mean],
     $            jscore,species_ind,rsd_min,rsd_max,diskout)
               close(unit=diskout)
/*
   The source terms contain separate contributions due to atoms, molecules,
   and test ions. Each of these is read in and added into the total before
   the sum is compared with the DEGAS 2 values.
*/
            else if (i == 4) then     
               jscore=string_lookup('ion source rate',tally_name,tl_num)
               species_ind=2    // background index for D+   
               multiplier=sp_m(pr_test(species_ind))/electron_charge
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' source'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)

            else if (i == 5) then
               jscore=string_lookup('ion source rate',tally_name,tl_num)
               species_ind=2    // background index for D+   
               multiplier=sp_m(pr_test(species_ind))/electron_charge
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' source'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)

            else if (i == 6) then
               jscore=string_lookup('ion source rate',tally_name,tl_num)
               species_ind=2    // background index for D+   
               multiplier=sp_m(pr_test(species_ind))/electron_charge
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' source'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)
               open(unit=diskout,file='Sion'\/stra_name\/'_diff',
     $              status='unknown',form='formatted')
               rsd_min=zero                                  // D+ SOURCE
               rsd_max=const(2.,-1)
               call compare(output_grp[is][0][o_mean],eir_grp[is][0][o_mean],
     $            jscore,species_ind,rsd_min,rsd_max,diskout)
               close(unit=diskout)

            else if (i == 7) then
               jscore=string_lookup('ion energy source',tally_name,tl_num)
               species_ind=1    // background index for e 
               multiplier=one
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' energy source'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)

            else if (i == 8) then
               jscore=string_lookup('ion energy source',tally_name,tl_num)
               species_ind=2    // background index for D+  
               multiplier=one
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' energy source'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)

            else if (i == 9) then
               jscore=string_lookup('ion energy source',tally_name,tl_num)
               species_ind=1    // background index for e 
               multiplier=one
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' energy source'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)

            else if (i == 10) then
               jscore=string_lookup('ion energy source',tally_name,tl_num)
               species_ind=2    // background index for D+  
               multiplier=one
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' energy source'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)

            else if (i == 11) then
               jscore=string_lookup('ion energy source',tally_name,tl_num)
               species_ind=1    // background index for e 
               multiplier=one
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' energy source'
               call read_pair(species_ind,multiplier,jscore,diskin,eir_grp[is][0][o_mean],zone_map,mean_work)
               open(unit=diskout,file='SEe'\/stra_name\/'_diff',
     $              status='unknown',form='formatted')
               rsd_min=zero                               // ELECTRON ENERGY
               rsd_max=const(2.,-1)
               call compare(output_grp[is][0][o_mean],eir_grp[is][0][o_mean],
     $            jscore,species_ind,rsd_min,rsd_max,diskout)
               close(unit=diskout)

            else if (i == 12) then
               jscore=string_lookup('ion energy source',tally_name,tl_num)
               species_ind=2    // background index for D+  
               multiplier=one
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' energy source'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)
               open(unit=diskout,file='SEi'\/stra_name\/'_diff',
     $              status='unknown',form='formatted')
               rsd_min=zero                                    // ION ENERGY
               rsd_max=const(2.,-1)
               call compare(output_grp[is][0][o_mean],eir_grp[is][0][o_mean],
     $            jscore,species_ind,rsd_min,rsd_max,diskout)
               close(unit=diskout)

            else if (i == 13) then
               do jline=1,701                // Skip ``CX rate'' section
                  read(diskin,'(a)') line
               end do
               jscore=string_lookup('ion momentum source vector',
     $              tally_name,tl_num)
               species_ind=2    // background index for D+ 
               multiplier=const(1.,-5)/electron_charge
               write(stdout,*) ' DEGAS 2 ',sp_name(pr_background(species_ind)),
     $              ' momentum source'
               call read_pair(species_ind,multiplier,jscore,diskin,
     $              eir_grp[is][0][o_mean],zone_map,mean_work)
               call convert(species_ind,jscore,output_grp[is][0][o_mean])
               open(unit=diskout,file='Smp'\/stra_name\/'_diff',
     $              status='unknown',form='formatted')
               rsd_min=zero                                   // ION MOMENTUM
               rsd_max=const(2.,-1)
               call compare(output_grp[is][0][o_mean],eir_grp[is][0][o_mean],
     $            jscore,species_ind,rsd_min,rsd_max,diskout)
               close(unit=diskout)
            end if
         end do
      end do
         
      var_free(eir_all)
      var_free(eir_grp)
      var_free(zone_map)
      var_free(mean_work)

      return
      end

@ Read 2-D EIRENE data and its relative standard deviation. The input
variables required are:
\begin{description}
  \item[|species_ind|] Test or background index (hardwired) to be used
to access the appropriate section of the scoring data,
  \item[|multiplier|] Multiplier required to convert EIRENE data to
DEGAS 2 units. Also, all EIRENE data need to be multiplied by the zone volume,
  \item[|jscore|] DEGAS 2 tally number corresponding to this quantity,
  \item[|file_unit|] Unit number for EIRENE data file,
  \item[|eir_scores|] DEGAS 2 score array to hold EIRENE data,
  \item[|zone_map|] Inverse of the |zone_index| array,
  \item[|mean_work|] Local array to hold means until the relative
standard deviations can be read in. The two are used to replace the latter with
the standard error.
\end{description}

@<Functions...@>=
      subroutine read_pair(species_ind,multiplier,jscore,file_unit,
     $                     eir_scores,zone_map,mean_work)

      implicit_none_f77
      pr_common
      tl_common                                         // Common
      ou_common
      zn_common
      implicit_none_f90

      integer species_ind,jscore,file_unit              // Input
      
      real eir_scores[0:*][o_mean:o_var]

      real multiplier

      integer zone_map[output_index_2_min:output_index_2_max][output_index_1_min:output_index_1_max]

      real mean_work[output_index_2_min:output_index_2_max][output_index_1_min:output_index_1_max]

      integer ind_val[5],end_lines[0:1],iy_val[32]       // Local

      integer i,ic,imom,ix,iy

      real slice[32]

      character*80 line

      @<Memory allocation interface@>
      st_decls

      assert(output_index_1_min == 1)
      assert(output_index_1_max == 64)
      assert(output_index_2_min == 1)
      assert(output_index_2_max == 32)

      ind_val[2]=species_ind-1
      ind_val[3]=0
      ind_val[4]=0
      ind_val[5]=0
      ic=1              // Use first component for vector scores
      end_lines[0]=52   // Number of lines at end of each moment section
      end_lines[1]=17
      do imom=o_mean,o_var
         do i=1,10
            read(file_unit,'(a)') line
         end do
         do ix=1,64
            read(file_unit,'(a)') line
            read(file_unit,*) SP (iy_val[iy],slice[iy],iy=1,32)
            do iy=1,32
               ind_val[1]=zone_map[iy][ix]-1
               if (imom == o_mean) then
                  eir_scores[out_array_index(ic,ind_val,jscore)][o_mean]
     $                 +=slice[iy]
     $                 *zn_volume(zone_map[iy][ix])*const(1.,6)*multiplier
                  mean_work[iy][ix]=slice[iy]
     $                 *zn_volume(zone_map[iy][ix])*const(1.,6)*multiplier
               else if (imom == o_var) then
                  eir_scores[out_array_index(ic,ind_val,jscore)][o_var]
     $                 +=(slice[iy]*const(1.,-2)*mean_work[iy][ix])**2
               end if
            end do
            read(file_unit,'(a)') line
            read(file_unit,'(a)') line
         end do
         do i=1,end_lines[imom]
            read(file_unit,'(a)') line
         end do
      end do

      return
      end

@ Compare DEGAS 2 and EIRENE values for a variable. The new input variables
here are:
\begin{description}
  \item[|rsd_min|] Intended to serve as a minimum value on the relative 
standard deviation. I.e., the denominator in the relative difference is
the maximum of this and the actual r.s.d.
  \item[|rsd_max|] Despite the similar name, is an unrelated quantity.
Only points with r.s.d.'s less than this value are tabulated. The objective
is to isolate points with enough scores for the central limit theorem to
apply.
\end{description}

@<Functions...@>=
      subroutine compare(d2_scores,eir_scores,jscore,species_ind,rsd_min,
     $           rsd_max,file_out)

      implicit_none_f77
      pr_common                                    // Common
      tl_common
      zn_common
      implicit_none_f90
                                                   // Input
      real d2_scores[0:*][o_mean:o_var],eir_scores[0:*][o_mean:o_var]

      real rsd_min,rsd_max

      integer jscore,species_ind,file_out
                                                   // Local
      integer ic,zone,ifull,bins1,bins2,bins3,bins_else,bins_tot
      
      integer ind_val[5]

      real rel_diff

      @<Memory allocation interface@>

      ind_val[2]=species_ind-1
      ind_val[3]=0
      ind_val[4]=0
      ind_val[5]=0
      ic=1               // Use first component for vector scores
      bins1=0
      bins2=0
      bins3=0
      bins_else=0
      bins_tot=0

      do zone=1,zn_num
         if (zone_type[zone] == zn_plasma) then
            ind_val[1]=zone-1
            ifull=out_array_index(ic,ind_val,jscore)
            if (d2_scores[ifull][o_mean] != zero 
     $           && eir_scores[ifull][o_mean] != zero) then
               if (sqrt(d2_scores[ifull][o_var])/abs(d2_scores[ifull][o_mean]) 
     $              < rsd_max
     $         && sqrt(eir_scores[ifull][o_var])/abs(eir_scores[ifull][o_mean])
     $              < rsd_max) then
                  rel_diff=abs(d2_scores[ifull][o_mean]
     $                          -eir_scores[ifull][o_mean])
     $            /max(sqrt(d2_scores[ifull][o_var]+eir_scores[ifull][o_var]),
     $                  rsd_min*half*(abs(d2_scores[ifull][o_mean])
     $                    +abs(eir_scores[ifull][o_mean])))
                  write(file_out,'(2x,i5,2x,1pe12.5)') zone,rel_diff
                  bins_tot++
                  if (rel_diff <= one) then    // Values within 1 std. err.
                     bins1++
                  else if (rel_diff <= two) then  // Between 1 and 2,
                     bins2++
                  else if (rel_diff <= const(3.,0)) then  // And 2 and 3,
                     bins3++
                  else 
                     bins_else++
                  end if
               end if
            end if
         end if
      end do

      write(stdout,'(2x,i5,2x,3(f6.2,2x))') bins_tot,
     $     const(1.,2)*areal(bins1)/areal(max(bins_tot,1)),
     $     const(1.,2)*areal(bins1+bins2)/areal(max(bins_tot,1)),
     $     const(1.,2)*areal(bins1+bins2+bins3)/areal(max(bins_tot,1))

      return
      end

@ Convert DEGAS 2 cartesian momentum components into parallel momentum prior
to comparison.

@<Functions...@>=
      subroutine convert(species_ind,jscore,scores)

      implicit_none_f77
      pr_common                                   // Common
      tl_common
      ou_common
      zn_common
      implicit_none_f90

      real scores[0:*][o_mean:o_var]              // Input

      integer species_ind,jscore

      integer ind_val[5]                          // Local

      integer zone,ifull1,ifull2,ifull3

      @<Memory allocation interface@>

      ind_val[2]=species_ind-1
      ind_val[3]=0
      ind_val[4]=0
      ind_val[5]=0

      do zone=1,zn_num
         if (zone_type[zone] == zn_plasma) then
            ind_val[1]=zone-1
            ifull1=out_array_index(1,ind_val,jscore)
            ifull2=out_array_index(2,ind_val,jscore)
            ifull3=out_array_index(3,ind_val,jscore)
            scores[ifull1][o_mean]=const(6.,-2)*scores[ifull3][o_mean]
     $           + sqrt(one-const(6.,-2)**2)*scores[ifull2][o_mean]
            scores[ifull1][o_var]=scores[ifull2][o_var]   // Approx.
         end if
      end do

      return
      end
