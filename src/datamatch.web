\Title{datamatch}

@* A program to compare two data files. Simple initial version to see
if this is worthwhile.

@m FILE 'datamatch.web'

@I macros.hweb
@I xsection.hweb
@I netcdf.hweb
@I sysdep.hweb
@I string.hweb

@ The main program.

@a
      program datamatch
      implicit_none_f77
      xs_common
      implicit_none_f90
      xs_decls
      character*LINELEN line    // Local
      character*FILELEN tempfile1

      integer length,p,b,e
      integer fileid

      xs_ncdecl
      nc_decls
      @<Memory allocation interface@>
      st_decls

      write(stdout,*)
      write(stdout,*) 'Enter first file name'

      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      tempfile1 = line(b:e)

      fileid = ncopen(tempfile1,NC_NOWRITE,nc_stat)
      xs_ncread(fileid)
      call ncclose(fileid,nc_stat)

      call cont_data_match

eof:  continue

      stop
      end

      @<Functions and Subroutines@>

@ Read in second file and match to first. Have to do this in a separate
subroutine so that we will have read in the length of the local array
|data_tab1| by the time this routine is called.

@<Functions...@>=
      subroutine cont_data_match

      define_varp(data_tab1,FLOAT,xs_data_ind)

      implicit_none_f77
      xs_common
      implicit_none_f90
      xs_decls
      character*LINELEN line    // Local
      character*FILELEN tempfile2

      integer length,p,b,e,fileid
      integer i_max_diff,i,data_size1
      real max_diff,diff,avg

      xs_ncdecl
      nc_decls
      @<Memory allocation interface@>
      st_decls

      declare_varp(data_tab1)
      var_alloc(data_tab1)

      do i=0,xs_data_size
         data_tab1[i]=xs_data_tab[i]
      end do
      data_size1=xs_data_size

      write(stdout,*) 'Enter second file name'
      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      tempfile2 = line(b:e)

      fileid = ncopen(tempfile2,NC_NOWRITE,nc_stat)
      xs_ncread(fileid)
      call ncclose(fileid,nc_stat)

      assert(xs_data_size == data_size1)

      max_diff=zero
      i_max_diff=0
      do i=0,xs_data_size-1
         if (data_tab1[i] != zero && data_tab1[i] != real_undef
     $        && data_tab1[i] != real_unused 
     $        && data_tab1[i]   != real_uninit) then
            if (xs_data_tab[i] != zero && xs_data_tab[i] != real_undef
     $        && xs_data_tab[i] != real_unused 
     $           && xs_data_tab[i] != real_uninit) then
               diff=abs(data_tab1[i]-xs_data_tab[i])
               avg=half*(abs(data_tab1[i])+abs(xs_data_tab[i]))
               assert(avg > zero)
               if (diff/avg > max_diff) then
                  i_max_diff=i
                  max_diff=diff/avg
               end if
            else
               write(stdout,*) 'i = ',i,': data 1 = ',data_tab1[i],
     $              ', data 2 = ',xs_data_tab[i]
            end if
         else
            if (data_tab1[i] != xs_data_tab[i]) then
               write(stdout,*) 'i = ',i,': data 1 = ',data_tab1[i],
     $              ', data 2 = ',xs_data_tab[i]
            end if
         end if
      end do

      write(stdout,*) ' Max. difference = ',max_diff,', at i = ',i_max_diff

eof:  continue

         return
         end


 
