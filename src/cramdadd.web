% $Id: c702951b070dfaa9084cb92cd98ca39fe6db5b64 $
\Title{cramdadd}

@* Calculate CRAMD Data. 

\ID{$Id: c702951b070dfaa9084cb92cd98ca39fe6db5b64 $ }

Use Pigarov's Collisional-Radiative Atomic and
Molecular Data code to generate CR rates and miscellaneous data for a 
specific problem. Because of the complexity of the CR model, the data
are best represented as a function of position, rather than an N-dimensional
table, where N could well be 10 or even more. This code reads in the plasma
data for a specific problem (i.e., the background class), loops through
each plasma zone (the geometry is read in just to get the number of zones
explicitly), and calls CRAMD at each point. The ``problem'' file is also
read in at the start; at this point, entries corresponding to the CRAMD
data have been made in the problem file and in the reactions list. However,
the data in those tables are just placeholders, their locations denoted 
by |eval_name| = ``cramd''. In this code, the data table array is 
reallocated to make room for the data (the number of data values is
problem-specific) and the new data are added in following the loop over
zones. Finally, the problem file is written out again and the code run
can proceed normally.

Presently, this program is set up to correspond explicitly to the version of
CRAMD which treats H atoms and molecules. There are consequently a number
of hardwired components:
\begin{itemize}
  \item Input to CRAMD, |plasma_parameters| array. Its contents are described
        below. Its dimension |num_plasma_param| and the constants
        used to fill it are also hardwired.
  \item Output is also hardwired. See CRAMD.readme for more details.
\end{itemize}


@m FILE 'cramdadd.web'

@I macros.hweb
@I reactiondata.hweb
@I readfilenames.hweb
@I zone.hweb
@I xsection.hweb
@I problem.hweb
@I background.hweb
@I sysdep.hweb
@I reaction.hweb
@I string.hweb
@I species.hweb
@I materials.hweb

@m tmp_rate(i,j,k,r) tmp_rr_tab[tmp_rr_base[r]+i+tmp_rr_tab_index[r][1]*(j+tmp_rr_tab_index[r][2]*k)]
@m tmp_handling(i,j,k,d,r) tmp_rh_tab[tmp_rh_base[r][d]+i+tmp_rh_tab_index[r][d][1]*(j+tmp_rh_tab_index[r][d][2]*k)]

@m CRAMD 0      // Set to 1 to enable actual CRAMD calls (library is required!)

@m bt const(2.0)
@m h_of const(1.0)
@m cha const(0.1)
@m cta const(1.0)
@m chm const(0.1)
@m ctm const(0.5)
@m num_plasma_params 9
@m num_output_params 20
@m num_test_species 2

@ The main program.

@a
      @<Functions and subroutines@>

@ Add CRAMD Data to problem data.

@<Functions...@>=
      subroutine add_cramd_data

      define_varp(tmp_rr_tab_index,INT,rd_rank_ind,problem_reaction_ind)
      define_varp(tmp_rr_base,INT,problem_reaction_ind)
      define_varp(tmp_rr_tab,FLOAT,rd_table_ind)
      define_varp(tmp_rh_tab_index,INT,rd_rank_ind,rd_dep_var_ind,problem_reaction_ind)
      define_varp(tmp_rh_base,INT,rd_dep_var_ind,problem_reaction_ind)
      define_varp(tmp_rh_tab,FLOAT,rd_handling_table_ind)

      implicit_none_f77
      rd_common
      zn_common
      pr_common
      bk_common
      rc_common
      sp_common
      rf_common
      implicit_none_f90

      rd_decls
      integer pr_reac, jdep, jrank, i, j, k, i_elec, i_ion,
     $        pr_reac_eion, jd_eion_e_los, jd_eion_ha, pr_reac_iion, 
     $        jd_iion_e_los, pr_reac_rec, jd_rec_ha, jd_rec_e_los, 
     $        jd_rec_e_src, pr_reac_dis, jd_dis_hf, jd_dis_ha, 
     $        jd_dis_e_los, jd_dis_i_los, jd_dis_mar, zone, ierr
      real n_ion, t_ion, t_elec
      real output_data[num_output_params,num_test_species]
      character*LINELEN cwd
      character*FILELEN tempfile

      integer tmp_rr_size

      integer tmp_rh_size

@#if ALPHA && CRAMD
      external cramd_ini
@#endif
      integer cramd_ini

c      integer tmp_rr_tab_index[pr_reaction_num][xs_table_rank_max]
c      integer tmp_rr_base[pr_reaction_num]
c      real tmp_rr_tab[0:reaction_rate_size-1]

c      integer tmp_rh_tab_index[pr_reaction_num][rd_dep_var_max][xs_table_rank_max]
c      integer tmp_rh_base[pr_reaction_num][rd_dep_var_max]
c      real tmp_rh_tab[0:reaction_handling_size-1]

      declare_varp(tmp_rr_tab_index)
      declare_varp(tmp_rr_base)
      declare_varp(tmp_rr_tab)
      declare_varp(tmp_rh_tab_index)
      declare_varp(tmp_rh_base)
      declare_varp(tmp_rh_tab)

      @<Memory allocation interface@>
      st_decls

      do pr_reac=1,pr_reaction_num
         if (reaction_rate_eval_name[pr_reac] == 'cramd') 
     $        goto break
      end do
      return       // No CRAMD data
break: continue    // Have CRAMD data

// SHOULD CHANGE background.hweb!!!
// I.e., the dimension of the background arrays should be expressly zn_num,
// not just the number of plasma zones. Since in general the plasma zones
// are mixed in with the others, shortening the background arrays implies
// a different (and confusing) index for a given plasma zone to be used in
// referencing a background array than with the geometry zone.

      var_alloc(tmp_rr_tab_index)
      var_alloc(tmp_rr_base)
      var_alloc(tmp_rr_tab)
      var_alloc(tmp_rh_tab_index)
      var_alloc(tmp_rh_base)
      var_alloc(tmp_rh_tab)

      tmp_rr_size=reaction_rate_size
      tmp_rh_size=reaction_handling_size
      do pr_reac=1,pr_reaction_num

         tmp_rr_base[pr_reac]=reaction_rate_base[pr_reac]
         do jrank=1,xs_table_rank_max
            tmp_rr_tab_index[pr_reac][jrank]=reaction_rate_tab_index[pr_reac][jrank]
         end do
         do k=0,reaction_rate_tab_index[pr_reac][3]-1
            do j=0,reaction_rate_tab_index[pr_reac][2]-1
               do i=0,reaction_rate_tab_index[pr_reac][1]-1
                  tmp_rate(i,j,k,pr_reac)=rd_rate(i,j,k,pr_reac)
               end do
            end do
         end do

         do jdep=1,rd_dep_var_max
            tmp_rh_base[pr_reac][jdep]=reaction_handling_base[pr_reac][jdep]
            do jrank=1,xs_table_rank_max
               tmp_rh_tab_index[pr_reac][jdep][jrank]=reaction_handling_tab_index[pr_reac][jdep][jrank]
            end do
            do k=0,reaction_handling_tab_index[pr_reac][jdep][3]-1
               do j=0,reaction_handling_tab_index[pr_reac][jdep][2]-1
                  do i=0,reaction_handling_tab_index[pr_reac][jdep][1]-1
                     tmp_handling(i,j,k,jdep,pr_reac)=rd_handling(i,j,k,jdep,pr_reac)
                  end do
               end do
            end do
         end do
      end do
      
      var_free(reaction_rate_tab)
      var_free(reaction_handling_tab)

      rd_ragged_alloc(reaction_rate)
      rd_ragged_alloc(reaction_handling)
      do pr_reac=1,pr_reaction_num
         if (reaction_rate_eval_name[pr_reac] == 'cramd')
     $        reaction_rate_tab_index[pr_reac][1]=zn_num
         rd_ragged_realloc(reaction_rate,reaction_rate_tab_index,[pr_reac])
         do jdep=1,rd_dep_var_max
            if (reaction_handling_eval_name[pr_reac][jdep] == 'cramd')
     $           reaction_handling_tab_index[pr_reac][jdep][1]=zn_num
            rd_ragged_realloc(reaction_handling,reaction_handling_tab_index,[pr_reac][jdep])
         end do
      end do

/* Replace old data first */

      do pr_reac=1,pr_reaction_num
         if (reaction_rate_eval_name[pr_reac] != 'cramd') then
            do k=0,reaction_rate_tab_index[pr_reac][3]-1
               do j=0,reaction_rate_tab_index[pr_reac][2]-1
                  do i=0,reaction_rate_tab_index[pr_reac][1]-1
                     rd_rate(i,j,k,pr_reac)=tmp_rate(i,j,k,pr_reac)
                  end do
               end do
            end do
         end if

         do jdep=1,rd_dep_var_max
            if (reaction_handling_eval_name[pr_reac][jdep] != 'cramd') then
               do k=0,reaction_handling_tab_index[pr_reac][jdep][3]-1
                  do j=0,reaction_handling_tab_index[pr_reac][jdep][2]-1
                     do i=0,reaction_handling_tab_index[pr_reac][jdep][1]-1
                        rd_handling(i,j,k,jdep,pr_reac)=tmp_handling(i,j,k,jdep,pr_reac)
                     end do
                  end do
               end do
            end if
         end do
      end do
/* Loop over zones, calculate CRAMD data and insert into data tables.
   Contents of |plasma_parameters| are (constant multipliers are defined
   as macros at top of file):
 */

/* Background species */

      i_elec=pr_background_lookup(sp_lookup('e'))
      i_ion=pr_background_lookup(sp_lookup('D+'))
      assert(sp_check(i_elec) && sp_check(i_ion))

/* Determine array indices corresponding to CRAMD reactions and dependent
   variables.
 */

      pr_reac_eion=int_lookup(rc_lookup('heioncramd'),
     $     problem_rc,pr_reaction_num)
      if (pr_reac_eion != 0) then
         jd_eion_ha=string_lookup('emission_rate_H_alpha',
     $        reaction_handling_var0[1,pr_reac_eion],rd_dep_var_max)
         jd_eion_e_los=string_lookup('background_energy_loss_rate',
     $        reaction_handling_var0[1,pr_reac_eion],rd_dep_var_max)
      end if

      pr_reac_iion=int_lookup(rc_lookup('hiioncramd'),
     $     problem_rc,pr_reaction_num)
      if (pr_reac_iion != 0) then
         jd_iion_e_los=string_lookup('background_energy_loss_rate',
     $        reaction_handling_var0[1,pr_reac_iion],rd_dep_var_max)
      end if

      pr_reac_rec=int_lookup(rc_lookup('herecramd'),
     $     problem_rc,pr_reaction_num)
      if (pr_reac_rec != 0) then
         jd_rec_ha=string_lookup('emission_rate_H_alpha',
     $        reaction_handling_var0[1,pr_reac_rec],rd_dep_var_max)
         jd_rec_e_los=string_lookup('background_energy_loss_rate',
     $        reaction_handling_var0[1,pr_reac_rec],rd_dep_var_max)
         jd_rec_e_src=string_lookup('background_energy_source_rate',
     $        reaction_handling_var0[1,pr_reac_rec],rd_dep_var_max)
      end if

      pr_reac_dis=int_lookup(rc_lookup('h2discramd'),
     $     problem_rc,pr_reaction_num)
      if (pr_reac_dis != 0) then
         jd_dis_hf=string_lookup('H_fraction',
     $        reaction_handling_var0[1,pr_reac_dis],rd_dep_var_max)
         jd_dis_ha=string_lookup('emission_rate_H_alpha',
     $        reaction_handling_var0[1,pr_reac_dis],rd_dep_var_max)
         jd_dis_e_los=string_lookup('background_energy_loss_rate',
     $        reaction_handling_var0[1,pr_reac_dis],rd_dep_var_max)
         jd_dis_i_los=string_lookup('proton_energy_loss_rate',
     $        reaction_handling_var0[1,pr_reac_dis],rd_dep_var_max)
         jd_dis_mar=string_lookup('mar_rate',
     $        reaction_handling_var0[1,pr_reac_dis],rd_dep_var_max)
      end if

      call get_cwd(cwd)
      cwd=trim(cwd)\/'/../CRAMD/DATA/'
      call null_terminate(cwd)
@#if ALPHA && CRAMD
      ierr=cramd_ini(cwd)
@#else
      assert("CRAMD only available on DEC-Alpha" == " ")
@#endif
      assert(ierr == 0)

      do zone=1,zn_num
         if (zn_type(zone) == zn_plasma) then
            n_ion=bk_n(i_ion,zone)
            t_ion=bk_temp(i_ion,zone)
            t_elec=bk_temp(i_elec,zone)
            
            call cramd_do_fort(n_ion,t_ion,t_elec,output_data)

/* Hardwired transfers using above-defined indices and
   knowledge of contents of |output_data|. Factor in units
   conversions to bring everything into MKS units.
 */
            if (pr_reac_eion != 0) then
               rd_rate(zone-1,0,0,pr_reac_eion)=
     $              output_data[1][1]*const(1.,-6)
               rd_handling(zone-1,0,0,jd_eion_ha,pr_reac_eion)=
     $              output_data[1][6]*const(1.,-6)*electron_charge
               rd_handling(zone-1,0,0,jd_eion_e_los,pr_reac_eion)=
     $              output_data[1][3]*const(1.,-6)*electron_charge
            end if

            if (pr_reac_iion != 0) then
               rd_rate(zone-1,0,0,pr_reac_iion)=
     $              output_data[1][2]*const(1.,-6)
               rd_handling(zone-1,0,0,jd_iion_e_los,pr_reac_iion)=
     $              output_data[1][4]*const(1.,-6)*electron_charge
            end if

            if (pr_reac_rec != 0) then
               rd_rate(zone-1,0,0,pr_reac_rec)=
     $              output_data[1][7]*const(1.,-6)
               rd_handling(zone-1,0,0,jd_rec_ha,pr_reac_rec)=
     $              output_data[1][15]*const(1.,-6)*electron_charge
               rd_handling(zone-1,0,0,jd_rec_e_los,pr_reac_rec)=
     $              output_data[1][8]*const(1.,-6)*electron_charge
               rd_handling(zone-1,0,0,jd_rec_e_src,pr_reac_rec)=
     $              output_data[1][13]*const(1.,-6)*electron_charge
            end if

            if (pr_reac_dis != 0) then
               rd_rate(zone-1,0,0,pr_reac_dis)=
     $              output_data[2][1]*const(1.,-6)
               if (jd_dis_hf != 0) 
     $              rd_handling(zone-1,0,0,jd_dis_hf,pr_reac_dis)=
     $              output_data[2][3] 
               if (jd_dis_ha != 0) 
     $              rd_handling(zone-1,0,0,jd_dis_ha,pr_reac_dis)=
     $              output_data[2][8]*const(1.,-6)*electron_charge
               if (jd_dis_e_los != 0) 
     $              rd_handling(zone-1,0,0,jd_dis_e_los,pr_reac_dis)=
     $              output_data[2][5]*const(1.,-6)*electron_charge
               if (jd_dis_i_los != 0)
     $              rd_handling(zone-1,0,0,jd_dis_i_los,pr_reac_dis)=
     $              output_data[2][6]*const(1.,-6)*electron_charge
               if (jd_dis_mar != 0)
     $              rd_handling(zone-1,0,0,jd_dis_mar,pr_reac_dis)=
     $              output_data[2][2]*const(1.,-6)
            end if
            
         end if
      end do
      
@#if ALPHA && CRAMD
      call cramd_finish()
@#else
      assert("CRAMD only available on DEC-Alpha" == " ")
@#endif

      do pr_reac=1,pr_reaction_num
         if (reaction_rate_eval_name[pr_reac] == 'cramd')
     $        reaction_rate_eval_name[pr_reac]='table'
         do jdep=1,rd_dep_var_max
            if (reaction_handling_eval_name[pr_reac][jdep] == 'cramd') 
     $           reaction_handling_eval_name[pr_reac][jdep]='table'
         end do
      end do
                     
      var_free(tmp_rr_tab_index)
      var_free(tmp_rr_base)
      var_free(tmp_rr_tab)
      var_free(tmp_rh_tab_index)
      var_free(tmp_rh_base)
      var_free(tmp_rh_tab)

      tempfile=filenames_array[problemfile]
      filenames_array[problemfile]=filenames_array[cramdproblemfile]
      call nc_write_problem
      filenames_array[problemfile]=tempfile

      return
      end

@ Simple CRAMD FORTRAN Interface.

@<Functions...@>=
      subroutine cramd_do_fort(n_ion,t_ion,t_elec,output_data)
      implicit_none_f77
      implicit_none_f90

      real n_ion,t_ion,t_elec                                 // Input
      real output_data[num_output_params,num_test_species]    // Output
      real plasma_parameters[num_plasma_params]               // Local
      real n_i_norm,t_e_norm,t_i_norm
      integer ierr, i, j

@#if ALPHA && CRAMD
      external cramd_do
@#endif
      integer cramd_do

/* Hardwire Sasha's input normalizations */
      n_i_norm=n_ion*const(1.,-19)
      t_i_norm=t_ion/electron_charge
      t_e_norm=t_elec/electron_charge

      plasma_parameters[1]=bt
      plasma_parameters[2]=h_of
      plasma_parameters[3]=t_e_norm
      plasma_parameters[4]=cha*n_i_norm
      plasma_parameters[5]=cta*t_i_norm
      plasma_parameters[6]=n_i_norm
      plasma_parameters[7]=t_i_norm
      plasma_parameters[8]=chm*n_i_norm
      plasma_parameters[9]=ctm*t_i_norm

@#if ALPHA && CRAMD
      ierr=cramd_do(plasma_parameters,output_data)
@#else
      assert("CRAMD only available on DEC-Alpha" == " ")
@#endif
      assert(ierr==0)
/* And undo his output normalizations. Things should
   now be in cm$^{3}/$s and eV cm$^{3}/$s.
 */
      do i=1,num_test_species
         do j=1,num_output_params
/* Exclude dissociation H- and H$^{+}$-fractions */
            if (i != 2 || (j != 3 && j != 4)) then
               output_data[i][j]*=const(1.,-8)
            end if
         end do
      end do
      
      return
      end

@* INDEX.
