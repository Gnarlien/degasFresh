% $Id: 39184eb7953f109053db62bffad8bd44a0c6bba3 $
\Title{statistics}


@* Introduction.

\ID{$Id: 39184eb7953f109053db62bffad8bd44a0c6bba3 $}

Routines for accumulating statistics.

@m FILE 'stat.web'

@I macros.hweb
@I output.hweb
@I stat.hweb
@I problem.hweb

@ The unnamed module.

@a
@<Functions and Subroutines@>

@ Accumulate scores into a base.

The arguments to this routine consist of a set of ``increment''
and ``base'' arrays, each having an associated mean, variance, and weight.
The accumulation procedure is complicated by the need to compress
the data arrays to avoid needless manipulation, storage, and
transmission of zero entries.  The machinery for doing this
is described in more detail in the documentation of the
|sa| package.

The expressions used for the mean is effectively:
\begin{equation}
S_{1}^{i}(z) = \sum_{j = 1}^{N_{i}} \rho_{j} \left (
\sum_{k \in z} \xi_{j,k} \right ) / \sum_{j = 1}^{N_{i}} \rho_{j},
\label{mean1}
\end{equation}
where: $i$ is the source group index, the ``1'' refers to the
first statistical moment, $j$ runs over all of the
$N_{i}$ flights in group $i$, $\rho_{j}$ is the relative
statistical weight of flight $j$, $k$ is the list of scores
by flight $j$ in zone $z$, and $\xi_{j,k}$ is the estimator
value 
for this tally recorded by flight $j$ during event $k$.
The statistical weight $\rho_{j} \equiv 1$ in most cases.

The corresponding variance expression is:
\begin{equation}
S_{2}^{i}(z) = \sum_{j = 1}^{N_{i}} \rho_{j} \left (
\sum_{k \in z} \xi_{j,k} \right )^{2} / \sum_{j = 1}^{N_{i}} \rho_{j}
- \left [ \sum_{j = 1}^{N_{i}} \rho_{j} \left (
\sum_{k \in z} \xi_{j,k} \right ) / \sum_{j = 1}^{N_{i}} \rho_{j} \right ]^{2}.
\label{var1}
\end{equation}

The equivalence between these expressions and the ones actually used
in this code is discussed in the Users Manual.  

@<Functions...@>=

      subroutine stat_acc(inc_compress,inc_wt,inc_size,inc_dim,inc_stat,
     $    inc_pf_dim,inc_ptr2full,inc_ps_dim,inc_ptr2short,
     $    base_compress,base_wt_tot,base_size,base_dim,base_stat,
     $    base_pf_dim,base_ptr2full,base_ps_dim,base_ptr2short,
     $    base_wt_dim,base_wt)

      implicit_none_f77
      implicit_none_f90
      integer inc_size,inc_dim,inc_pf_dim,inc_ps_dim,         // Input
     $        inc_compress,base_compress     
      integer inc_ptr2full[0:inc_pf_dim-1],inc_ptr2short[0:inc_ps_dim-1]
      real inc_wt
      real inc_stat[0:inc_dim-1][o_mean:o_var]
      integer base_size,base_dim,base_pf_dim,base_ps_dim,     // Input/Output
     $        base_wt_dim
      integer base_ptr2full[0:base_pf_dim-1],base_ptr2short[0:base_ps_dim-1]
      real base_wt_tot
      real base_stat[0:base_dim-1][o_mean:o_var],base_wt[0:base_wt_dim-1]

      integer i_inc,ifull,i_base                              // Local
      real b_wt,tot_wt,ma

      if (!(inc_wt >= zero)) then
         write(stderr,*) ' Bad value of inc_wt = ',inc_wt
         write(stderr,*) ' inc_size = ',inc_size
         call flush(stderr)
         assert(inc_wt >= zero)
      end if
      assert(base_wt_tot >= zero)
      assert(inc_size >= 0)

      do i_inc=0,inc_size-1
         if (inc_compress == TRUE) then
            ifull=inc_ptr2full[i_inc]
         else
            ifull=i_inc
         end if
         if (base_compress == TRUE) then
            if (base_ptr2short[ifull] == int_uninit) then
               base_size++
               i_base=base_size-1
               base_ptr2full[i_base]=ifull
               base_ptr2short[ifull]=i_base
               base_stat[i_base][o_mean]=zero
               base_stat[i_base][o_var]=zero
               base_wt[i_base]=zero
            else
               i_base=base_ptr2short[ifull]
            end if
            b_wt=base_wt[i_base]
         else
            i_base=ifull
            if (inc_compress == TRUE) then
               b_wt=base_wt[i_base]
            else
               b_wt=base_wt_tot
            end if
         end if
         tot_wt=b_wt+inc_wt
         ma=base_stat[i_base][o_mean]
     $       +(inc_stat[i_inc][o_mean]-base_stat[i_base][o_mean])*inc_wt/tot_wt

@#if 0
// Move the ``-1'' factor to |flighttest.web|, as the last step.
         base_stat[i_base][o_var]=
     $        (b_wt-one)*base_stat[i_base][o_var]
     $        +(inc_wt-one)*inc_stat[i_inc][o_var]
     $        +(inc_stat[i_inc][o_mean]-base_stat[i_base][o_mean])
     $        *(inc_stat[i_inc][o_mean]-ma)*inc_wt
// Previous:         if (|tot_wt| > one) then    Temporary kludge:
         if (tot_wt > one && base_stat[i_base][o_var] > zero) then
            base_stat[i_base][o_var]=base_stat[i_base][o_var]/(tot_wt-one)
         else
            base_stat[i_base][o_var]=zero         // Strictly, is infinite
         end if
@#endif
         base_stat[i_base][o_var]=
     $        b_wt*base_stat[i_base][o_var]
     $        +inc_wt*inc_stat[i_inc][o_var]
     $        +(inc_stat[i_inc][o_mean]-base_stat[i_base][o_mean])
     $        *(inc_stat[i_inc][o_mean]-ma)*inc_wt
         if (tot_wt > zero && base_stat[i_base][o_var] > zero) then
            base_stat[i_base][o_var]=base_stat[i_base][o_var]/tot_wt
         else
            base_stat[i_base][o_var]=zero         // Strictly, is infinite
         end if
         base_stat[i_base][o_mean]=ma
         if (inc_compress == TRUE) base_wt[i_base]=tot_wt

                                                       // Re-initialize
         if (inc_compress == TRUE) inc_ptr2short[ifull]=int_uninit
         
      end do

      if (inc_compress == TRUE) then
         inc_size=0
      else
         do i_inc=0,inc_size-1
            inc_stat[i_inc][o_mean]=zero
            inc_stat[i_inc][o_var]=zero
         end do
      end if

      base_wt_tot+=inc_wt
      inc_wt=zero

      return
      end

@ Account for weights of zero-scores.

@<Functions...@>=
      subroutine stat_wt_balance(wt_tot,size,dim,stat,wt_dim,wt)

      implicit_none_f77
      implicit_none_f90
      integer size,dim,wt_dim                             // Input   
      real wt_tot                                      
      real stat[0:dim-1][o_mean:o_var],wt[0:wt_dim-1]     // Input/Output
      integer i                                           // Local

      assert(wt_tot > zero)    // was $ > one$
      assert(wt_dim == dim)

      do i=0,size-1
         if (wt[i] > zero && wt[i] < wt_tot) then
@#if 0
            stat[i][o_var]=stat[i][o_var]*(wt[i]-one)/(wt_tot-one)
     $           + stat[i][o_mean]**2 * wt[i] * (wt_tot-wt[i]) 
     $                                             / (wt_tot * (wt_tot-one))
@#endif
            stat[i][o_var]=stat[i][o_var]*wt[i]/wt_tot
     $           + stat[i][o_mean]**2 * wt[i] * (wt_tot-wt[i]) 
     $                                             / (wt_tot * wt_tot)

            stat[i][o_mean]*=wt[i]/wt_tot        // Must do |o_var| first!
         end if
@#if 0
/* 
   Zero this explicitly in the calling routines at the top of the do loops
   so its value can be retained elsewhere.
*/
         wt[i]=zero
@#else
         wt[i]=wt_tot
@#endif
      end do

      return
      end

@ Reinitialize a scoring array.  Made into a subroutine to allow use
for any set of scoring arrays.  Subroutine |stat_acc| also does this
explicitly, but need to re-initialize the final set of scoring data
on slaves after they have sent data.

@<Functions...@>=
      subroutine stat_zero(wt_tot,compress,size,ps_dim,ptr2short,dim,stat)
      implicit_none_f77
      implicit_none_f90

      integer compress,size,ps_dim,dim             // Input
      integer ptr2short[0:ps_dim-1]
      real wt_tot
      real stat[0:dim-1][o_mean:o_var]

      integer i                                    // Local
      wt_tot=zero
      if (compress == TRUE) then
         size=0
         do i=0,ps_dim-1
            ptr2short[i]=int_uninit
         end do
      end if
      if (compress == FALSE) then 
         do i=0,dim-1
            stat[i][o_mean]=zero
            stat[i][o_var]=zero
         end do
      end if

      return
      end

@ Allocate and initialize local scoring arrays and their pointers.

@<Functions...@>=
      subroutine stat_init

      implicit_none_f77
      sa_common
      pr_common
      tl_common
      implicit_none_f90

      integer i                                     // Local

      @<Memory allocation interface@>

      stat_wt_tot_flt=zero
      if (stat_comp_flt == TRUE) then
         stat_size_flt=0
         stat_dim_flt=stat_mem_inc_flt
         stat_pf_dim_flt=stat_dim_flt
         stat_ps_dim_flt=tally_size
      else
         stat_size_flt=tally_size
         stat_dim_flt=tally_size
         stat_pf_dim_flt=1
         stat_ps_dim_flt=1
      end if
      var_alloc(stat_flt)
      var_alloc(stat_ptr2full_flt)
      var_alloc(stat_ptr2short_flt)

      if (stat_comp_flt == FALSE) then   // "TRUE" initializations done on fly
         do i=0,stat_dim_flt-1
            stat_flt[i][o_mean]=zero
            stat_flt[i][o_var]=zero
         end do
      end if

      stat_wt_tot_frag=zero
      if (stat_comp_frag == TRUE) then
         stat_size_frag=0
         stat_dim_frag=stat_mem_inc_frag
         stat_pf_dim_frag=stat_dim_frag
         stat_ps_dim_frag=tally_size
         stat_wt_dim_frag=stat_dim_frag
      else
         stat_size_frag=tally_size
         stat_dim_frag=tally_size
         stat_pf_dim_frag=1
         stat_ps_dim_frag=1
         if (stat_comp_flt == TRUE) then 
            stat_wt_dim_frag=tally_size
         else
            stat_wt_dim_frag=1
         end if
      end if
      var_alloc(stat_frag)
      var_alloc(stat_ptr2full_frag)
      var_alloc(stat_ptr2short_frag)
      var_alloc(stat_wt_frag)

      if (stat_comp_frag == FALSE) then 
         do i=0,stat_dim_frag-1
            stat_frag[i][o_mean]=zero
            stat_frag[i][o_var]=zero
         end do
         do i=0,stat_wt_dim_frag-1
            stat_wt_frag[i]=zero
         end do
      end if
/*
   In |do_flights_master|, |output_grp| takes the place of
   the final array and is, thus, not compressed.  However,
   we do use a compressed final array in performing multi-level
   data aggregation on the meta-slaves.
*/
      stat_wt_tot_fin=zero           // Have really replaced with |weight_grp|
      if (stat_comp_fin == TRUE) then
         stat_size_fin=0
         stat_dim_fin=stat_mem_inc_fin
         stat_pf_dim_fin=stat_dim_fin
         stat_ps_dim_fin=tally_size
         stat_wt_dim_fin=stat_dim_fin
      else
         stat_size_fin=tally_size
         stat_dim_fin=tally_size
         stat_pf_dim_fin=1
         stat_ps_dim_fin=1
         if (stat_comp_frag == TRUE) then
            stat_wt_dim_fin=tally_size
         else
            stat_wt_dim_fin=1
         end if
      end if

      var_alloc(stat_fin)
      if (stat_comp_fin == FALSE) then  
         do i=0,stat_dim_fin-1
            stat_fin[i][o_mean]=zero
            stat_fin[i][o_var]=zero
         end do
      end if

      var_alloc(stat_ptr2full_fin)
      var_alloc(stat_ptr2short_fin)
      var_alloc(stat_wt_fin)
      if (stat_comp_fin == FALSE) then  
         do i=0,stat_wt_dim_fin-1      
            stat_wt_fin[i]=zero
         end do
      end if

/*
  Re-initialization of these arrays is taken care of in |stat_acc|.
  Note: for really short flights it might make sense, at least for |flt|, to
  replace this array with a search of the |stat_ptr2full| array.
*/
      do i=0,stat_ps_dim_flt-1
         stat_ptr2short_flt[i]=int_uninit
      end do

      do i=0,stat_ps_dim_frag-1
         stat_ptr2short_frag[i]=int_uninit
      end do

      do i=0,stat_ps_dim_fin-1
         stat_ptr2short_fin[i]=int_uninit
      end do

      return
      end

@ Decompress accumulated data into full size array. Also, reset base array
for next use.

@<Functions...@>=
      subroutine stat_decomp(base_size,base_dim,base_stat,base_ps_dim,
     $          base_ptr2short,full_size,full_stat)

      implicit_none_f77
      implicit_none_f90
      integer base_size,base_dim,base_ps_dim,full_size // Input
      integer base_ptr2short[0:base_ps_dim-1]
      real base_stat[0:base_dim-1][o_mean:o_var]
      real full_stat[0:full_size-1][o_mean:o_var]      // Output
      integer ifull,i_base                             // Local

      assert(base_ps_dim == full_size)
      do ifull=0,full_size-1
         if (base_ptr2short[ifull] != int_uninit) then
            i_base=base_ptr2short[ifull]
            full_stat[ifull][o_mean]=base_stat[i_base][o_mean]
            full_stat[ifull][o_var]=base_stat[i_base][o_var]
            base_ptr2short[ifull]=int_uninit     // Re-initialize
         else
            full_stat[ifull][o_mean]=zero
            full_stat[ifull][o_var]=zero
         end if
      end do
      base_size=0

      return
      end
         
@ Clear stat arrays.

@<Functions...@>=
      subroutine clear_stat
      implicit_none_f77
      sa_common
      pr_common
      tl_common
      ou_common
      implicit_none_f90

      @<Memory allocation interface@>

      var_free(stat_flt)
      var_free(stat_frag)
      var_free(stat_fin)
      var_free(stat_ptr2full_flt)
      var_free(stat_ptr2full_frag)
      var_free(stat_ptr2full_fin)
      var_free(stat_ptr2short_flt)
      var_free(stat_ptr2short_frag)
      var_free(stat_ptr2short_fin)
      var_free(stat_wt_frag)
      var_free(stat_wt_fin)

      return
      end

@* References.

\bibliographystyle{report}
\bibliography{../../degas}

@* INDEX.

