% $Id: 762e6a7797d716c14e848af250fb6677cecb51bd $
\Title{other random distributions}


@* Other random distributions.

\ID{$Id: 762e6a7797d716c14e848af250fb6677cecb51bd $}

@m FILE 'randother.web'

@I macros.hweb

@I random.hweb

@* External interface.

Three distributions are provided: normal deviates, uniform points on a
sphere, and cosine-distributed points on a half sphere.  Here the state
of the random number generator (which should already have been
initialized via |random_init_d2|) is defined by |rn_args(tag)|.  Non-FWEB
users will need to replace this with |ran_index,ran_array| (suitably
declared).

|call random_gauss(y,n,rn_args(tag))| returns $n$ normal deviates in the
array $y$ with zero mean and unit variance.

|call random_isodist(v,n,rn_args(tag))| returns $n$ points
uniformly distributed on a sphere in the array |v[3,n]|.

|call random_cosdist(v,n,rn_args(tag))| returns a $n$ points
cosine-distributed on a sphere in the array |v[3,n]|, with the third $z$
axis being the normal.

These routines all return 64-bit floating results.  There are also
single precision versions obtained by prefixing the routine names with
an |s|.


@a
      @<Functions and Subroutines@>

@* Normal random numbers. Generate normal random numbers with zero mean and
unit variance.  This is the Box-Muller method \cite{box58} described in
Knuth \cite{knuth2}, p.~117--118.  However, rather than use the rejection
method to calculate $\cos\Theta$ and $\sin\Theta$, we calculate them
directly, to allow vectorization.

Because of the way the uniform random numbers are generated, this routine
will never attempt to take $\log 0$.  In addition, $0$ will never be one of
the normal random numbers generated.  (These observations follow because
|random| never returns $0$, $\frac 14$, $\frac 12$, $\frac 34$, or $1$.)

If $n$ is odd, then one random number is essentially thrown away.  This
means, for example, that the state of the random number generator will
be different after two calls to |call random_gauss(y,1,rn_dummy(x))|
compared to a single call to |call random_gauss(y,2,rn_dummy(x))|.  (The
first consumes 4 random numbers; the second consumes 2.)

@<Functions...@>=
      subroutine random_gauss(y,n,rn_dummy(x))
      implicit_none_f77
      implicit_none_f90
      rn_decl(x)                // RNG State
      integer n                 // Input
      real y[0:n-1]             // Output
      integer i                 // Local
      real pi,theta,z
      real random               // External
      external random_array,random
      data pi/dconst(3.14159265358979323846264338328)/
@#if !HIPREC
      single_precision ys[0:n-1] // Output
      single_precision spi,stheta,sz // Local
      single_precision srandom  // External
      external srandom_array,srandom
      data spi/3.14159265358979323846264338328/
@#endif

@#if HIPREC
      entry srandom_gauss(y,n,rn_dummy(x))
@#endif

      if (n<=0) return

      call random_array(y,n,rn_args(x))
      if (n > 1) then
         do i=0,int(n/2)-1
            theta=pi*(two*y[i]-one) // uniformly distributed in $(-\pi,\pi)$
            z=sqrt(-two*log(y[i+1])) // $\sqrt{-2\log S}$
            y[i]=z*cos(theta)
            y[i+1]=z*sin(theta)
         end do
      end if

      if (mod(n,2)==0) return
      theta=pi*(two*y[n-1]-one)   // uniformly distributed in $(-\pi,\pi)$
      z=sqrt(-two*log(random(rn_args(x)))) // $\sqrt{-2\log S}$
      y[n-1]=z*cos(theta)
      
      return

@#if !HIPREC
      entry srandom_gauss(ys,n,rn_dummy(x))

      if (n<=0) return

      call srandom_array(ys,n,rn_args(x))
      if (n > 1) then
         do i=0,int(n/2)-1
            stheta=spi*(2.0*ys[i]-1.0) // uniformly distributed in $(-\pi,\pi)$
            sz=sqrt(-2.0*log(ys[i+1])) // $\sqrt{-2\log S}$
            ys[i]=sz*cos(stheta)
            ys[i+1]=sz*sin(stheta)
         end do
      end if

      if (mod(n,2)==0) return
      stheta=spi*(2.0*ys[n-1]-1.0)   // uniformly distributed in $(-\pi,\pi)$
      sz=sqrt(-2.0*log(srandom(rn_args(x)))) // $\sqrt{-2\log S}$
      ys[n-1]=sz*cos(stheta)
      
      return
@#endif
      end


@* Isotropic distribution.  Generate random points isotropically on a
three-dimensional unit sphere.  Each of the coordinates is uniformly
distributed $[-1,1]$.  We use this to obtain the $z$ coordinate.  Then $x$
and $y$ are uniformly distributed on a circle of radius $\sqrt{1-z^2}$.
See Carter and Cashwell \cite{carter75}, p.~7.  There are rejection
techniques to calculate these random numbers, but once again the additional
complexity will prevent vectorization, so these techniques are unlikely to
be faster.

Because of the way the uniform random numbers are calculated, this routine
will never return $0$ for any of the components of the position.  (However,
it {\it may} return $1$ for $x$ or $y$ components.)

This and |random_cosdist| dubiously treats its array output argument,
|v| as a one-dimensional array.  (This would normally be dimensioned as
|v[3,n]| in the calling program.)  By doing this we can easily use |v|
as a place to hold the random numbers returned by |random_array|.  Note
that we fill up the last $\frac23$ of |v| in the call to |random_array|,
and then proceed to fill up |v| with the required random vectors
starting at the beginning, ensuring that we don't overwrite any random
numbers before they are needed.

@<Functions...@>=
      subroutine random_isodist(v,n,rn_dummy(x))
      implicit_none_f77
      implicit_none_f90
      rn_decl(x)                // RNG State
      integer n                 // Input
      real v[0:3*n-1]           // Output
      integer i                 // Local
      real pi,costheta,phi
      external random_array     // External
      data pi/dconst(3.14159265358979323846264338328)/
@#if !HIPREC
      single_precision vs[0:3*n-1] // Output
      single_precision spi,scostheta,sphi // Local
      external srandom_array
      data spi/3.14159265358979323846264338328/
@#endif

@#if HIPREC
      entry srandom_isodist(v,n,rn_dummy(x))
@#endif

      if (n<=0) return
      call random_array(v[n],2*n,rn_args(x))
      do i=0,n-1
         costheta=two*v[n+2*i]-one // uniformly distributed in $(-1,1)$
         phi=pi*(two*v[n+2*i+1]-one) // uniformly distributed in $(-\pi,\pi)$
         v[3*i]=cos(phi)*sqrt(one-costheta^2)
         v[3*i+1]=sin(phi)*sqrt(one-costheta^2)
         v[3*i+2]=costheta
      end do
      return

@#if !HIPREC
      entry srandom_isodist(vs,n,rn_dummy(x))
      if (n<=0) return
      call srandom_array(vs[n],2*n,rn_args(x))
      do i=0,n-1
         scostheta=2.0*vs[n+2*i]-1.0 // uniformly distributed in $(-1,1)$
         sphi=spi*(2.0*vs[n+2*i+1]-1.0) // uniformly distributed in $(-\pi,\pi)$
         vs[3*i]=cos(sphi)*sqrt(1.0-scostheta^2)
         vs[3*i+1]=sin(sphi)*sqrt(1.0-scostheta^2)
         vs[3*i+2]=scostheta
      end do
      return
@#endif

      end

@* Cosine distribution.  Generate random points with a cosine distribution
on a three-dimensional unit sphere.  This distribution is biased
$\cos\theta$ relative to the isotropic distribution, where $\theta$ is the
angle measured from the $z$ axis.  This is the distribution of directions
for thermal particles coming off a surface--the factor of $\cos\theta$
accounting for the solid angle subtended by a surface element.

If particles are emitted into a volume from its enclosing surface uniformly
in position and with this distribution in direction, then each point in the
volume is visited equally often and each direction is sampled uniformly.

The probablilty of a particle lying in $[\theta,\theta+d\theta]$ is
$\frac12 \sin\theta \,d\theta$ for $\theta$ in $[-\frac12 \pi,\frac12 \pi]$
in the isotropic case.  For the cosine distribution the probability is $2
\cos\theta\sin\theta\,d\theta$ for $\theta$ in $[0,\frac12 \pi]$.  The
corresponding distribution in $z$ is $f(z)=2z$ for $0\le z\le 1$, and the
cumulative distribution in $F(z)=z^2$.  We can generate this distribution
using $Z=F^{-1}(U)=\sqrt U$ where $U$ is a uniformly distributed random
number.  The standard ``trick'' to calculate $\sqrt U$ is to take
$\max(U_1,U_2)$.  However, once again, it seems to be of marginal value to
resort to these tricks.  Having computed $z$, we obtain $x$ and $y$ using
the same method as for the isotropic distribution.

Because of the way the uniform random numbers are calculated, this routine
will never return $0$ for any of the components of the position.  (However,
it {\it may} return $1$ for any of the components.)

See the comments about the dimensioning of |v| in the discussion of
|random_isodist|.

@<Functions...@>=
      subroutine random_cosdist(v,n,rn_dummy(x))
      implicit_none_f77
      implicit_none_f90
      rn_decl(x)                // RNG State
      integer n                 // Input
      real v[0:3*n-1]           // Output
      integer i                 // Local
      real pi,costheta2,phi
      external random_array     // External
      data pi/dconst(3.14159265358979323846264338328)/
@#if !HIPREC
      single_precision vs[0:2*n-1] // Output
      single_precision spi,scostheta2,sphi // Local
      external srandom_array
      data spi/3.14159265358979323846264338328/
@#endif

@#if HIPREC
      entry srandom_cosdist(v,n,rn_dummy(x))
@#endif

      if (n<=0) return
      call random_array(v[n],2*n,rn_args(x))
      do i=0,n-1
         costheta2=v[n+2*i]     // $\cos^2\theta$
         phi=pi*(two*v[n+2*i+1]-one) // uniformly distributed in $(-\pi,\pi)$
         v[3*i]=cos(phi)*sqrt(one-costheta2)
         v[3*i+1]=sin(phi)*sqrt(one-costheta2)
         v[3*i+2]=sqrt(costheta2) // distributed as $z^2$ in $(0,1)$
      end do

      return

@#if !HIPREC
      entry srandom_cosdist(vs,n,rn_dummy(x))
      if (n<=0) return
      call srandom_array(vs[n],2*n,rn_args(x))
      do i=0,n-1
         scostheta2=vs[n+2*i]     // $\cos^2\theta$
         sphi=spi*(2.0*vs[n+2*i+1]-1.0) // uniformly distributed in $(-\pi,\pi)$
         vs[3*i]=cos(sphi)*sqrt(1.0-scostheta2)
         vs[3*i+1]=sin(sphi)*sqrt(1.0-scostheta2)
         vs[3*i+2]=sqrt(scostheta2) // distributed as $z^2$ in $(0,1)$
      end do

      return
@#endif
      end

@* INDEX.
