$Id: 044993e8bec674f7d69bd71035b22c6c3a875140 $
\Title{tri_to_sonnet}

@* Read in triangles from Triangle and write them out in Sonnet
format.  Will be passing them on to {\tt definegeometry2d} in that
format.

This code will read Triangle |.ele| and |.node| files; the 
root name of the files should  be provided on the command
line.  The end result is a Sonnet-format file, ending in
|.son| and having the same root name.  The approach used
to do this is to equate the coordinates of the points
appearing in the third lines of the Sonnet ``element''
specifications.  The points are ordered so that the
resulting triangles / rectangles have a clockwise orientation.
Since the Triangle mesh is otherwise unstructured, this
Sonnet file will have |nx| set to the number of triangles
and |ny|$= 1$.

\ID{$Id: 044993e8bec674f7d69bd71035b22c6c3a875140 $}

@m FILE 'tri_to_sonnet.web'

@I macros.hweb
@I string.hweb
@I sysdep.hweb
@I geometry2d.hweb

@m open_file(aunit,aname)    open(unit=aunit,file=aname,status='old',form='formatted',iostat=open_stat);
         assert(open_stat == 0) @;

@ The unnamed module.

@a
      @<Functions and subroutines@>

@ The Main Program.

@m main_code_macros_here 0
@m element_start 0
@m element_end 1
@m dim_curves 5      // For determining polygon topology
@m curve_open 1
@m curve_closed 2

@<Functions...@>=
      program tri_to_sonnet

      define_dimen(node_ind,num_nodes)
      define_dimen(tri_ind,num_tri)
      define_dimen(segment_ind,num_seg)
      define_dimen(corner_ind,3)
/*
   Patterned after |element_ends_ind| in |definegeometry2d|.
*/
      define_dimen(element_ends_ind,element_start,element_end)
      
      define_varp(nodes,FLOAT,g2_xz_ind,node_ind)
      define_varp(triangles,INT,corner_ind,tri_ind)
      define_varp(segments,INT,element_ends_ind,segment_ind)
      define_varp(poly_segments,INT,segment_ind)
      define_varp(poly_curve_num,INT,segment_ind)

      implicit_none_f77
      implicit_none_f90

      integer nargs,p,b,e,length,open_stat,ele_unit,node_unit,
     $        num_nodes,num_tri,poly_unit,num_points,i,
     $        num_seg

      character*FILELEN tri_file_root
      character*LINELEN line

      declare_varp(nodes)
      declare_varp(triangles)
      declare_varp(segments)
      declare_varp(poly_segments)
      declare_varp(poly_curve_num)

      @<Memory allocation interface@>
      sy_decls
      st_decls

      nargs=arg_count()
      if (nargs != 1) then
         assert('Command line must specify the root filename of the Triangle .ele and .node files' == ' ')
      end if
      call command_arg(1,tri_file_root)
      
      node_unit=diskin
      open_file(node_unit,trim(tri_file_root) \/'.node')
      assert(open_stat == 0)
/*
   The first nontrivial line (by some good fortune, Triangle also uses the
   \verb+#+ character for comments) begins with the number of nodes.
  That's all we need; ignore the rest.
*/
      assert(read_string(node_unit,line,length))
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      num_nodes=read_integer(line(b:e))
      assert(num_nodes > 0)
      var_alloc(nodes)
/*
   Likewise for the elements / triangles file the first line specifies the
   number of triangles.
*/
      ele_unit=diskin+1
      open_file(ele_unit,trim(tri_file_root) \/ '.ele')
      assert(open_stat == 0)
      assert(read_string(ele_unit,line,length))
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      num_tri=read_integer(line(b:e))
      assert(num_tri > 0)
      var_alloc(triangles)
@#if 0
/*
   Check to see if there is a polygon file with a boundary specified
   in terms of these nodes.  Since XGC only reads the ``.ele'' and
   ``.node'' files, there may not be a polygon file with this 
   information present.  If it is present, will process it as
   well, transforming the data into a wallfile suitable for
   use with |definegeometry2d|.
*/
      poly_unit=diskin+2
      open(unit=poly_unit,file=trim(tri_file_root) \/ '.poly',
     $     status='old',form='formatted',iostat=open_stat)
      if (open_stat == 0) then
         write(stdout,*) ' Polygon file found'
         assert(read_string(poly_unit,line,length))
         assert(length<=len(line))
         length=parse_string(line(:length))
         p=0
         assert(next_token(line,b,e,p))
/*
   The first section of the file is just a list of points (i.e.,
   coordinates).  This is usually what gets input to Triangle.
   In the present case, we're not interested in this since this
   information is already in the ``.node'' file; Triangle appears to
   just skip this section on output, setting the number of points to
   zero.  So, we're just skipping it here, too.
*/
         num_points=read_integer(line(b:e))
         if (num_points > 0) then
            do i=1,num_points
               assert(read_string(poly_unit,line,length))
            end do
         end if
         assert(read_string(poly_unit,line,length))
         assert(length<=len(line))
         length=parse_string(line(:length))
         p=0
         assert(next_token(line,b,e,p))
         num_seg=read_integer(line(b:e))
         assert(num_seg > 0)
      else
         write(stdout,*) ' Polygon file not found'
/*
   Use a default value of 1 here so we can allocate |segments| and
   pass it to the processing routine.
*/
         num_seg=1
      end if
@#else
      num_seg=1
@#endif
      var_alloc(segments)
      var_alloc(poly_segments)
      var_alloc(poly_curve_num)
/*
   To be sure that everyone knows the dimensions of these arrays,
   we have to pass them to a subroutine.
*/
      call process_triangles(tri_file_root,node_unit,num_nodes,
     $  ele_unit,num_tri,poly_unit,num_seg,nodes,triangles,segments,
     $  poly_segments,poly_curve_num)

      close(unit=node_unit)
      close(unit=ele_unit)
@#if 0
      close(unit=poly_unit)
@#endif
      var_free(nodes)
      var_free(triangles)
      var_free(segments)
      var_free(poly_segments)
      var_free(poly_curve_num)

      stop
      end

@* Read the nodes and triangles and then write them out in Sonnet format.

@<Functions...@>=
      subroutine process_triangles(tri_file_root,node_unit,num_nodes,
     $                             ele_unit,num_tri,poly_unit,num_seg,
     $                             nodes,triangles,segments,
     $                             poly_segments,poly_curve_num)

      implicit_none_f77
      implicit_none_f90

      integer node_unit,num_nodes,ele_unit,num_tri,poly_unit,num_seg   // Input
      integer triangles[num_tri][3],
     $        segments[num_seg][element_start:element_end],
     $        poly_segments[num_seg],poly_curve_num[num_seg]
      real nodes[num_nodes][g2_x:g2_z]
      character*FILELEN tri_file_root

      integer p,b,e,length,inode,itri,node_label,ic,tri_label,         // Local
     $        nxd,nzd,ix,iz,num_curves,ipoint,iseg,seg_label
      integer curve_type[dim_curves],curve_start[dim_curves],
     $        curve_start_tip[dim_curves],poly_points[dim_curves]
      real dummy
      real polygon[dim_curves][0:g2_num_points-1][g2_x:g2_z]
      character*LINELEN line

      st_decls

      do inode=1,num_nodes
         do ic=g2_x,g2_z
            nodes[inode][ic]=real_uninit
         end do
      end do
      do inode=1,num_nodes
         assert(read_string(node_unit,line,length))
         assert(length<=len(line))
         length=parse_string(line(:length))
         p=0
         assert(next_token(line,b,e,p))
         node_label=read_integer(line(b:e))
/*
  I am not sure if the format of this file requires these to be in
  order, but assume that they are not.  With the hardwired do loop,
  will ensure that we get |num_node| nodes.
*/
         assert((node_label > 0) && (node_label <= num_nodes))
         do ic=g2_x,g2_z
            assert(nodes[node_label][ic] == real_uninit)
            assert(next_token(line,b,e,p))
            nodes[node_label][ic]=read_real(line(b:e))
         end do
      end do

      do itri=1,num_tri
         do ic=1,3
            triangles[itri][ic]=int_uninit
         end do
      end do
      do itri=1,num_tri
         assert(read_string(ele_unit,line,length))
         assert(length<=len(line))
         length=parse_string(line(:length))
         p=0
         assert(next_token(line,b,e,p))
         tri_label=read_integer(line(b:e))
/*
  Again, not sure if these are supposed to be in order.  Not
  making that assumption.
*/
         assert((tri_label > 0) && (tri_label <= num_tri))
         do ic=1,3
            assert(triangles[tri_label][ic] == int_uninit)
            assert(next_token(line,b,e,p))
            triangles[tri_label][ic]=read_integer(line(b:e))
            assert((triangles[tri_label][ic] > 0) 
     $           && (triangles[tri_label][ic] <= num_nodes))
         end do
      end do

      open(unit=diskout,file=trim(tri_file_root) \/ '.son',status='unknown',
     $     form='formatted')
      dummy=zero
      write(diskout,*)
      write(diskout,*) '  Element output:'
      write(diskout,*)
      write(diskout,'(a,f16.13)') '    R*Btor =   ',dummy
      write(diskout,*) '   ncut   =  0'
      write(diskout,*)
      write(diskout,'(a)') '   ========================================================================================'
/*
   Triangle's elements file lists the triangles in a counter-clockwise 
   fashion.  DEGAS 2's geometry routines want clockwise.  Switching the 
   order of the points is easy, but the format of the Sonnet mesh 
   potentially complicates matters further (see the |definegeometry2d| 
   documentation).  However, it does turn out that just listing the points 
   in the reverse order and repeating point number 1 on the third line will 
   do what we want.  If we set the center value to zero (second line), 
   |definegeometry2d| will compute it for us.  Actually, probably do not 
   even need to worry about the order of the points.
*/
      nxd=num_tri
      nzd=1
      do iz=1,nzd
         do ix=1,nxd
         write(diskout,'(a,i5,a,i5,a,i3,a,e17.10,a,e17.10,a,6x,a,e17.10,a,e17.10,a)') 
     $        ' Element ',(iz-1)*nxd+ix-1,' =(',ix-1,',',iz-1,'): (',nodes[triangles[ix][3]][g2_x],',',nodes[triangles[ix][3]][g2_z],')','(',
     $           nodes[triangles[ix][2]][g2_x],',',nodes[triangles[ix][2]][g2_z],')'
            write(diskout,'(a,e17.10,13x,a,e17.10,a,e17.10,a)') '   Field ratio  = ',dummy,
     $           '(',dummy,',',dummy,')'
            write(diskout,'(29x,a,e17.10,a,e17.10,a,6x,a,e17.10,a,e17.10,a)')
     $           '(',nodes[triangles[ix][1]][g2_x],',',nodes[triangles[ix][1]][g2_z],')','(',
     $           nodes[triangles[ix][1]][g2_x],',',nodes[triangles[ix][1]][g2_z],')'
            write(diskout,*) '  ----------------------------------------------------------------------------------------'
         end do
      end do
      close(unit=diskout)
/*
   If we have non-trivial polygon data (indicated by |num_seg| > 1), 
   process it into one or more wallfiles.
*/
      if (num_seg > 1) then
         do iseg=1,num_seg
            do ic=element_start,element_end
               segments[iseg][ic]=int_uninit
            end do
         end do
         do iseg=1,num_seg
            assert(read_string(poly_unit,line,length))
            assert(length<=len(line))
            length=parse_string(line(:length))
            p=0
            assert(next_token(line,b,e,p))
            seg_label=read_integer(line(b:e))
/*
  I think these {\em are} in order when written by Triangle.  In
  this case, |poly_segments| is a trivial mapping, i.e.,
  |poly_segments[i]=i|.  But, we
  need precisely this sort of mapping array for |count_curves|
  below, so set it up.
*/
            assert((seg_label > 0) && (seg_label <= num_seg))
            poly_segments[iseg]=seg_label
            do ic=element_start,element_end
               assert(segments[seg_label][ic] == int_uninit)
               assert(next_token(line,b,e,p))
               segments[seg_label][ic]=read_integer(line(b:e))
               assert((segments[seg_label][ic] > 0) 
     $              && (segments[seg_label][ic] <= num_nodes))
            end do
         end do
/*
   Now see how many contiguous ``curves'' are in this list of
   points.  Presumably it's just one in our application, but
   Triangle probably permits it to be more than one, so allow
   it here, too.
*/
         call count_curves(segments,num_seg,poly_segments,num_curves,
     $        curve_type,curve_start,curve_start_tip,poly_curve_num)
         assert(num_curves >= 1)
         do ic=1,num_curves
/*
   Take each curve found and transform it into a set of |poly_points[ic]|
   consecutive points (now actual coordinates) in the |polygon|
   array.  Need to process all of these before writing to the file
   since we need to know the number of points in each polygon beforehand.
*/
            call elements_to_polygon(nodes,segments,num_seg,poly_segments,
     $                               curve_start[ic],curve_start_tip[ic],
     $                               poly_points[ic],polygon[ic][0][g2_x])
         end do
         open(unit=diskout,file=trim(tri_file_root) \/ '.wall',
     $        status='unknown',form='formatted')
         write(diskout,*) num_curves
/*
   For closed curves, we can skip the last point since it 
   duplicates the first one.
*/
         do ic=1,num_curves
            if (curve_type[ic] == curve_closed) then 
               poly_points[ic]--
            end if
         end do
         write(diskout,*) SP (poly_points[ic]+1,ic=1,num_curves)
 /*
   Use the exact same format for writing the coordinates as in the 
   Sonnet file aboveto ensure equality when they are read in by 
   |definegeometry2d|.
*/
        do ic=1,num_curves
            do ipoint=0,poly_points[ic]
               write(diskout,'(e17.10,5x,e17.10)') polygon[ic][ipoint][g2_x],
     $                           polygon[ic][ipoint][g2_z]
            end do
         end do
         close(unit=diskout)
      end if

      return
      end

 @* Find endpoints in a set of elements.  
COPIED THIS AND FOLLOWING TWO ROUTINES OUT OF DEFINEGEOMETRY2D.WEB!!!
This routine examines a set
of DG-type elements (|poly_elements|, consisting of |n| elements),
presumably connected, to find the nodes belonging
to a single element, i.e., the endpoints of the element chain.
The number of endpoints |num_ends| is returned, as are the corresponding
node numbers (|end_nodes|), pointers into the input |poly_elements|
list (|end_elements|), and tips of those elements (|end_tips|).

@<Functions...@>=
      subroutine find_endpoints(elements_list,n,poly_elements,
     $                          num_ends,end_nodes,end_elements,end_tips)
      implicit_none_f77
      implicit_none_f90

      integer n                                             // Input
      integer elements_list[*][element_start:element_end],
     $        poly_elements[n]

      integer num_ends                                      // Output
      integer end_nodes[*],end_elements[*],end_tips[*]

      integer i,tip,test_node,match,j                       // Local

      num_ends=0
      do i=1,n
         do tip=element_start,element_end
            test_node=elements_list[poly_elements[i]][tip]
            match=FALSE
            do j=1,n
               if ((j != i) 
     $       && ((elements_list[poly_elements[j]][element_start] == test_node) 
     $    || (elements_list[poly_elements[j]][element_end] == test_node))) then
/*
   Should only be one match!
*/
                  assert(match == FALSE)
                  match=TRUE
               end if
            end do
            if (match == FALSE) then
               num_ends++
               end_nodes[num_ends]=test_node
               end_elements[num_ends]=i
               end_tips[num_ends]=tip
            end if
         end do
      end do
/*
   Number of endpoints should be even!
*/
      assert((2*(num_ends/2) - num_ends) == 0)
      return
      end

@* Convert elements to a polygon.  This routine transforms a set of
DG-type elements, |poly_elements|, into a linear list of points, a ``polygon''
as used elsewhere in this code, |poly_x|, consisting of
|poly_num_points|.  The elements need not be all
consistently oriented (i.e., so that each interior node is the
``end'' of one element and the ``start'' of another).  But, the
routine does expect to finish with a single chain (two endpoints)
or a closed polygon. In the former case, the input pointer to
the initial element (|initial_element|) and tip
(|initial_tip|) must correspond to one of those endpoints.

@m point_loop #:0

@<Functions...@>=
      subroutine elements_to_polygon(nodes,elements_list,n,poly_elements,
     $                               initial_element,initial_tip,
     $                               poly_num_points,poly_x)
      implicit_none_f77
      implicit_none_f90

      integer n,initial_element,initial_tip                // Input
      integer elements_list[*][element_start:element_end],
     $        poly_elements[n]
      real nodes[*][g2_x:g2_z]

      integer poly_num_points                              // Output
      real poly_x[0:*][g2_x:g2_z]

      integer i,j_match,node,tip,j,match,tip_match         // Local
/*
   The task here is to determine the desired ordering of the nodes
   in the input element set, i.e., their connectivity.  We assume that
   the caller has provided the initial point in the output
   polygon.   We then try to find a node of another element
   in the set that matches its opposite tip.  If we do, we add it
   to the output polygon.  The |point_loop| continues in this way
   until we are left with a point that has no match.  This is then
   one end of the open loop.  If that doesn't occur (|j_match| = 1),
   the loop is closed.
*/
         assert(initial_element >= 1)
         assert(initial_element <= n)
         assert((initial_tip == element_start) || (initial_tip == element_end))
         poly_num_points=0
         i=initial_element
         j_match=0
         node=elements_list[poly_elements[initial_element]][initial_tip]
         poly_x[poly_num_points][g2_x]=nodes[node][g2_x]
         poly_x[poly_num_points][g2_z]=nodes[node][g2_z]
         poly_num_points++
/*
   This restriction may not apply in general.  Leave for now
   until we can replace it with a corresponding assertion in 
   the calling program.
*/
         assert(poly_num_points <= g2_num_points-1)
         if (initial_tip == element_start) then
            tip=element_end
         else
            tip=element_start
         end if

point_loop: continue
         node=elements_list[poly_elements[i]][tip]
         poly_x[poly_num_points][g2_x]=nodes[node][g2_x]
         poly_x[poly_num_points][g2_z]=nodes[node][g2_z]
         poly_num_points++
/* 
   See above comment
*/
         assert(poly_num_points <= g2_num_points-1)
         match=FALSE
/* 
   Look through all of the other elements in the DG polygon for
   a matching point.    Need to try both ends of each candidate element!  
   For this reason, must exclude current element.
*/
         do j=1,n
            if ((j != i) && (elements_list[poly_elements[j]][element_start]
     $           == elements_list[poly_elements[i]][tip])) then
               assert(match == FALSE)
               match=TRUE
               j_match=j
               tip_match=element_end
            else if ((j != i) 
     $              && (elements_list[poly_elements[j]][element_end]
     $           == elements_list[poly_elements[i]][tip])) then
               assert(match == FALSE)
               match=TRUE
               j_match=j
               tip_match=element_start
            end if
         end do
         if (j_match != initial_element) then
            if (match == TRUE) then
/*
   Got a match.  Reset the bookkeeping indices so that the node gets
   added to the output polygon and we can begin the search again
   for a match to the node at the other end of this DG polygon element.
*/
               i=j_match
               j_match=0
               tip=tip_match
               go to point_loop
/*
   Otherwise, we have reached the other end point.  Check that the 
   number of points in the polygon is as expected.  As is the
   convention elsewhere in this code, the |poly_num_points|
   entry in the |poly_x| array is reserved for the next entry in the array.
   The original usage of this algorithm was for cases using all of
   the input points, corresponding to the equality.
*/
            else
               assert((poly_num_points - 1) <= n)
            end if
/*
   If the match is with the |initial_element|, we are also done.
   In this case, though, we need to reduce |poly_num_points|
   by 1 since this is already a closed polygon (first and
   last points are same).
*/
         else
            assert((poly_num_points - 1) <= n)
            poly_num_points--
         end if

         return
         end

@* Count the number of continuous sections in set of elements. Namely,
a set of elements should consist of one or more continuous sections,
or curves. Some of these will be ``open'', i.e., having two unmatched
endpoints. The others will be ``closed''.  The primary objective of this
routine is to find the latter. The routine returns the number of curves
found and characterizes each as ``open'' or ``closed''.  For convenience,
a second array identifies an element belonging to that curve, |curve_start|. 
Another array labels each element according to the curve it belongs to.

@<Functions...@>=
      subroutine count_curves(elements_list,n,poly_elements,
     $                        num_curves,curve_type,curve_start,
     $                        curve_start_tip,element_curve_num)
      implicit_none_f77
      implicit_none_f90

      integer n                                              // Input
      integer elements_list[*][element_start:element_end],
     $        poly_elements[n]

      integer num_curves                                     // Output 
      integer curve_type[dim_curves],curve_start[dim_curves],
     $        curve_start_tip[dim_curves],element_curve_num[*]

      integer i,i_init,j_match,tip,node,match,j,tip_match,   // Local
     $        num_ends,i_tot
/*
   Dimensioning these as in |specify_polygon|.  Yes, these
   are ridiculously large.
*/
      integer end_nodes[2*g2_num_points],end_elements[2*g2_num_points],
     $        end_tips[2*g2_num_points]

      num_curves=0
      assert(n > 1)
/*
   Initially label each curve with ``0'' to indicate that it hasn't
   been checked.
*/
      do i=1,n
         element_curve_num[i]=0
      end do
/*
   By making a little extra effort, we can get all of the open
   curves correctly labeled, as well as finding the closed ones.
   The idea is to start with ``endpoint'' elements first,
   finding them with |find_endpoints|:
*/      
      call find_endpoints(elements_list,n,poly_elements,
     $     num_ends,end_nodes,end_elements,end_tips)
      assert(num_ends <= 2*g2_num_points)
/*
   We will add them at the beginning of the main loop. In this case,
   we take care to get the tip right.  The rest of the loop is over
   all remaining elements.  Presumably, these are all on one or more
   closed curves.  For these, the choice of tip should not matter.
   In either case, if an element has not already been labeled with 
   a curve number, it must belong to a new curve!
*/
      do i_tot=1,n+num_ends
         if (i_tot <= num_ends) then
            i_init=end_elements[i_tot]
            if (end_tips[i_tot] == element_start) then
               tip=element_end
            else
               tip=element_start
            end if
         else
            i_init=i_tot-num_ends
            tip=element_end  // Arbitrarily start with this tip
         end if
         if (element_curve_num[i_init] == 0) then
            num_curves++
            assert(num_curves <= dim_curves)
/*
   At this point, the logic closely follows the ``forward loop''
   procedure used in |elements_to_polygon|.
*/
            i=i_init
            element_curve_num[i]=num_curves
/*
   Note that |curve_start| need not be the first point on an
   open curve. The real need is for {\em a} point on a closed curve.
   Recall that the {\em other} end of the current element is
   already considered to be on the curve and, thus, represents
   the actual starting tip.
*/
            curve_start[num_curves]=i
            if (tip == element_start) then
               curve_start_tip[num_curves]=element_end
            else
               curve_start_tip[num_curves]=element_start
            end if
            j_match=0

point_loop: continue
            node=elements_list[poly_elements[i]][tip]
            match=FALSE
/*
   Look through all of the other non-labeled elements in the DG polygon
   for a matching point.  Need to try both ends of each candidate element!
   For this reason, must exclude current element.
*/
            do j=1,n
               if ((j != i) && (elements_list[poly_elements[j]][element_start]
     $              == elements_list[poly_elements[i]][tip])) then
                  assert(match == FALSE)
                  match=TRUE
                  j_match=j
                  tip_match=element_end
               else if ((j != i) 
     $                 && (elements_list[poly_elements[j]][element_end]
     $                 == elements_list[poly_elements[i]][tip])) then
                  assert(match == FALSE)
                  match=TRUE
                  j_match=j
                  tip_match=element_start
               end if
            end do
            if (match == FALSE) then
/* 
   Reached the end of an open curve. Can go to next |i_init|.
*/
               curve_type[num_curves]=curve_open
            else
               if (j_match != i_init) then
/*
   Got a match that's not the initial element.  Label the new
   element, reset the bookkeeping, and go through the 
   |point_loop| again.
*/
                  assert(element_curve_num[j_match] == 0)
                  element_curve_num[j_match]=num_curves
                  i=j_match
                  j_match=0
                  tip=tip_match
                  go to point_loop
               else
/*
   Got a match and it {\em is} the initial element. Label
   the curve accordingly and go to next |i_init|.
*/
                  curve_type[num_curves]=curve_closed
               end if
            end if
         else
            assert(element_curve_num[i_init] > 0)
            assert(element_curve_num[i_init] <= num_curves)
         end if
      end do

      assert(num_curves > 0)

      return
      end

