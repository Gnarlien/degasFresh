@* Local arrays and machinery to allow compression of scoring data.

% $Id: 138baade67a95efbda11a28fa0009ae93cf892b9 $

\ID{$Id: 138baade67a95efbda11a28fa0009ae93cf892b9 $}

@I output.hweb

@ Ideally these variables would be defined locally and passed solely through
argument lists. However, to permit the scoring arrays to be as small as
possible, we need to be able to enlarge them on the fly (in subroutines
several levels below that in which they were initially defined). The
only convenient means of doing that is by using the |define_varp| 
machinery and passing the data via common where needed.

@m stat_mem_inc_flt 2500
@m stat_mem_inc_frag 15000
@m stat_mem_inc_fin 15000

@ Variable definitions.

@a
      package_init(sa)

      define_dimen_pk(sa,stat_moments_ind,o_mean,o_var)

      define_var_pk(sa,stat_comp_flt,INT)
      define_var_pk(sa,stat_comp_frag,INT)
      define_var_pk(sa,stat_comp_fin,INT)

      define_var_pk(sa,stat_dim_flt,INT)
      define_var_pk(sa,stat_dim_frag,INT)
      define_var_pk(sa,stat_dim_fin,INT)

      define_dimen_pk(sa,stat_flt_ind,0,stat_dim_flt-1)
      define_dimen_pk(sa,stat_frag_ind,0,stat_dim_frag-1)
      define_dimen_pk(sa,stat_fin_ind,0,stat_dim_fin-1)

      define_var_pk(sa,stat_pf_dim_flt,INT)
      define_var_pk(sa,stat_pf_dim_frag,INT)
      define_var_pk(sa,stat_pf_dim_fin,INT)

      define_dimen_pk(sa,stat_pf_flt_ind,0,stat_pf_dim_flt-1)
      define_dimen_pk(sa,stat_pf_frag_ind,0,stat_pf_dim_frag-1)
      define_dimen_pk(sa,stat_pf_fin_ind,0,stat_pf_dim_fin-1)

      define_var_pk(sa,stat_ps_dim_flt,INT)
      define_var_pk(sa,stat_ps_dim_frag,INT)
      define_var_pk(sa,stat_ps_dim_fin,INT)

      define_dimen_pk(sa,stat_ps_flt_ind,0,stat_ps_dim_flt-1)
      define_dimen_pk(sa,stat_ps_frag_ind,0,stat_ps_dim_frag-1)
      define_dimen_pk(sa,stat_ps_fin_ind,0,stat_ps_dim_fin-1)

      define_var_pk(sa,stat_wt_dim_frag,INT)
      define_var_pk(sa,stat_wt_dim_fin,INT)

      define_dimen_pk(sa,stat_wt_frag_ind,0,stat_wt_dim_frag-1)
      define_dimen_pk(sa,stat_wt_fin_ind,0,stat_wt_dim_fin-1)

      define_var_pk(sa,stat_size_flt,INT)
      define_var_pk(sa,stat_size_frag,INT)
      define_var_pk(sa,stat_size_fin,INT)

      define_var_pk(sa,stat_wt_tot_flt,FLOAT)
      define_var_pk(sa,stat_wt_tot_frag,FLOAT)
      define_var_pk(sa,stat_wt_tot_fin,FLOAT)

      define_varp_pk(sa,stat_flt,FLOAT,stat_moments_ind,stat_flt_ind)
      define_varp_pk(sa,stat_frag,FLOAT,stat_moments_ind,stat_frag_ind)
      define_varp_pk(sa,stat_fin,FLOAT,stat_moments_ind,stat_fin_ind)

      define_varp_pk(sa,stat_ptr2full_flt,INT,stat_pf_flt_ind)
      define_varp_pk(sa,stat_ptr2full_frag,INT,stat_pf_frag_ind)
      define_varp_pk(sa,stat_ptr2full_fin,INT,stat_pf_fin_ind)

      define_varp_pk(sa,stat_ptr2short_flt,INT,stat_ps_flt_ind)
      define_varp_pk(sa,stat_ptr2short_frag,INT,stat_ps_frag_ind)
      define_varp_pk(sa,stat_ptr2short_fin,INT,stat_ps_fin_ind)

/*
   |frag| and |fin| are used as a base (and an increment), but |flt| is
   always an increment. The weight of each entry in a base depends
   on the scoring history to that point. It's constant for an increment.
*/
      define_varp_pk(sa,stat_wt_frag,FLOAT,stat_wt_frag_ind)
      define_varp_pk(sa,stat_wt_fin,FLOAT,stat_wt_fin_ind)

      package_end(sa)

@* Description of compression algorithm and data structures.

@ Define structures for compression of scores. Prefix is |sa|.

This class contains the local arrays which carry the scoring data into
the output class arrays. A separate class is used to permit these
arrays to be compressed (removing entries which are 0), so that operations
on the entire arrays are much quicker than those on the full-sized
output arrays. At least at the single-flight level, the latter are filled
with zeroes apart from the relatively small section of the problem space
covered by that flight.

Much of this class deals with the bookkeeping required for managing the
compression and decompression process. Furthermore, almost every
variable or array appears three times. There are separate ``objects''
for each level of the code: |flt|, each flight; |frag|, the ``fragment''
of the total number of flights assigned to each processor; and |fin|, the
final set of scores which will be decompressed into the output arrays.
The descriptions below will have an appended |fff|, which is intended to
stand for these three strings.

Every array below has a corresponding dimension in order to permit
full flexibility in enabling and disabling compression at each level.
If the data at each level were always compressed,  fewer dimension
variables would be required. In practice, it is expected that the |flt|
data will always be compressed. Since the output class already contains
an uncompressed version of the final data, do not expect to want to
compress the |fin| data. Hence, |stat_fin| is not allocated and is
replaced in the code explicitly by corresponding output class arrays.
However, the code required for compression is in place and commented
out just in case; e.g., if it is decided that the output arrays should
be compressed as well. Whether or not it is best to compress the
|frag| data remains to be determined. The optimum choice may depend upon
the number of processors.

\begin{description}
  \item[|stat_comp_fff|] Integer flag (to be set using the |FALSE| and
|TRUE| flags) indicating whether or not the data at level |fff| are
to be compressed.
  
  \item[|stat_dim_fff|] Integer dimension of |stat_fff| array.

  \item[|stat_pf_dim_fff|] Integer dimension of |stat_ptr2full_fff| array.

  \item[|stat_ps_dim_fff|] Integer dimension of |stat_ptr2short_fff| array.

  \item[|stat_wt_dim_fff|] Integer dimension of |stat_wt_fff| array (none
for |flt|; see below).

  \item[|stat_size_fff|] Current number of entries in |stat_fff|. If 
|fff| is not compressed, this is |tally_size|.

  \item[|stat_wt_tot_fff|] Total weight represented by the current
contents of |stat_fff|.

  \item[|stat_fff|[$i_{s}$]] Is the $i_{s}$th nonzero score compiled at 
level |fff|.

  \item[|stat_ptr2full_fff|[$i_{s}$]] Pointer to the entry in the full (i.e.,
uncompressed) array corresponding to the $i_{s}$ nonzero score compiled
at level |fff|.

  \item[|stat_ptr2short_fff|[$i_{f}$]] Pointer from the full (i.e., 
uncompressed) array index $i_{f}$ back to its corresponding entry
in the compressed array |stat_fff|. The guess is that it is more efficient
to carry around this array than to search |stat_ptr2full_fff| with each
value of $i_{f}$ that comes along during the scoring process.

  \item[|stat_wt_frag|[$i_{s}$]] Weight associated with the $i_{s}$ nonzero
score in |stat_fff|. Note that there is no such array for |flt| since
the weight is a constant (usually unity) for all entries.
\end{description}

@ Macros for Stat class.

\begin{description}
  \item[|stat_mem_inc_fff|] Initial dimension and memory increment for
compressed arrays at level |fff|. The values used here have been 
chosen empirically too minimize the number of run time reallocations.
\end{description}


     
