% $Id: dee30e2ff21e9fc4c492065da2e6a550a2e4ae8b $
\Title{nstxgpi}

@* Plasma setup routine for use with the NSTX GPI experiments. 

\ID{$Id: dee30e2ff21e9fc4c492065da2e6a550a2e4ae8b $}

@m FILE 'nstxgpi.web'

@I macros.hweb
@I sysdep.hweb
@I zone.hweb
@I string.hweb
@I background.hweb
@I geomint.hweb
@I location.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@ Compute background densities and temperatures for NSTX Gas Puff Imaging 
experiments.  This differs from the C-Mod version in that ion temperatures
are treated separately and that a third ion species (for helium) is 
assumed present.

@<Functions...@>=

      subroutine get_n_t(nt_string)

      define_dimen(z_ind2_ind,z_ind2_min,z_ind2_max)
      define_varp(z_min,FLOAT,z_ind2_ind)
      define_varp(r,FLOAT,z_ind2_ind)

      implicit_none_f77
      zn_common                                             // Common
      implicit_none_f90

      character*LINELEN nt_string                           // Input

      integer z_ind2_min,z_ind2_max                         // Local

      declare_varp(z_min)
      declare_varp(r)

      @<Memory allocation interface@>

      z_ind2_min=zone_index_min[2]
      z_ind2_max=zone_index_max[2]
      var_alloc(z_min)
      var_alloc(r)

      call get_n_t_a(nt_string,z_ind2_min,z_ind2_max,z_min,r)

      var_free(z_min)
      var_free(r)

      return
      end

@ Subsidiary routine to the above needed to ensure that the indices of the
dynamically allocated arrays are properly recognized.

@m open_file(aunit,aname)    open(unit=aunit,file=aname,status='old',form='formatted',iostat=open_stat);
         assert(open_stat == 0) @;

@m max_rho 105

@m rho_loop #:0
      
@<Functions...@>=

      subroutine get_n_t_a(nt_string,z_ind2_min,z_ind2_max,z_min,r)

      implicit_none_f77
      zn_common                                             // Common
      bk_common
      gi_common
      implicit_none_f90

      integer z_ind2_min,z_ind2_max                         // Input
      real z_min[z_ind2_min:z_ind2_max],
     $     r[z_ind2_min:z_ind2_max]
      character*LINELEN nt_string                         

      integer p,b,e,length,zone,iz_sep,num_rho,             // Local
     $        iz,open_stat,zone2,back,diskin3,ix_max,irho

      real r_sep_m,r_sep_p,r_sep,rho_zone,ne_zone,te_zone,delta_min,
     $     delta,j_rho,z_max,kfac,zfac,ti_zone
      real rho[max_rho],rmaj[max_rho],ne[max_rho],te[max_rho],ti[max_rho]

      character*LINELEN line
      character*FILELEN nT_profile  

      vc_decl(vec_delta)

      external find_index,interpolate1                       // External
      real find_index,interpolate1

      st_decls
      vc_decls
/*
   Could have put all of these arguments in yet another text input file,
   but decided that there were already too many input files for this
   routine. For clarity, the order of the arguments is:
   |iz_sep|  |nT_profile|
*/
      p=0
      assert(next_token(nt_string,b,e,p))
      iz_sep=read_integer(nt_string(b:e))

      assert(next_token(nt_string,b,e,p))
      nT_profile=nt_string(b:e)

      diskin3=diskin+2
      open_file(diskin3,nT_profile)
      assert(read_string(diskin3,line,length))  // Column header

      num_rho=0
rho_loop: continue
      if (read_string(diskin3,line,length)) then
         num_rho++
         assert(num_rho <= max_rho)
         assert(length<=len(line))
         length=parse_string(line(:length))
         p=0
         assert(next_token(line,b,e,p))
/*
   These profiles are Thomson scattering data vs. major radius.  Can 
   alleviate some of the EFIT issues by reading them here in that way
   and using the exact same |r_sep| to translate between them and |rho|.
   Assume radii in m, |ne| in m$^{-3}$, and |te| in eV.
   For NSTX case, we could get data from UEDGE and have |ti|.
*/
         rmaj[num_rho]=read_real(line(b:e))
         assert(next_token(line,b,e,p))
         ne[num_rho]=read_real(line(b:e))
         assert(ne[num_rho] > zero)
         assert(next_token(line,b,e,p))
         te[num_rho]=read_real(line(b:e))*electron_charge
         assert(te[num_rho] > zero)
         assert(next_token(line,b,e,p))
         ti[num_rho]=read_real(line(b:e))*electron_charge
         assert(ti[num_rho] > zero)
         go to rho_loop
      end if
      close(unit=diskin3)
      assert(num_rho > 0)

      z_max=universal_cell_min[3]
      ix_max=0
      do zone=1,zn_num
         if ((zone_type[zone] == zn_plasma) 
     $        && (zn_index(zone,zi_ptr) == zone)
     $        && (zn_index(zone,zi_ix)*zn_index(zone,zi_iz) > 0)) then
            if (zone_center[zone][3] > z_max) then
               z_max=zone_center[zone][3]
               ix_max=zn_index(zone,zi_ix)
            end if
         end if
      end do
      assert(ix_max > 0)

      do iz=zone_index_min[2],zone_index_max[2]
         z_min[iz]=universal_cell_max[3]
         r[iz]=0
      end do
      r_sep_m=zero
      r_sep_p=zero
      do zone=1,zn_num
/*
   Note that test for first zone index against |ix_max| is to be sure
   we are on the outboard edge.
*/
         if ((zone_type[zone] == zn_plasma) 
     $      && (zn_index(zone,zi_ptr) == zone)
     $      && ((zn_index(zone,zi_ix) > ix_max) 
     $                      && (zn_index(zone,zi_iz) > 0))) then
            if (abs(zone_center[zone][3]) < z_min[zn_index(zone,zi_iz)]) then
               z_min[zn_index(zone,zi_iz)]=abs(zone_center[zone][3])
               r[zn_index(zone,zi_iz)]=sqrt(zone_center[zone][1]**2
     $              +zone_center[zone][2]**2)
               if (zn_index(zone,zi_iz) == iz_sep) then
                  r_sep_m=sqrt(zone_center[zone][1]**2
     $                 +zone_center[zone][2]**2)
               else if (zn_index(zone,zi_iz) == iz_sep+1) then 
                  r_sep_p=sqrt(zone_center[zone][1]**2
     $                 +zone_center[zone][2]**2)
               end if
            end if
            
         end if
      end do

      assert((r_sep_m > zero) && (r_sep_p > zero))
      r_sep=half*(r_sep_m+r_sep_p)

      do irho=1,num_rho
         rho[irho]=rmaj[irho]-r_sep
      end do

      do zone=1,zn_num
         if (zone_type[zone] == zn_plasma) then
            if ((zn_index(zone,zi_ix) > 0) && (zn_index(zone,zi_iz) > 0)) then
               rho_zone=r[zn_index(zone,zi_iz)]-r_sep
               j_rho=find_index(rho_zone,rho,num_rho)
               ne_zone=interpolate1(j_rho,ne,num_rho)
               te_zone=interpolate1(j_rho,te,num_rho)
               ti_zone=interpolate1(j_rho,ti,num_rho)
            else
               delta_min=geom_infinity
               do zone2=1,zn_num
                  if (zn_index(zone2,zi_iz) == zone_index_max[2]) then
                     vc_difference(zone_center[zone],zone_center[zone2],
     $                    vec_delta)
                     delta=vc_abs(vec_delta)
                     if (delta < delta_min) then
                        delta_min=delta
                     end if
                  end if
               end do
               assert(delta_min > zero && delta_min < geom_infinity)
/*
   This is just a guess as for what to do here; may want to try other 
   approaches.
*/
               rho_zone=r[zone_index_max[2]]+delta_min-r_sep
               j_rho=find_index(rho_zone,rho,num_rho)
               ne_zone=interpolate1(j_rho,ne,num_rho)
               te_zone=interpolate1(j_rho,te,num_rho)
               ti_zone=interpolate1(j_rho,ti,num_rho)
            end if
/*
   Third species here is helium.  Assume its density is small.
*/
            assert((ne_zone > zero) && (te_zone > zero) && (ti_zone > zero))
            bk_n(1,zone)=ne_zone
            bk_temp(1,zone)=te_zone
            bk_n(2,zone)=ne_zone
            bk_temp(2,zone)=ti_zone
            bk_n(3,zone)=zero
            bk_temp(3,zone)=zero
         end if
      end do

      return
      end

@* INDEX.
