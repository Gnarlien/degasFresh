% $Id: 3945e7e2728c7bb5917746dc29cc98680450f393 $
\Title{sources.web}


@* Sampling from the sources.

\ID{$Id: 3945e7e2728c7bb5917746dc29cc98680450f393 $}

@m FILE 'sources.web'

@m COUETTE 0

@I macros.hweb
@I random.hweb
@I location.hweb
@I sources.hweb
@I zone.hweb
@I species.hweb
@I flight.hweb
@I vector.hweb
@I particle.hweb
@I geomint.hweb
@I sector.hweb
@I background.hweb
@I problem.hweb
@I element.hweb
@I string.hweb
@I tally.hweb
@I output.hweb
@I reaction.hweb
@I materials.hweb

@ The main program.

@a
      @<Functions and Subroutines@>

@ Source Sampling Routine. This is now a particle-based version
suitable for calling by the master in a parallel run. 
The position, velocity, species, and relative weight are
set.  These will be passed down the call chain (and to a slave
process in the parallel case) where they will become a
flight ``origin''

@f sources_localcommon integer
@m sources_localcommon save /sources_common/;
      vc_decl(x_surface);
      common /sources_common/ x_surface @;

@<Functions...@>=
      subroutine sample_sources(est,is,number,pt_dummy(x),rn_dummy(x),kseg)
      implicit_none_f77
      so_common                     // Common
      sp_common
      pr_common
      implicit_none_f90
      
      integer est,number            // Input
      so_decl(is)
      pt_decl(x)                    // Input/output
      rn_decl(x)
      integer kseg                  // Output

      real urd,vprob                // Local
      integer xseg

      st_decls
      rn_decls
      lc_decls

      external find_index           // External
      real find_index
/*
   Sample one segment from this source group.  Two different techniques are
   employed here.  The original (``alias'') follows the sampling algorithm 
   described in Sec. 3.4.1 (and Exercise 7) of Knuth. He refers to the originator, 
   A. J. Walker, [{\em Electronics Letters} {\bf 10}, 8 (1974), 127-128; {\em ACM Trans.
   Math. Software} {\bf 3} (1977), 253-256].  But, setting up the alias arrays can
   be extremely time consuming for large sources.  Consequently, a more basic
   approach is available for those cases.  The controlling parameter is in the
   |set_prob_alias| routine.  The two are distinguished here by whether or not
   the |source_segment_ptr_alias| array is trivial (i.e., set to |int_unused|).
*/
      if (so_sampling == so_random) then
         rn_next(urd,x)
      else if (so_sampling == so_direct) then
         urd=mod(so_direct_delta+so_direct_mult*areal(number),one)
      else
         assert('Illegal value of so_sampling' == ' ')
      end if
      if (source_segment_ptr_alias[so_base(is)] != int_unused) then
         kseg=int(so_nseg(is)*urd)                                  // ``Alias'' sampling
         vprob=so_nseg(is)*urd - kseg
         if (vprob < source_segment_prob_alias[so_base(is)+kseg]) then
            xseg=source_segment_ptr[so_base(is)+kseg]
         else
            xseg=source_segment_ptr_alias[so_base(is)+kseg]
            kseg=int_lookup(xseg,source_segment_ptr[so_base(is)],so_nseg(is))-1
         end if
      else                                                           // Basic sampling
         kseg=int(find_index(urd,source_segment_prob_alias[so_base(is)],so_nseg(is)))
         kseg=min(kseg,so_nseg(is)-1)
         xseg=source_segment_ptr[so_base(is)+kseg]
      end if

      call set_source_x(est,so_args(is),xseg,kseg,rn_args(x),
     $     lc_args(pt_loc(x)))

      call set_source_v(so_args(is),xseg,kseg,lc_args(pt_loc(x)),
     $     rn_args(x),vc_args(pt_v(x)))
/*
   Set initial time for the flight.  If we need more complicated
   time dependence, should put in a separate subroutine.
*/
      if (so_t_varn(is) == so_delta_fn) then   // Also time independent runs
         pt_t(x)=so_time_initial
         assert(so_time_initialization == FALSE)
      else if (so_t_varn(is) == so_time_uniform) then
         assert((so_time_dependent == TRUE) && (so_time_final > so_time_initial))
         rn_next(urd,x)
         pt_t(x)=so_time_initial+urd*(so_time_final-so_time_initial)
      else
         assert('Unsupported source time variation' == ' ')
      end if

      if (so_type(is) != so_snapshot) then
         pt_init(x,sp_sy(so_species(is)),is)
      else
         call init_snapshot_pt(so_args(is),xseg,kseg,pt_args(x))
      end if
/*
   Storing the relative weight here temporarily.  This value will be passed
   to the statistical accumulation routines; the actual flights will begin
   tracking with a weight of unity.
*/
      pt_w(x)=source_segment_rel_wt[so_base(is)+kseg]
     $     *so_wt_norm(is)
      assert(pt_w(x) > zero)

      return
      end

@ Source position. Given a source ``segment'', sample a single point
using routines specific for the geometry of that source. 

@<Functions...@>=
      subroutine set_source_x(est,so_dummy(isource),xseg,kseg,
     $                        rn_dummy(r),lc_dummy(x))
      implicit_none_f77
      gi_common                  // Common
      so_common
      implicit_none_f90

      so_decl(isource)           // Input
      integer est,xseg,kseg
      rn_decl(r)                 // Input/output
      lc_decl(x)                 // Output
      rn_decls
/* 
   Can only handle these geometries here:
*/
      assert((geometry_symmetry == geometry_symmetry_plane) ||
     $     (geometry_symmetry == geometry_symmetry_oned) ||
     $     (geometry_symmetry == geometry_symmetry_cylindrical) ||
     $     (geometry_symmetry == geometry_symmetry_plane_hw) ||
     $     (geometry_symmetry == geometry_symmetry_cyl_hw) ||
     $     (geometry_symmetry == geometry_symmetry_cyl_section))
      if (so_geom(isource) == so_surface) then
         call set_surface_source_x(est,so_args(isource),xseg,kseg,
     $                             rn_args(r),lc_args(x))
      else if (so_geom(isource) == so_volume) then
         if (so_type(isource) != so_snapshot) then
            call set_volume_source_x(est,so_args(isource),xseg,kseg,
     $                               rn_args(r),lc_args(x))
         else
            call set_snapshot_source_x(est,so_args(isource),xseg,kseg,
     $                                 rn_args(r),lc_args(x))
         end if
      else
         assert("Untreated source geometry" == " ")
      end if

      return
      end

@ Source position on a surface. This version handles 2-D cases and 3-D
cases in which the surface intersections with |y| = constant planes do
not vary with |y| (i.e., |geometry_symmetry_plane_hw|, 
|geometry_symmetry_cyl_hw|, and |geometry_symmetry_cyl_section|). 
In these cases, this routine just needs to sample along on a line. 
If present, the third dimension is sampled uniformly.

@<Functions...@>=
      subroutine set_surface_source_x(est,so_dummy(isource),xseg,kseg,
     $                                rn_dummy(r),lc_dummy(x))
      implicit_none_f77
      gi_common
      sc_common
      zn_common
      implicit_none_f90

      so_decl(isource)           // Input
      integer est,xseg,kseg
      rn_decl(r)                 // Input/output
      lc_decl(x)                 // Output

      integer zone               // Local
      real urd,r0,r1,fr,urd_y,delta_y,y,delta
      vc_decl(deltax)
      vc_decl(xsrc)
      vc_decl(vzero)
      vc_decl(vone)
      vc_decl(vnorm)
      rn_decls

      sources_localcommon

      lc_decls

      if (est == tl_est_post_process) then
         urd=half
      else
         rn_next(urd,r)
      end if

/* For cylindrical (toroidal) geometry, weight sampling along this
   surface by the major radius:
 */
      if ((geometry_symmetry == geometry_symmetry_cylindrical) 
     $      || (geometry_symmetry == geometry_symmetry_cyl_hw)
     $      || (geometry_symmetry == geometry_symmetry_cyl_section)) then
         r0=sector_points[xseg][0][1]
         r1=sector_points[xseg][1][1]
         assert(sector_points[xseg][0][2] == zero)
         assert(sector_points[xseg][1][2] == zero)
         if (r1 != r0) urd=(sqrt(r0**2 + urd*(r1**2-r0**2)) - r0) / (r1 - r0)
      else
         assert((geometry_symmetry == geometry_symmetry_plane)
     $        || (geometry_symmetry == geometry_symmetry_plane_hw)
     $        || (geometry_symmetry == geometry_symmetry_oned))
      end if
/* 
   Interpolate along the surface according to |urd|:
*/
      vc_difference(sector_points[xseg][1],sector_points[xseg][0],deltax)
      vc_xvt(sector_points[xseg][0],deltax,urd,xsrc)
/*
   For 3-D cases. This assumes shape in $x$ - $z$ plane is independent of
   $y$ and that sectors are surfaces of constant $y$. This is the 
   assumption behind these three symmetry types.
*/
      zone=sector_zone[xseg]
      if ((geometry_symmetry == geometry_symmetry_plane_hw)
     $     || (geometry_symmetry == geometry_symmetry_cyl_hw)
     $     || (geometry_symmetry == geometry_symmetry_cyl_section)) then
         assert(zone_min[zone][2] != zone_max[zone][2])
         if (est == tl_est_post_process) then
            urd_y=half
         else
            rn_next(urd_y,r)
         end if
         delta_y=zone_max[zone][2]-zone_min[zone][2]
         y=zone_min[zone][2]+urd_y*delta_y
         assert(xsrc[2] == zero)
         if (geometry_symmetry == geometry_symmetry_plane_hw) then
            vc_set(xsrc,xsrc[1],y,xsrc[3])
         else
/*
   |vc_set| does not use a temporary variable, so have to define |r0|.
*/
            r0=xsrc[1]
            vc_set(xsrc,r0*cos(y),r0*sin(y),xsrc[3])
         end if
      end if

/* Use |surface_reflect| to get an inward-pointing normal to this surface
   (should point into a plasma or vacuum cell).
 */
      vc_set(vzero,zero,zero,zero)
      vc_set(vone,zero,zero,one)
      call surface_reflect(sector_surface[xseg],vc_args(xsrc),vc_args(vzero),
     $     vc_args(vone),vc_args(vnorm))
      vc_copy(xsrc,x_surface)    // For use in |set_plate_source_v|
/* 
   Then take a small step along the normal to be sure we are in the cell.
   In some (unusual) cases, this step can actually be big enough to enter
   an adjacent cell.  Added the loop shrink the size of the step until
   the resulting zone matches the sector |zone|.
*/
      delta=geom_epsilon
loop: continue
      fr=delta/vc_abs(vnorm)
      vc_xvt(xsrc,vnorm,fr,lc_x(x))
/*
   The move of the source sampling to the master means
   that the entire process is now serial and can 
   actually become the principal bottleneck in large
   runs.  The single most time consuming component
   of the source sampling is locating the point in the
   geometry, essentially a call to |locate_point|.
   The remainder of the sampling process only needs
   the zone number.  We set that here and also set 
   the cell number to |int_uninit| to act as a flag
   to the tracking routine so that it can then set
   the location.

   Note that at that point we need not be concerned about
   whether or not the above |geom_epsilon| step moved
   the flight into an adjacent cell or zone, as long as
   that location is itself consistent; the tracking routine
   will be able to follow it from there.
*/
@#if 0
      lc_set_a(x)
      if (lc_zone(x) != zone) then
         delta*=half
         assert(delta > epsilon)  // Give up at some point
         go to loop
      end if
@#else
      lc_zone(x)=zone
      lc_cell(x)=int_uninit
@#endif
      return
      end

@ Source position in a volume. version handles 2-D cases and 3-D
cases in which the surface intersections with |y| = constant planes do
not vary with |y| (i.e., |geometry_symmetry_plane_hw|, 
|geometry_symmetry_cyl_hw|, and |geometry_symmetry_cyl_section|). 
In these cases, the routine samples out of a rectangle and uses rejection 
to narrow the selection to being inside the given zone.  If present,
the third dimension is sampled uniformly.

@<Functions...@>=
      subroutine set_volume_source_x(est,so_dummy(isource),xseg,kseg,
     $                               rn_dummy(r),lc_dummy(x))
      implicit_none_f77
      gi_common
      sc_common
      zn_common
      implicit_none_f90

      so_decl(isource)           // Input
      integer est,xseg,kseg
      rn_decl(r)                 // Input/output
      lc_decl(x)                 // Output

      integer i                  // Local
      real urd_x,urd_y,urd_z,r0,r1,x0,y0,z0,delta_y


      lc_decls
      rn_decls

      if (est == tl_est_post_process) then
         vc_copy(zone_center[xseg],lc_x(x))
         lc_set_a(x)
         assert((lc_cell(x) > 0) && (lc_zone(x) == xseg))
      else
         i=0
loop:    continue
         i++
//         assert(i < 200)     // Catch bugs; temporary
         rn_next(urd_x,r)
         rn_next(urd_z,r)
/* 
   For cylindrical (toroidal) geometry, weight sampling along this
   surface by the major radius.  In these cases, the first component
   of |zone_min| is the major radius; the second is the toroidal angle.
*/
         if ((geometry_symmetry == geometry_symmetry_cylindrical) 
     $        || (geometry_symmetry == geometry_symmetry_cyl_hw)
     $        || (geometry_symmetry == geometry_symmetry_cyl_section)) then
            r0=zone_min[xseg][1]
            r1=zone_max[xseg][1]
            if (r1 != r0) urd_x=(sqrt(r0**2 + urd_x*(r1**2-r0**2)) - r0) / (r1 - r0)
         else
            assert((geometry_symmetry == geometry_symmetry_plane)
     $           || (geometry_symmetry == geometry_symmetry_plane_hw)
     $           || (geometry_symmetry == geometry_symmetry_oned))
         end if

         x0=zone_min[xseg][1]+urd_x*(zone_max[xseg][1]-zone_min[xseg][1])
         z0=zone_min[xseg][3]+urd_z*(zone_max[xseg][3]-zone_min[xseg][3]) 

         if ((geometry_symmetry == geometry_symmetry_plane_hw)
     $        || (geometry_symmetry == geometry_symmetry_cyl_hw)
     $        || (geometry_symmetry == geometry_symmetry_cyl_section)) then
            assert(zone_min[xseg][2] != zone_max[xseg][2])
            if (est == tl_est_post_process) then
               urd_y=half
            else
               rn_next(urd_y,r)
            end if
            delta_y=zone_max[xseg][2]-zone_min[xseg][2]
            y0=zone_min[xseg][2]+urd_y*delta_y
         else
            assert(zone_min[xseg][2] == zone_max[xseg][2])
            y0=zone_min[xseg][2]
         end if
         if ((geometry_symmetry == geometry_symmetry_plane) 
     $        || (geometry_symmetry == geometry_symmetry_plane_hw)
     $        || (geometry_symmetry == geometry_symmetry_oned)) then
            vc_set(lc_x(x),x0,y0,z0)
         else
            vc_set(lc_x(x),x0*cos(y0),x0*sin(y0),z0)
         end if

         lc_set_a(x)

         if (lc_cell(x) < 0 || lc_zone(x) != xseg) goto loop
      end if

      return
      end

@ Set source position using particle from snapshot at end of previous
time step.  Most of the arguments are not needed here; retained only
for uniformity.

@<Functions...@>=
      subroutine set_snapshot_source_x(est,so_dummy(isource),xseg,kseg,
     $                                 rn_dummy(r),lc_dummy(x))
      implicit_none_f77
      so_common
      implicit_none_f90

      so_decl(isource)           // Input
      integer est,xseg,kseg
      rn_decl(r)                 // Input/output
      lc_decl(x)                 // Output

      integer iparam,seg_tot     // Local
      real x1,x2,x3

      assert(source_num_parameters[isource] > 0)
      seg_tot=so_base(isource)+kseg
      do iparam=1,source_num_parameters[isource]
         if (so_params_list(iparam,isource) == so_param_lc_x1) then
            x1=so_params_data(iparam,seg_tot,isource)
         else if (so_params_list(iparam,isource) == so_param_lc_x2) then
            x2=so_params_data(iparam,seg_tot,isource)
         else if (so_params_list(iparam,isource) == so_param_lc_x3) then
            x3=so_params_data(iparam,seg_tot,isource)
         end if
      end do
      vc_set(lc_x(x),x1,x2,x3)

      assert(source_num_iparameters[isource] > 0)
      do iparam=1,source_num_iparameters[isource]
         if (so_iparams_list(iparam,isource) == so_iparam_lc_cell) then
            lc_cell(x)=so_iparams_data(iparam,seg_tot,isource)
         else if (so_iparams_list(iparam,isource) == so_iparam_lc_zone) then
            lc_zone(x)=so_iparams_data(iparam,seg_tot,isource)
         end if
      end do
/*
   These are the other parameters set by |lc_set_a|.  Note that the
   consistency of $x$ and the cell and zone will be checked together
   with the rest of the flight information at a higher level.
*/
      lc_face(x)=0
      lc_cell_next(x)=0
      lc_zone_next(x)=0
      lc_sector(x)=0
      lc_sector_next(x)=0

      return
      end

@ Source velocity. Given a source ``segment'', sample a velocity
using routines specific for the type of that source. 

@<Functions...@>=
      subroutine set_source_v(so_dummy(isource),xseg,kseg,lc_dummy(x),
     $   rn_dummy(r),vc_dummy(vsrc))
      implicit_none_f77
      so_common                  // Common
      implicit_none_f90

      so_decl(isource)           // Input
      integer xseg,kseg
      lc_decl(x)                
      rn_decl(r)                 // Input/output
      vc_decl(vsrc)              // Output


      if (so_type(isource) == so_plate) then 
         call set_plate_source_v(so_args(isource),xseg,kseg,lc_args(x),
     $        rn_args(r),vc_args(vsrc))
      else if (so_type(isource) == so_puff) then
         call set_puff_source_v(so_args(isource),xseg,kseg,lc_args(x),
     $        rn_args(r),vc_args(vsrc))
      else if (so_type(isource) == so_recomb) then
         call set_recomb_source_v(so_args(isource),xseg,kseg,lc_args(x),
     $        rn_args(r),vc_args(vsrc))
      else if (so_type(isource) == so_vol_source) then
         call set_vol_source_v(so_args(isource),xseg,kseg,lc_args(x),
     $        rn_args(r),vc_args(vsrc))
      else if (so_type(isource) == so_snapshot) then
         call set_snapshot_source_v(so_args(isource),xseg,kseg,lc_args(x),
     $        rn_args(r),vc_args(vsrc))
      else if (so_type(isource) == so_plt_e_bins) then 
         call set_plt_e_bins_source_v(so_args(isource),xseg,kseg,lc_args(x),
     $        rn_args(r),vc_args(vsrc))
      else
         assert("Unsupported source type" == " ")
      end if

      return
      end

@ Plate source velocity.
      
@<Functions...@>=
      subroutine set_plate_source_v(so_dummy(isource),xseg,kseg,lc_dummy(x),
     $   rn_dummy(r),vc_dummy(vsrc))
      implicit_none_f77
      sc_common
      so_common
      implicit_none_f90

      so_decl(isource)           // Input
      integer xseg,kseg
      lc_decl(x)                
      rn_decl(r)                 // Input/output
      vc_decl(vsrc)              // Output

      integer j,seg_tot,iparam   // Local
      real wa,ion_energy,e_ion_mult
      real vgauss[1]
/*
   For testing of miscellaneous source parameter implementation
   of sheath parameters.
*/
      assert(source_num_parameters[isource] > 0)
      seg_tot=so_base(isource)+kseg
      do iparam=1,source_num_parameters[isource]
         if (so_params_list(iparam,isource) == so_param_e_ion_mult) then
            e_ion_mult=so_params_data(iparam,seg_tot,isource)
         end if
      end do
      wa=zero
      if (e_ion_mult > zero) then
/* Sample a Gaussian energy at background temperature */
         do j=1,3
            rn_gauss_next(vgauss,r)
            wa+=vgauss[1]**2
         end do
      else
         assert(e_ion_mult == zero)
      end if

      call plate_v_details(so_args(isource),xseg,kseg,lc_args(x),wa,
     $     vc_args(vsrc),ion_energy)

      return
      end

@ Plate velocity details. This one routine provides all of the detailed
information about the computation of the incident velocity and energy.
The interface is chosen so as to be callable from both runtime and
post-processing environments. The |wa| argument represents the Gaussian
energy factor. For the former this is a random variable; for the latter,
the average value is used. 

@<Functions...@>=
      subroutine plate_v_details(so_dummy(isource),xseg,kseg,lc_dummy(x),wa,
     $   vc_dummy(vsrc),ion_energy)

      implicit_none_f77
      so_common                  // Common
      pr_common
      bk_common
      sc_common
      sp_common
      zn_common
      implicit_none_f90

      so_decl(isource)           // Input
      integer xseg,kseg
      real wa
      lc_decl(x) 
               
      vc_decl(vsrc)              // Output
      real ion_energy

      integer seg_tot,iparam     // Local
      real e_ion_delta,e_ion_sheath,e_ion_mult
      sp_decl(spion)  
      pr_background_decl(back)

      assert(so_geom(isource) == so_surface)
      spion=so_root_sp(isource)
      back=pr_background_lookup(spion)
      assert(pr_background_check(back))
      wa=half*wa*bk_temp(back,lc_zone(x))
/*
   Sheath parameters are now stored as miscellaneous source parameter.
*/
      assert(source_num_parameters[isource] > 0)
      seg_tot=so_base(isource)+kseg
      do iparam=1,source_num_parameters[isource]
         if (so_params_list(iparam,isource) == so_param_e_ion_delta) then
            e_ion_delta=so_params_data(iparam,seg_tot,isource)
         else if (so_params_list(iparam,isource) == so_param_e_ion_sheath) then
            e_ion_sheath=so_params_data(iparam,seg_tot,isource)
         else if (so_params_list(iparam,isource) == so_param_e_ion_mult) then
            e_ion_mult=so_params_data(iparam,seg_tot,isource)
         end if
      end do
/*
   This is the sheath model, for better or worse.
*/
@#if 0
// This has now been relaxed
      assert(sp_z(spion) == 1) // If $> 1$, should have term $\propto Z$
@#endif
      ion_energy=e_ion_delta + e_ion_mult*wa + e_ion_sheath*sp_z(spion)
      assert(ion_energy >= zero)

      call plate_v_vector(ion_energy,sp_args(spion),xseg,vc_args(vsrc))

      return
      end

@ Determine incident ion velocity vector from input energy.

@<Functions...@>=
      subroutine plate_v_vector(ion_energy,sp_dummy(spion),xseg,vc_dummy(vsrc))

      implicit_none_f77
      sp_common                // Common
      sc_common
      implicit_none_f90

      real ion_energy          // Input
      integer xseg
      sp_decl(spion)

      vc_decl(vsrc)             // Output

      real ion_velocity         // Local
      vc_decl(vzero)
      vc_decl(vone)

      sources_localcommon

      ion_velocity=sqrt(two*ion_energy/sp_m(spion))
/*
   This should work if the analogous code for sampling surface $x$ works 
   |lc_x(x)| should be slightly off of the plate. This generates a
   velocity which heads directly back to it, where |process_sector|
   is called to do the rest of the job.
 */
      vc_set(vzero,zero,zero,zero)
      vc_set(vone,zero,zero,-one)  
/*
   Use normal at point {\em on surface}, obtained by common from |surface_source_x|
*/
      call surface_reflect(sector_surface[xseg],vc_args(x_surface),
     $     vc_args(vzero),vc_args(vone),vc_args(vsrc))
      vc_scale(ion_velocity,vsrc,vsrc)

      return
      end

@ Gas puff source velocity. This is for a cosine distribution, appropriate
for a surface source. There might also be a need for a pure volume source
with an isotropic distribution; we would need another routine for that.
      
@<Functions...@>=
      subroutine set_puff_source_v(so_dummy(isource),xseg,kseg,lc_dummy(x),
     $   rn_dummy(r),vc_dummy(vsrc))
      implicit_none_f77
      so_common                  // Common
      sc_common
      sp_common
      implicit_none_f90

      so_decl(isource)           // Input
      integer xseg,kseg
      lc_decl(x)                
      rn_decl(r)                 // Input/output
      vc_decl(vsrc)              // Output

      integer j,iparam                  // Local
      real vpuff,energy,p,xi,cos_theta,sin_theta,phi,cos_phi,sin_phi
      real vgauss[1]
      rn_decls
      vc_decl(vcos)
@#if COUETTE 
      real ran,log_ran

      call random_gauss(vcos,2,rn_args(r))   // Maxwell flux for Couette flow

      rn_next(ran,r)
      log_ran=log(ran)
      vcos[3]=sqrt(-(log_ran+log_ran))
@#else
      p=real_uninit
      if (source_num_gparameters(isource) > 0) then
         do iparam=1,source_num_gparameters[isource]
            if (so_gparams_list(iparam,isource) == so_gparam_puff_exponent) 
     $        p=so_gparams_data(iparam,isource)
         end do
      end if
      if ((p == one) || (p == real_uninit)) then
         rn_cos_next(vcos,r)
      else
/*
   The more general method for getting a ``cosine to a power'' distribution.
*/
         rn_next(xi,r)
         cos_theta=xi**(one/(one+p))
         sin_theta=sqrt(one - xi**(two/(one+p)))
         if (sin_theta < zero) sin_theta=zero
         if (sin_theta > one) sin_theta=one
         rn_next(phi,r)
         phi=PI*(two*phi-one)
         cos_phi=cos(phi)
         sin_phi=sin(phi)

         vcos[1]=sin_theta*cos_phi
         vcos[2]=sin_theta*sin_phi
         vcos[3]=cos_theta
      end if
@#endif
/* 
   To get a thermal particle as in original DEGAS, need to sample
   each component from a Gaussian.
 */
      vpuff=zero
      do j=1,3
         rn_gauss_next(vgauss,r)
         vpuff+=vgauss[1]**2
      end do

      call puff_v_details(so_args(isource),xseg,kseg,lc_args(x),vpuff,
     $     vc_dummy(vcos),vc_dummy(vsrc),energy)
      return
      end

@ Puff velocity details.

@<Functions...@>=
      subroutine puff_v_details(so_dummy(isource),xseg,kseg,lc_dummy(x),vpuff,
     $   vc_dummy(vcos),vc_dummy(vsrc),energy)

      implicit_none_f77
      so_common                  // Common
      sc_common
      sp_common
      implicit_none_f90

      so_decl(isource)           // Input
      integer xseg,kseg
      real vpuff
      lc_decl(x)                
      vc_decl(vcos)
      vc_decl(vsrc)              // Output
      real energy

      integer iparam             // Local
      real temp            
      sp_decl(spsrc)
      vc_decl(vzero)

      sources_localcommon

      assert(so_geom(isource) == so_surface)
      spsrc=so_species(isource)

      vc_set(vzero,zero,zero,zero)
/*  Use now common value of |x_surface|.
*/
      call surface_reflect(sector_surface[xseg],vc_args(x_surface),
     $     vc_args(vzero),vc_args(vcos),vc_args(vsrc))

      assert(source_num_gparameters[isource] > 0)
      do iparam=1,source_num_gparameters[isource]
         if (so_gparams_list(iparam,isource) == so_gparam_puff_temp) 
     $        temp=so_gparams_data(iparam,isource)
      end do
      assert(temp > zero)
      energy=half*vpuff*temp
@#if COUETTE
      vpuff=sqrt(temp/sp_m(spsrc)) // Maxwell flux for Couette flow
      vc_scale(vpuff,vsrc,vsrc)
      vsrc[2]+=const(1.,3)       // Couette flow velocity      
@#else
      vpuff=sqrt((vpuff*temp)/sp_m(spsrc))   // 1 eV for box case
      vc_scale(vpuff,vsrc,vsrc)
@#endif

      return
      end

@ Recombination source velocity.
      
@<Functions...@>=
      subroutine set_recomb_source_v(so_dummy(isource),xseg,kseg,lc_dummy(x),
     $   rn_dummy(r),vc_dummy(vsrc))
      implicit_none_f77
      so_common                  // Common
      pr_common
      bk_common
      gi_common
      sp_common
      zn_common
      implicit_none_f90

      so_decl(isource)           // Input
      integer xseg,kseg
      lc_decl(x)                
      rn_decl(r)                 // Input/output
      vc_decl(vsrc)              // Output

      integer j                  // Local
      real vion
      real vgauss[1]
      sp_decl(spsrc)
      vc_decl(vb_flow)
      pr_background_decl(spback)

      assert(so_geom(isource) == so_volume)
      spsrc=so_species(isource)
@#if 0
/* Need also species of recombining ion. This should be stored in the
   source class, but this appears to be a sort of miscellaneous info.
   for which we do not have a convenient slot (e.g., along with neutralized
   plate source species and gas puff energy).
 */
      spback=0
      do j=1,pr_bkrc_num
         if (pr_bkrc_prod(j,1) == spsrc) then
            assert(spback == 0)
            spback=pr_bkrc_rg(j,2)
         end if
      end do
@#else
      spback=pr_background_lookup(so_root_sp(isource))
@#endif
      assert(spback != 0)
      v_ext_to_int(lc_x(x),bk_v(spback,lc_zone(x)),vb_flow,geometry_symmetry,background_coords)
      vion=sqrt(bk_temp(spback,lc_zone(x))/sp_m(spsrc))
      do j=1,3
         rn_gauss_next(vgauss,r)
         vsrc[j]=vion*vgauss[1] + vb_flow[j]
      end do

      return
      end

@ Volume source velocity.  The basic expressions used here are directly
analogous to those for recombination, although the structure of this and
the ``details'' routine more closely resemble the plate and puff routines.
      
@<Functions...@>=
      subroutine set_vol_source_v(so_dummy(isource),xseg,kseg,lc_dummy(x),
     $   rn_dummy(r),vc_dummy(vsrc))
      implicit_none_f77
      so_common                     // Common
      implicit_none_f90

      so_decl(isource)              // Input
      integer xseg,kseg
      lc_decl(x)                
      rn_decl(r)                    // Input/output
      vc_decl(vsrc)                 // Output

      real temp                     // Local
      vc_decl(v_gauss)

      assert(so_geom(isource) == so_volume)

      call random_gauss(v_gauss,3,rn_args(r))
      call vol_source_v_details(so_args(isource),xseg,kseg,lc_args(x),
     $                          vc_args(v_gauss),vc_args(vsrc),temp)

      return
      end

@ Volume source velocity details. This routine extracts the description
of the soure velocity from the miscellaenous source parameter arrays.
The interface is chosen so as to be callable from both runtime and
post-processing environments. The |v_gauss| argument is a velocity 
vector in which each component is Gaussian distributed.  For the former 
this is a random variable; for the latter, the average value (i.e.,
zero) is used. The temperature is also returned so that the average
energy can be computed in post-processing.

@<Functions...@>=
      subroutine vol_source_v_details(so_dummy(isource),xseg,kseg,lc_dummy(x),
     $                                vc_dummy(v_gauss),vc_dummy(vsrc),temp)

      implicit_none_f77
      so_common                     // Common
      bk_common
      gi_common
      sp_common
      implicit_none_f90

      so_decl(isource)              // Input
      integer xseg,kseg
      lc_decl(x) 
      vc_decl(v_gauss)
      vc_decl(vsrc)                 // Output
      real temp

      integer i,seg_tot,iparam      // Local
      real v1,v2,v3,vion
      sp_decl(spsrc)
      vc_decl(vb_flow)

      spsrc=so_species(isource)
      v1=zero
      v2=zero
      v3=zero

      assert(source_num_parameters[isource] > 0)
      seg_tot=so_base(isource)+kseg
      do iparam=1,source_num_parameters[isource]
         if (so_params_list(iparam,isource) == so_param_temperature) then
            temp=so_params_data(iparam,seg_tot,isource)
            assert(temp > zero)
         else if (so_params_list(iparam,isource) == so_param_v1) then
            v1=so_params_data(iparam,seg_tot,isource)
         else if (so_params_list(iparam,isource) == so_param_v2) then
            v2=so_params_data(iparam,seg_tot,isource)
         else if (so_params_list(iparam,isource) == so_param_v3) then
            v3=so_params_data(iparam,seg_tot,isource)
         end if
      end do
      vc_set(vsrc,v1,v2,v3)

      v_ext_to_int(lc_x(x),vsrc,vb_flow,geometry_symmetry,background_coords)
      vion=sqrt(temp/sp_m(spsrc))
      do i=1,3
         vsrc[i]=vion*v_gauss[i]+vb_flow[i]
      end do

      return
      end

@ Snapshot source velocity.  Note that most of the arguments are not
used and are retained only for uniformity.
      
@<Functions...@>=
      subroutine set_snapshot_source_v(so_dummy(isource),xseg,kseg,lc_dummy(x),
     $   rn_dummy(r),vc_dummy(vsrc))
      implicit_none_f77
      so_common                  // Common
      implicit_none_f90

      so_decl(isource)           // Input
      integer xseg,kseg
      lc_decl(x)                
      rn_decl(r)                 // Input/output
      vc_decl(vsrc)              // Output

      integer iparam,seg_tot     // Local
      real v1,v2,v3

      assert(source_num_parameters[isource] > 0)
      seg_tot=so_base(isource)+kseg
      do iparam=1,source_num_parameters[isource]
         if (so_params_list(iparam,isource) == so_param_pt_v1) then
            v1=so_params_data(iparam,seg_tot,isource)
         else if (so_params_list(iparam,isource) == so_param_pt_v2) then
            v2=so_params_data(iparam,seg_tot,isource)
         else if (so_params_list(iparam,isource) == so_param_pt_v3) then
            v3=so_params_data(iparam,seg_tot,isource)
         end if
      end do
      vc_set(vsrc,v1,v2,v3)

      return
      end

@ Velocity for plate source specified with binned energy distribution.  
      
@<Functions...@>=
      subroutine set_plt_e_bins_source_v(so_dummy(isource),xseg,kseg,lc_dummy(x),
     $   rn_dummy(r),vc_dummy(vsrc))
      implicit_none_f77
      implicit_none_f90

      so_decl(isource)           // Input
      integer xseg,kseg
      lc_decl(x)                
      rn_decl(r)                 // Input/output
      vc_decl(vsrc)              // Output

      real urd,ion_energy        // Local
      rn_decls

      rn_next(urd,r)
      call plt_e_bins_v_details(so_args(isource),xseg,kseg,lc_args(x),urd,
     $     vc_args(vsrc),ion_energy)

      return
      end

@ Details for computing velocity for plate source with binned energy distribution. 
This interface accommodates both runtime and post processing calls.  The |urd|
argument is a uniform random deviate in the former case; in the latter, the average
values of $1/2$ should be used.
      
@<Functions...@>=
      subroutine plt_e_bins_v_details(so_dummy(isource),xseg,kseg,lc_dummy(x),
     $   urd,vc_dummy(vsrc),ion_energy)

      implicit_none_f77
      so_common                                         // Common
      sp_common
      implicit_none_f90

      so_decl(isource)                                  // Input
      integer xseg,kseg
      real urd
      lc_decl(x) 
               
      vc_decl(vsrc)                                     // Output
      real ion_energy

      integer iparam,num_bins,e_spacing,i_bin,seg_tot   // Local
      real e_min,e_delta,ran,x_bin,e_i,e_im1,pdf_i
      real e_prob[0:so_e_bins_num_max]
      sp_decl(spion)  

      external find_index                               // External
      real find_index

      assert(source_num_giparameters[isource] > 0)
      do iparam=1,source_num_giparameters[isource]
         if (so_giparams_list(iparam,isource) == so_giparam_e_bins_num) then
            num_bins=so_giparams_data(iparam,isource)
         else if (so_giparams_list(iparam,isource) == so_giparam_e_bins_spacing) then
            e_spacing=so_giparams_data(iparam,isource)
         end if
      end do
      assert((num_bins > 0) && (num_bins <= so_e_bins_num_max))
      assert(e_spacing > 0)

      assert(source_num_gparameters[isource] > 0)
      do iparam=1,source_num_gparameters[isource]
         if (so_gparams_list(iparam,isource) == so_gparam_e_bins_min) then
            e_min=so_gparams_data(iparam,isource)
         else if (so_gparams_list(iparam,isource) 
     $           == so_gparam_e_bins_delta) then
            e_delta=so_gparams_data(iparam,isource)
         end if
      end do
      if (e_spacing == so_e_bins_spacing_linear) then
         assert(e_min > zero)
      end if
      assert(e_delta > zero)
      
      assert(source_num_parameters[isource] > 0)
      seg_tot=so_base(isource)+kseg
      i_bin=0
      e_prob[i_bin]=zero   // Didn't include in the source parameters
      do iparam=1,source_num_parameters[isource]
         if (so_params_list(iparam,isource) == so_param_e_bin_prob) then
            i_bin++
            e_prob[i_bin]=so_params_data(iparam,seg_tot,isource)
         end if
      end do
      assert(i_bin >= num_bins)  

      if (urd != real_unused) then
/*
   The argument here needs to be the number of values, not
   the number of bins.
*/
         x_bin=find_index(urd,e_prob,num_bins+1)
         ion_energy=e_min+x_bin*e_delta
         if (e_spacing == so_e_bins_spacing_log) then
            ion_energy=exp(ion_energy)
         else
            assert(e_spacing == so_e_bins_spacing_linear)
         end if
         assert(ion_energy > zero)
      else
/*
  Compute the average energy from the distribution.
  I.e., routine is being called during post-processing.
*/
         ion_energy=zero
         do i_bin=1,num_bins
            e_i=e_min+areal(i_bin)*e_delta
            e_im1=e_min+areal(i_bin-1)*e_delta
            if (i_bin > 1) then
               pdf_i=e_prob[i_bin]-e_prob[i_bin-1]
            else
               pdf_i=e_prob[1]
            end if
            if (e_spacing == so_e_bins_spacing_linear) then
               ion_energy+=pdf_i*half*(e_i+e_im1)
            else if (e_spacing == so_e_bins_spacing_log) then
               e_i=exp(e_i)
               e_im1=exp(e_im1)
               ion_energy+=pdf_i*(e_i-e_im1)/e_delta
            else
               assert('Unexpected energy bin spacing' == ' ')
            end if
         end do
      end if

      assert(so_geom(isource) == so_surface)
      spion=so_root_sp(isource)
      call plate_v_vector(ion_energy,sp_args(spion),xseg,vc_args(vsrc))

      return
      end

@ Initialize particle parameters for a snapshot source.  These
may vary within the snapshot source group and cannot, thus, be set
from the generic source group parameters.

@<Functions...@>=
      subroutine init_snapshot_pt(so_dummy(isource),xseg,kseg,pt_dummy(x))
      implicit_none_f77
      so_common                   // Common
      implicit_none_f90

      so_decl(isource)            // Input
      integer xseg,kseg
      pt_decl(x)                  // Output

      integer iparam,seg_tot      // Local
/*
   The idea here is to duplicate the functionality of |pt_init|.
*/
      assert(source_num_iparameters[isource] > 0)
      seg_tot=so_base(isource)+kseg
      do iparam=1,source_num_iparameters[isource]
         if (so_iparams_list(iparam,isource) == so_iparam_pt_sp) then
            pt_sp(x)=so_iparams_data(iparam,seg_tot,isource)
         else if (so_iparams_list(iparam,isource) == so_iparam_pt_test) then
            pt_test(x)=so_iparams_data(iparam,seg_tot,isource)
         else if (so_iparams_list(iparam,isource) == so_iparam_pt_type) then
            pt_type(x)=so_iparams_data(iparam,seg_tot,isource)
         else if (so_iparams_list(iparam,isource) == so_iparam_pt_author) then
/*
   An alternative here would be to set it to point to snapshot source,
   but that's redundant since we will know by the source group that it
   came from there.
*/
            pt_author(x)=so_iparams_data(iparam,seg_tot,isource)
         end if
      end do

      return
      end

@* INDEX.
