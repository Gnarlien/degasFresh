% $Id: 59c7dccf4552746b39da287528d14f622c81f0bb $
\Title{reaction}


@* A test program for the reaction routines.

\ID{$Id: 59c7dccf4552746b39da287528d14f622c81f0bb $}

@m FILE 'reaction.web'

@I macros.hweb
@I zone.hweb
@I background.hweb
@I geomint.hweb
@I species.hweb
@I problem.hweb
@I reactiondata.hweb
@I xsection.hweb
@I netcdf.hweb
@I sysdep.hweb
@I reaction.hweb
@I particle.hweb
@I string.hweb
@I random.hweb
@I materials.hweb

@ The main program.

@a
      @<Functions and Subroutines@>

@ Return the macroscopic reaction rate (i.e., with dimensions of 1/time)
for a particular location and reaction. The 
arguments here are |p|, the particle index and |ts_reac|, the reaction
index into the list of reactions participated in by the test species
corresponding to |p|. This routine uses |p| to pull together all of
the more specific information required by the lower level routine.
      
@<Functions...@>=
      function find_rate(pt_dummy(p),pr_background_dummy(back),
     $   pr_reaction_dummy(pr_reac),rn_dummy(x))
      implicit_none_f77
      pr_common                        // Common
      rd_common
      implicit_none_f90
      rd_decls
      real find_rate                   // Function
      pt_decl(p)                       // Input
      pr_background_decl(back)
      pr_reaction_decl(pr_reac)
      rn_decl(x)                       // Input / Output

      real independent_parameters[xs_max_indep_params]       // Local


      external eval_data               // External
      real eval_data
      
      call set_indep_params(pt_args(p),pr_background_args(back),
     $     reaction_rate_num_rand[pr_reac],rn_args(x),independent_parameters)
/*
   This check on density was put in with the BGK stuff. Not clear
   why it is needed, except that it avoids needless calls to |eval_data|.
*/ 
      if (independent_parameters[xs_var_density] != zero) then
         find_rate=eval_data(rd_data_args(reaction_rate,[pr_reac]),
     $     independent_parameters,rn_args(x))
         find_rate*=independent_parameters[xs_var_density]
      else
         find_rate=zero
      endif

      return
      end
      
@ Set the independent parameter values which will be needed to extract 
the relevant data from the data files. The input
arguments here are |p|, the particle index, |ts_reac|, the reaction
index into the list of reactions participated in by the test species
corresponding to |p|, and |num_random|, the number of uniform random
deviates needed for this reaction. The results of these computations
are passed back in the |independent_parameters| array.
      
@<Functions...@>=
      subroutine set_indep_params(pt_dummy(p),pr_background_dummy(back),
     $   num_random,rn_dummy(x),independent_parameters)
      implicit_none_f77
      zn_common
      bk_common
      gi_common
      sp_common
      pr_common
      implicit_none_f90
      pt_decl(p)                       // Input
      pr_background_decl(back)
      integer num_random
      rn_decl(x)                       // Input / Output
      vc_decl(vb_flow)
      vc_decl(vt_flow)
      vc_decl(vrel)
      pr_background_decl(back_test)
      pr_background_decl(back_elec)
      integer i
      real independent_parameters[xs_max_indep_params]

      st_decls

      v_ext_to_int(lc_x(pt_loc(p)),bk_v(back,lc_zone(pt_loc(p))),vb_flow,geometry_symmetry,background_coords)

      do i=1,xs_max_indep_params
         independent_parameters[i]=zero
      end do
      independent_parameters[xs_var_density]=bk_n(back,lc_zone(pt_loc(p)))
      vc_difference(pt_v(p),vb_flow,vrel)
      independent_parameters[xs_var_energy]=half*sp_m(pt_sp(p))*vc_abs2(vrel)
      independent_parameters[xs_var_temperature]=bk_temp(back,lc_zone(pt_loc(p)))
      independent_parameters[xs_var_sp_energy]=half*vc_abs2(vrel)
      independent_parameters[xs_var_sp_temperature]=bk_temp(back,lc_zone(pt_loc(p)))/sp_m(pr_background(back))
      independent_parameters[xs_var_zone]=lc_zone(pt_loc(p))
      independent_parameters[xs_var_v_test_1]=pt_v(p)[1]
      independent_parameters[xs_var_v_test_2]=pt_v(p)[2]
      independent_parameters[xs_var_v_test_3]=pt_v(p)[3]
      independent_parameters[xs_var_v_flow_1]=vb_flow[1]
      independent_parameters[xs_var_v_flow_2]=vb_flow[2]
      independent_parameters[xs_var_v_flow_3]=vb_flow[3]
      independent_parameters[xs_var_m_test]=sp_m(pt_sp(p))
      independent_parameters[xs_var_m_back]=sp_m(pr_background(back))

      if (num_random > 0) then
         assert(num_random <= xs_max_random)
         call random_array(independent_parameters[xs_var_1st_random_number],
     $        num_random,rn_args(x))
      end if

      if (bk_check(pr_background_lookup(pt_sp(p)))) then
         back_test=pr_background_lookup(pt_sp(p))
         v_ext_to_int(lc_x(pt_loc(p)),bk_v(back_test,lc_zone(pt_loc(p))),vt_flow,geometry_symmetry,background_coords)
      else
         vc_set(vt_flow,zero,zero,zero)
      end if
      independent_parameters[xs_var_v_flowb_1]=vt_flow[1]
      independent_parameters[xs_var_v_flowb_2]=vt_flow[2]
      independent_parameters[xs_var_v_flowb_3]=vt_flow[3]
      back_elec=pr_background_lookup(sp_lookup('e'))
      assert(bk_check(back_elec))
      independent_parameters[xs_var_elec_temperature]=bk_temp(back_elec,lc_zone(pt_loc(p)))
      
      return
      end
      
@ General function to extract a particular datum from the input data tables.
Note that the {\em calling} argument list is defined via a macro.

@<Functions...@>=
      function eval_data(eval_name,rank,ind_params_label,tab_index,spacing,
     $                   min,delta,data_table,
     $                   independent_parameters,rn_dummy(x))
      implicit_none_f77
      implicit_none_f90

      real eval_data                                    // Function

      character*xs_eval_name_length eval_name         // Input
      integer rank,ind_params_label[*],spacing[0:*],tab_index[*]
      real min[*],delta[*],data_table[0:*],
     $     independent_parameters[*]
      
      rn_decl(x)                                        // Input/output

      integer i                                          // Local
      real ind_params_value[xs_table_rank_max]

      external interpolate1,interpolate2,     // External
     $         interpolate3,interpolate4,interpolate5
      real interpolate1,interpolate2,
     $     interpolate3,interpolate4,interpolate5

      if (rank > 0) then
         do i=1,rank
            assert(ind_params_label[i] <= xs_max_indep_params)
            ind_params_value[i]=independent_parameters[ind_params_label[i]]
         end do
      end if

      if (eval_name == 'table') then
         if (rank > 0) then
            do i=1,rank
               if (spacing[i] == xs_spacing_log) 
     $              ind_params_value[i]=log(ind_params_value[i])
               if (spacing[i] == xs_spacing_log 
     $              || spacing[i] == xs_spacing_linear) then
                  ind_params_value[i]=(ind_params_value[i]-min[i])/delta[i] 
               else
                  assert('Unsupported spacing' == ' ')
               end if

            end do
         end if
         
         if (rank == 0) then                    // STICK ALL OF THIS ELSEWHERE
            eval_data=data_table[0]
         else if (rank == 1) then
            eval_data=interpolate1(ind_params_value[1],data_table[0],
     $           tab_index[1])
         else if (rank == 2) then
            eval_data=interpolate2(ind_params_value,data_table[0],
     $           tab_index[1])
         else if (rank == 3) then
            eval_data=interpolate3(ind_params_value,data_table[0],
     $           tab_index[1])
         else if (rank == 4) then
            eval_data=interpolate4(ind_params_value,data_table[0],
     $           tab_index[1])
         else if (rank == 5) then
            eval_data=interpolate5(ind_params_value,data_table[0],
     $           tab_index[1])
         end if

         if (spacing[0] == xs_spacing_log) 
     $        eval_data=exp(eval_data)

      else
         assert('Unsupported evaluation option' == ' ')
// Either implement separate fit clearing-house or use this one.
@#if 0
         eval_data=pd_eval_fit(eval_name,rank,ind_params_label,tab_index[1],
     $        data_table[0],ind_params_value,rn_args(x))
@#endif
      end if
             
      return
      end

@ Read in the reaction data from a file.  (This routine used to be in |reactionsetup.web|.)

@<Functions...@>=
      subroutine reaction_read(num)
      implicit_none_f77
      xs_common
      rc_common
      pr_common
      implicit_none_f90
      integer num
      integer fileid // Local
      xs_ncdecl
      nc_decls
      xs_decls
      @<Memory allocation interface@>
      
      fileid = ncopen(rc_filename(pr_reaction(num)),NC_NOWRITE,nc_stat)
      
      xs_ncread(fileid)
      
      call ncclose(fileid,nc_stat)
      
      call xs_copy(num)

      var_free(xs_data_tab)

      return
      end

@ Copy cross-sections and other dependent variable
information into reaction data and miscellaneous arrays.

@<Functions...@>=
      subroutine xs_copy(num)
      implicit_none_f77
      xs_common
      pr_common
      rc_common
      rd_common
      implicit_none_f90
      rd_decls
      xs_decls
      st_decls
      integer num                                         // Input
      integer i,j,jdep,k,rh_ind,num_random,i_var0         // Local
      integer spacing[0:xs_dep_var_max],var[xs_dep_var_max]
      real table_entry,min[xs_dep_var_max],delta[xs_dep_var_max]
      character*xs_eval_name_length eval_name
      @<Memory allocation interface@>
      
      if (xs_name != rc_sy(pr_reaction(num))) then
         write(stdout,*) ' Warning: reaction ',rc_sy(pr_reaction(num)),
     $        ' refers to a reaction data file containing a different name, ',
     $        xs_name
      end if

/* Initialize */
      rh_ind=0
      reaction_rate_rank[num]=0
      reaction_rate_eval_name[num]='unknown'
      reaction_rate_num_rand[num]=0
      reaction_rate_spacing[num][0]=xs_spacing_unknown
      do i=1,xs_table_rank_max
         reaction_rate_var[num][i]=xs_var_unknown
         reaction_rate_spacing[num][i]=xs_spacing_unknown
         reaction_rate_min[num][i]=zero
         reaction_rate_delta[num][i]=zero
         reaction_rate_tab_index[num][i]=0
      end do

      reaction_handling_num_rand[num]=0
      do j=1,rd_dep_var_max
         reaction_handling_rank[num][j]=0
         reaction_handling_eval_name[num][j]='unknown'
         reaction_handling_var0[num][j]=pr_var_unknown
         reaction_handling_spacing[num][j][0]=xs_spacing_unknown
         do i=1,xs_table_rank_max
            reaction_handling_var[num][j][i]=xs_var_unknown
            reaction_handling_spacing[num][j][i]=xs_spacing_unknown
            reaction_handling_min[num][j][i]=zero
            reaction_handling_delta[num][j][i]=zero
            reaction_handling_tab_index[num][j][i]=0
         end do
      end do

/* Main loop over dependent variables in this data file. First use local
   variables to store internal representations of data. */
      do jdep=1,xs_num_dep_var

         assert(xs_eval_name[jdep]SP(1:5)=='table' || xs_eval_name[jdep]=='cramd')  // Only options available in code
         if (xs_eval_name[jdep]SP(1:5)=='table') then
            eval_name='table'
         else 
            eval_name=xs_eval_name[jdep]
         end if

         i=0
         if (xs_spacing[i,jdep] == 'linear') then
            spacing[i]=xs_spacing_linear
         else if (xs_spacing[i,jdep] == 'log') then
            spacing[i]=xs_spacing_log
         else if (xs_spacing[i,jdep] == 'unknown') then
            spacing[i]=xs_spacing_unknown
         end if
         num_random=0
         if (xs_rank[jdep] > 0) then
            do i=1,xs_rank[jdep]
            
               if (xs_spacing[i,jdep] == 'linear') then
                  spacing[i]=xs_spacing_linear
               else if (xs_spacing[i,jdep] == 'log') then
                  spacing[i]=xs_spacing_log
               else if (xs_spacing[i,jdep] == 'unknown') then
                  spacing[i]=xs_spacing_unknown
               end if
        
               if (xs_var[i,jdep] == 'density') then
                  var[i]=xs_var_density
               else if (xs_var[i,jdep] == 'temperature') then
                  var[i]=xs_var_temperature
               else if (xs_var[i,jdep] == 'energy') then
                  var[i]=xs_var_energy
               else if (xs_var[i,jdep] == 'specific_temperature') then
                  var[i]=xs_var_sp_temperature
               else if (xs_var[i,jdep] == 'specific_energy') then
                  var[i]=xs_var_sp_energy
               else if (xs_var[i,jdep] == 'plasma_zone') then
                  var[i]=xs_var_zone
               else if (xs_var[i,jdep] == '1st_random_number') then
                  var[i]=xs_var_1st_random_number
                  num_random=max(1,num_random)
               else if (xs_var[i,jdep] == 'v_test_1') then
                  var[i]=xs_var_v_test_1
               else if (xs_var[i,jdep] == 'v_test_2') then
                  var[i]=xs_var_v_test_2
               else if (xs_var[i,jdep] == 'v_test_3') then
                  var[i]=xs_var_v_test_3
               else if (xs_var[i,jdep] == 'v_flow_1') then
                  var[i]=xs_var_v_flow_1
               else if (xs_var[i,jdep] == 'v_flow_2') then
                  var[i]=xs_var_v_flow_2
               else if (xs_var[i,jdep] == 'v_flow_3') then
                  var[i]=xs_var_v_flow_3
               else if (xs_var[i,jdep] == 'test_mass') then
                  var[i]=xs_var_m_test
               else if (xs_var[i,jdep] == 'back_mass') then
                  var[i]=xs_var_m_back
               else if (xs_var[i,jdep] == 'emitter_mass') then
                  var[i]=xs_var_m_emitter
               else if (xs_var[i,jdep] == 'v_flowb_1') then
                  var[i]=xs_var_v_flowb_1
               else if (xs_var[i,jdep] == 'v_flowb_2') then
                  var[i]=xs_var_v_flowb_2
               else if (xs_var[i,jdep] == 'v_flowb_3') then
                  var[i]=xs_var_v_flowb_3
               else if (xs_var[i,jdep] == 'elec_temperature') then
                  var[i]=xs_var_elec_temperature
               end if

               if (spacing[i] == xs_spacing_linear) then
                  min[i]=xs_min[i,jdep]*xs_mult[i,jdep]
                  delta[i]=
     $                 (xs_max[i,jdep]-xs_min[i,jdep])*xs_mult[i,jdep]/
     $                 areal(xs_tab_index[jdep][i]-1)
               else if (spacing[i] == xs_spacing_log) then
                  min[i]=log(xs_min[i,jdep]*xs_mult[i,jdep])
                  delta[i]=
     $                 log(xs_max[i,jdep]/xs_min[i,jdep])/
     $                 areal(xs_tab_index[jdep][i]-1)
               else
                  min[i]=zero
                  delta[i]=zero
               end if
            end do
         end if

/* 
   Reaction rates are stored separately since every reaction must have one.
   The other data from the xsection.hweb file are typically used to process,
   or handle, a particular reaction collision.
*/
         if (xs_var[0,jdep] == 'rate' || xs_var[0,jdep] == 'reaction_rate') 
     $  then
            reaction_rate_eval_name[num]=eval_name
            reaction_rate_rank[num]=xs_rank[jdep]
            assert(xs_rank[jdep] > 0 || xs_rank[jdep] <= xs_table_rank_max)
            reaction_rate_spacing[num][0]=spacing[0]
            reaction_rate_num_rand[num]=max(num_random,reaction_rate_num_rand[num])
            do i=1,xs_rank[jdep]
               reaction_rate_tab_index[num][i]=xs_tab_index[jdep][i]
               reaction_rate_spacing[num][i]=spacing[i]
               reaction_rate_var[num][i]=var[i]
               reaction_rate_min[num][i]=min[i]
               reaction_rate_delta[num][i]=delta[i]
            end do
            if (xs_rank[jdep] < xs_table_rank_max) then
               do i=xs_rank[jdep]+1,xs_table_rank_max
                  reaction_rate_tab_index[num][i]=1
               end do
            end if
            rd_ragged_realloc(reaction_rate,reaction_rate_tab_index,[num])

         else if (xs_var[0,jdep] == 'unknown') then
            goto skip
         else
            rh_ind++                                          // Handling
            i_var0=string_lookup(xs_var[jdep][0],pr_var0_list,
     $           pr_var0_num)
            if (i_var0 > 0) then
               reaction_handling_var0[num][rh_ind]=i_var0
            else
               pr_var0_num++
               var_realloca(pr_var0_list)
               pr_var0_list[pr_var0_num]
     $              =xs_var[jdep][0]
               reaction_handling_var0[num][rh_ind]=pr_var0_num
            end if
            reaction_handling_eval_name[num][rh_ind]=eval_name
            reaction_handling_rank[num][rh_ind]=xs_rank[jdep]
            reaction_handling_spacing[num][rh_ind][0]=spacing[0]
            reaction_handling_num_rand[num]=max(num_random,reaction_handling_num_rand[num])
            if (xs_rank[jdep] > 0) then
               do i=1,xs_rank[jdep]
                  reaction_handling_tab_index[num][rh_ind][i]=xs_tab_index[jdep][i]
                  reaction_handling_spacing[num][rh_ind][i]=spacing[i]
                  reaction_handling_var[num][rh_ind][i]=var[i]
                  reaction_handling_min[num][rh_ind][i]=min[i]
                  reaction_handling_delta[num][rh_ind][i]=delta[i]
               end do
            end if
            if (xs_rank[jdep] < xs_table_rank_max) then
               do i=xs_rank[jdep]+1,xs_table_rank_max
                  reaction_handling_tab_index[num][rh_ind][i]=1
               end do
            end if
            rd_ragged_realloc(reaction_handling,reaction_handling_tab_index,[num][rh_ind])
         end if       // Rate vs. handling if-then-else

/*
   Now retrieve the tabular data for this dependent variable...
*/
         do k=0,xs_tab_index[3,jdep]-1
            do j=0,xs_tab_index[2,jdep]-1
               do i=0,xs_tab_index[1,jdep]-1

                  table_entry=xs_data_table(i,j,k,jdep)

                  if (spacing[0] == xs_spacing_log) then
                     if (table_entry > zero) then
                        table_entry=log(table_entry*xs_mult[0,jdep])
                     else
                        table_entry=-const(1000000.0)
                     end if
                  else
                     table_entry=table_entry*xs_mult[0,jdep]
                  end if
                
/*
   And store in the appropriate |rd| data table again distinguishing reaction
   rate from handling data.
*/
                  if (xs_var[0,jdep] == 'rate' || xs_var[0,jdep] == 'reaction_rate') 
     $  then
                     rd_rate(i,j,k,num)=table_entry
                  else
                     rd_handling(i,j,k,rh_ind,num)=table_entry
                  end if
               end do
            end do
         end do
skip: continue
      end do

      return
      end

@ Read in stuff.

@<Functions...@>=
      subroutine init_reaction
      implicit_none_f77
      pr_common
      rd_common
      implicit_none_f90
      rd_decls
      integer i                 // Local
      @<Memory allocation interface@>
            
      var_alloc(reaction_rate_eval_name)
      var_alloc(reaction_rate_min)
      var_alloc(reaction_rate_delta)
      var_alloc(reaction_rate_rank)
      var_alloc(reaction_rate_spacing)
      var_alloc(reaction_rate_tab_index)
      var_alloc(reaction_rate_var)
      var_alloc(reaction_rate_num_rand)

      rd_ragged_alloc(reaction_rate)

      var_alloc(reaction_handling_eval_name)
      var_alloc(reaction_handling_min)
      var_alloc(reaction_handling_delta)
      var_alloc(reaction_handling_rank)
      var_alloc(reaction_handling_spacing)
      var_alloc(reaction_handling_tab_index)
      var_alloc(reaction_handling_var0)
      var_alloc(reaction_handling_var)
      var_alloc(reaction_handling_num_rand)

      rd_ragged_alloc(reaction_handling)

      if (pr_reaction_num > 0) then
         do i=1,pr_reaction_num
            call reaction_read(i)
         end do
      else
         rd_null_alloc(reaction_rate)
         rd_null_alloc(reaction_handling)
      end if

      return
      end

@* INDEX.
