% $Id: 372d88921b008bbff886af0d7da32b5758d030a7 $
\Title{Another Test for CRAMD}

@* Interactive test for CRAMD. Uses simplest possible plasma to minimize
required input.

\ID{$Id: 372d88921b008bbff886af0d7da32b5758d030a7 $}

@m FILE 'cramdtesta.web'

@I macros.hweb
@I string.hweb

@m num_output_params 20
@m num_test_species 2

@ The main program.

@a
      program cramdtesta
      implicit_none_f77
      implicit_none_f90

      character*LINELEN line,cwd                       // Local
      real n_ion,t_ion,t_elec,ih
      integer length,p,b,e,ierr,i
      real output_data[num_output_params,num_test_species]

      external cramd_ini
      integer cramd_ini

      st_decls

      call get_cwd(cwd)
      cwd=trim(cwd)\/'/../CRAMD/DATA/'
      call null_terminate(cwd)
      ierr=cramd_ini(cwd)
      assert(ierr == 0)

loop1: continue

      write(stdout,*) 'Enter: ion density (m**-3), ion & electron temperature (eV)'

      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      n_ion=read_real(line(b:e)) 
      assert(next_token(line,b,e,p))
      t_ion=read_real(line(b:e))*electron_charge
      assert(next_token(line,b,e,p))
      t_elec=read_real(line(b:e))*electron_charge

      write(stdout,*) 'Output units are cm^3/s for rates, eV cm^3/s for powers'
      write(stdout,*) 'Srec  Wep   Wpp    Wrad   WlrR  Wkh   W3be',
     $     '   IhSrec Whr'

/*
         write(stdout,*) 'Sie Sip Weh Wph Wlrw WHaw Sdis Fh Wem Wpm WHa_MAR MAR'
         write(stdout,'(1p12e11.3)') output_data[1][1],
     $        output_data[1][2],output_data[1][3],
     $        output_data[1][4],output_data[1][5],
     $        output_data[1][6],output_data[2][1],output_data[2][3],
     $        output_data[2][5],output_data[2][6],output_data[2][8],
     $        output_data[2][2]
*/

//      do i=1,60
//         t_elec=const(1.,1)**( const(1.,-1)*(i-1) - const(1.2)) * electron_charge
//         t_ion=t_elec
         call cramd_do_fort(n_ion,t_ion,t_elec,output_data)

         write(stdout,'(1p9e11.3)') output_data[1][7],
     $        output_data[1][8],output_data[1][9],
     $        output_data[1][10],output_data[1][11],
     $        output_data[1][12],output_data[1][13],output_data[1][14],
     $        output_data[1][15]

/* Check constraints */
      assert(abs(one-(output_data[2][3]+output_data[2][4])) < epsilon)
      if (output_data[1][7] > zero) then
         ih=output_data[1][14]/output_data[1][7]
         assert(abs(ih*(output_data[1][1]+output_data[1][2])+output_data[1][5]
     $        -(output_data[1][3]+output_data[1][4])) < const(1.,-8))
      end if
      assert(abs(output_data[1][14]+output_data[1][8]+output_data[1][9]
     $     -(output_data[1][13]+output_data[1][10]+output_data[1][12]))
     $     < const(1.,-8))

//      end do

      goto loop1

eof:  continue

      call cramd_finish()

      stop
      end

@* INDEX.
