% $Id: ea6716259e46bba9a7ef59e6221e607f13186403 $
\Title{updatebackground}

@* This program updates the background plasma parameters and DEGAS 2 sources
in iterations with a fluid plasma code. 

\ID{$Id: ea6716259e46bba9a7ef59e6221e607f13186403 $}

This program is designed to work in a manner analogous to |readbackground|
when used in conjunction with {\tt UEDGE} data files.  In fact,
|updatebackground| can be used in lieu of |readbackground| even on an
initial {\tt UEDGE}-based {\tt DEGAS 2} run.  The additional
functionality arises on subsequent iterations.  In these cases,
the code looks for the |oldsourcefile| (specified in the |degas2.in|)
file.  This will have been generated by |readbackground| or 
|updatebackground| prior to the previous {\tt DEGAS 2} run and
provides a record of the sources used in that run.  The magnitude
of these sources will be compared with the current ones.  If the
relative weights of the sources are ``similar'' to the originals
(``similar'' is controlled by the parameters |so_rel_wt_min| and
|so_rel_wt_max|), the changes are accounted for with weighting 
factors.  If the weight changes are larger, the source sampling
probabilities are recomputed.

@m FILE 'updatebackground.web'

@I macros.hweb
@I readfilenames.hweb
@I problem.hweb
@I background.hweb
@I sources.hweb
@I zone.hweb
@I netcdf.hweb
@I string.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@ The main program.

@<Functions...@>=
      program updatebackground
      implicit_none_f77
      implicit_none_f90
      character*FILELEN datafilename

      call command_arg(1,datafilename)

      call ud_bk_main(datafilename)

      stop
      end

@ The main subroutine.

@<Functions...@>=
      subroutine ud_bk_main(datafilename)
      implicit_none_f77
      zn_common
      pr_common
      bk_common
      implicit_none_f90
      
      character*FILELEN datafilename                   // Input

      integer update,uedge,geom_modified               // Local

      @<Memory allocation interface@>
/*
   As in |readbackground|, generalize the UEDGE interface to permit
   additional options or information to be specified in a text
   file.     To use just a UEDGE data file by itself, the user would 
   have to give it a ``.u'' extension.
*/
@#if 0
      uedge = FALSE
      if (index(datafilename,'.u') > 0) then
         uedge = TRUE
      else
         assert('File name must end in .u' == ' ')
      end if
@#endif
      uedge=TRUE
      call readfilenames

      call read_geometry
            
      call nc_read_elements
      call nc_read_species
      call nc_read_materials
      call nc_read_reactions
      call nc_read_pmi
      call nc_read_problem

      call setup_back_arrays(geom_modified)
      assert(geom_modified == FALSE)  
/*
   Try reading old sources file.  If present, assume that this run 
   is an update $\Rightarrow$ |update| = |TRUE|.
*/
      call nc_read_old_sources(update)

      if (update == TRUE) then
         call update_uedge_background(datafilename,update)         
      else
         call read_uedge_background(datafilename,update)
         call set_background_sources
         call init_wt_alias(uedge)
      end if

      call write_background

      return
      end

@ Calls routines to update the background plasma data. Also reads in
old source information to use in deciding how to update the sources
for the next run.

@<Functions...@>=
      subroutine update_uedge_background(datafilename,update)

      define_varp(old_current,FLOAT,source_seg_ind)
      define_varp(old_rel_wt,FLOAT,source_seg_ind)
      define_varp(old_tot_curr,FLOAT,source_grp_ind)

      implicit_none_f77
      pr_common                                  // Common
      sp_common
      so_common
      bk_common
      implicit_none_f90

      integer update                             // Input
      character*FILELEN datafilename      

      integer old_grps,old_seg_tot,grp,i_seg,jr

      declare_varp(old_current)
      declare_varp(old_rel_wt)
      declare_varp(old_tot_curr)

      st_decls

      @<Memory allocation interface@>

      var_alloc(old_current)
      var_alloc(old_rel_wt)
      var_alloc(old_tot_curr)
/*
   Note: could update weights based only on last set of currents (using
   the old weights as well), but then we couldn't be sure of the total
   change since the original probability aliases were set. Hence,
   we really do want to dump out the source data for rereading here
   only when the aliases are updated.
*/
      old_grps=so_grps
      old_seg_tot=so_seg_tot
      do grp=1,so_grps
         old_tot_curr[grp]=so_tot_curr(grp)
      end do
      do i_seg=1,so_seg_tot
         old_current[i_seg]=source_current[i_seg]
         old_rel_wt[i_seg]=source_segment_rel_wt[i_seg]
      end do
      assert(update == TRUE)
      call read_uedge_background(datafilename,update)

      if (pr_bkrc_num > 0) then
         do jr=1,pr_bkrc_num
            so_grps++
            so_seg_tot=so_base(so_grps)-1
            call set_background_rate(jr,so_grps,update)
         end do
      end if

      assert(so_grps == old_grps)
      assert(so_seg_tot == old_seg_tot)
      call update_wt_alias(old_current,old_rel_wt,old_tot_curr)

      var_free(old_current)
      var_free(old_tot_curr)
      var_free(old_rel_wt)

      return
      end



