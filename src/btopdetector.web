% $Id: 1762f490e0af5e7c27427b75af3a53dfadb4096f $
\Title{btopdetector}

@* Example user-defined detector setup for geometry definition programs. 
This routine can be called by both {\tt readgeometry} and 
{\tt definegeometry2d}. The easiest way to compile it into one of these
codes is to copy it to a file named {\tt usr2ddetector.web}:
\begin{verbatim}
cd $HOME/degas2/src
cp btopdetector.web usr2ddetector.web
touch usr2ddetector.web
cd ../SUN
gmake definegeometry2d
\end{verbatim}

For additional details, see the documentation at the top of 
{\tt definegeometry2d}.

\ID{$Id: 1762f490e0af5e7c27427b75af3a53dfadb4096f $}

@m FILE 'btopdetector.web'

@I macros.hweb
@I sysdep.hweb
@I geomint.hweb
@I zone.hweb
@I detector.hweb
@I geometry2d.hweb
@I string.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@ B-top detector views for simulation of Alcator C-Mod divertor
bypass experiments.

@m btop_views 63  // To be used as a local dimension.

@<Functions...@>=
      subroutine detector_setup

      implicit_none_f77
      de_common
      zn_common
      implicit_none_f90

      @<Memory allocation interface@>

      detector_total_views=btop_views
      var_alloc(de_view_points)
      var_alloc(de_view_algorithm)
      var_alloc(de_view_halfwidth)

      call initialize_zone_frags
      
      de_grps=0
      de_view_size=0
      var_alloc(de_view_tab)

      call detector_setup_a

      return
      end

@ Extension of the above subroutine.  Statements actually making
assignments to the detector pointer arrays (|de_zone_frags|
specfically) need to be separated from their allocation above
so that their array indexing gets handled correctly.

@<Functions...@>=
      subroutine detector_setup_a

      define_varp(zone_frags,FLOAT,zone_ind)

      implicit_none_f77
      de_common
      zn_common
      implicit_none_f90

      integer view,num,var,tab_index,spacing,i,zone
      integer grp_views[btop_views]
      real var_min,var_max,mult,r0ha,z0ha,r_end,z_end
      real theta[btop_views]

      data (theta(i),i=1,btop_views)
     .      /dconst(283.2),dconst(282.5),dconst(281.8),dconst(281.2),
     .       dconst(280.4),dconst(279.8),dconst(279.1),dconst(278.4),
     .       dconst(277.7),dconst(277.0),dconst(276.3),dconst(275.6),
     .       dconst(274.8),dconst(274.1),dconst(273.4),dconst(272.6),
     .       dconst(271.9),dconst(271.1),dconst(270.4),dconst(269.6),
     .       dconst(268.8),dconst(268.1),dconst(267.4),dconst(266.6),
     .       dconst(265.9),dconst(265.1),dconst(264.3),dconst(263.5),
     .       dconst(262.7),dconst(262.0),dconst(261.2),dconst(260.3),
     .       dconst(259.6),dconst(258.7),dconst(257.9),dconst(257.2),
     .       dconst(256.3),dconst(255.5),dconst(254.7),dconst(253.9),
     .       dconst(253.1),dconst(252.2),dconst(251.4),dconst(250.6),
     .       dconst(249.8),dconst(248.9),dconst(248.0),dconst(247.2),
     .       dconst(246.4),dconst(245.6),dconst(244.8),dconst(243.9),
     .       dconst(243.1),dconst(242.2),dconst(241.4),dconst(240.6),
     .       dconst(239.7),dconst(239.0),dconst(238.1),dconst(237.1),
     .       dconst(236.3),dconst(235.4),dconst(234.5)/

      declare_varp(zone_frags)

      @<Memory allocation interface@>

      var_alloc(zone_frags)
/*
   This is the vertex of the B-top array.
*/

      r0ha=const(7.538,-1)     
      z0ha=const(4.65,-1)
      if (detector_total_views > 0) then
         do view=1,btop_views
            de_view_algorithm[view]=de_algorithm_uniform
            de_view_halfwidth[view]=half*PI/const(1.8,2)  // roughly distance between chords
            vc_set(de_view_points[view][de_view_start],r0ha,zero,z0ha)
            z_end=zero
            r_end=r0ha+(z0ha-z_end)*tan((theta[view]-const(2.7,2))*PI/const(1.8,2))
            vc_set(de_view_points[view][de_view_end],r_end,zero,z_end)
            call detector_view_setup(vc_args(de_view_points[view][de_view_start]),de_view_halfwidth[view],de_view_algorithm[view],zone_frags)
            call add_zone_frags(view,zone_frags)
         end do
      
         var_free(zone_frags)

         num=btop_views
         var=de_var_unknown
         tab_index=zero
         var_min=zero
         var_max=zero
         mult=zero
         spacing=de_spacing_unknown
         do i=1,num
            grp_views[i]=i
         end do
         call de_grp_init('B-top chords',num,var,tab_index,var_min,var_max,
     $        mult,spacing,grp_views)

      end if
      
      return
      end

@* INDEX.
