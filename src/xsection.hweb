@* Cross section definitions.

% $Id: 478214b0ee82dc73c0ab0a2c82979b12668cd36d $

\ID{$Id: 478214b0ee82dc73c0ab0a2c82979b12668cd36d $}

Information about crosssections.

@I reaction.hweb

@ Constant definitions.

@m xs_spacing_unknown 0          // Types of spacing in TABLES
@m xs_spacing_linear 1
@m xs_spacing_log 2

@m xs_var_unknown 0             // Indices for the independent variables
@m xs_var_density 1             // Indices for the independent variables
@m xs_var_energy 2
@m xs_var_temperature 3
@m xs_var_sp_energy 4
@m xs_var_sp_temperature 5
@m xs_var_zone 6
@m xs_var_1st_random_number 7
@m xs_var_v_test_1 8
@m xs_var_v_test_2 9
@m xs_var_v_test_3 10
@m xs_var_v_flow_1 11
@m xs_var_v_flow_2 12
@m xs_var_v_flow_3 13
@m xs_var_m_test 14
@m xs_var_m_back 15
@m xs_var_m_emitter 16
@m xs_var_v_flowb_1 17
@m xs_var_v_flowb_2 18
@m xs_var_v_flowb_3 19
@m xs_var_elec_temperature 20

@m xs_max_random 1
@m xs_max_indep_params 20

@m xs_unit_string_length 12     // The length of the unit specifications
@m xs_tag_string_length 40      // The length of variable names and spacings
@m xs_eval_name_length 40       // Routine used to evaluate FITS

@m xs_table_rank_max 3          // The biggest rank table
@m xs_dep_var_max 20             // Maximum number of dependent variables

@ Accessor functions for |xs_data_tab| to make it look like a 
4-dimensional arrays.

@m xs_data_table(i,j,k,n) xs_data_tab[i+xs_tab_index[n][1]*(j+xs_tab_index[n][2]*k)+xs_data_base[n]]

@ variable definitions.

@a
      package_init(xs)

      define_dimen_pk(xs,rank_ind,xs_table_rank_max)
      define_dimen_pk(xs,rank_ind0,0,xs_table_rank_max)
      define_dimen_pk(xs,dep_var_ind,xs_dep_var_max)
      define_dimen_pk(xs,unit_string,xs_unit_string_length)
      define_dimen_pk(xs,tag_string,xs_tag_string_length)
      define_dimen_pk(xs,xs_symbol_string,rc_sy_len)
      define_dimen_pk(xs,eval_name,xs_eval_name_length)

/* The ''size'' variables get used in the table allocation macros. */
      define_var_pk(xs,xs_data_size,INT)
      define_dimen_pk(xs,xs_data_ind,0,xs_data_size-1)

      define_var_pk(xs,xs_num_dep_var,INT)
      define_var_pk(xs,xs_rank,INT,dep_var_ind)
      define_var_pk(xs,xs_tab_index,INT,rank_ind,dep_var_ind)
      define_var_pk(xs,xs_data_base,INT,dep_var_ind)
      define_var_pk(xs,xs_data_inc,INT,dep_var_ind)

      define_var_pk(xs,xs_name,CHAR,xs_symbol_string)
      define_var_pk(xs,xs_spacing,CHAR,tag_string,rank_ind0,dep_var_ind)
      define_var_pk(xs,xs_var,CHAR,tag_string,rank_ind0,dep_var_ind)
      define_var_pk(xs,xs_units,CHAR,unit_string,rank_ind0,dep_var_ind)
      define_var_pk(xs,xs_eval_name,CHAR,eval_name,dep_var_ind)

      define_var_pk(xs,xs_min,FLOAT,rank_ind,dep_var_ind) 
      define_var_pk(xs,xs_max,FLOAT,rank_ind,dep_var_ind) 
      define_var_pk(xs,xs_mult,FLOAT,rank_ind0,dep_var_ind)

      define_varp_pk(xs,xs_data_tab,FLOAT,xs_data_ind)     
      
      define_varlocal_pk(xs,xsection_version,CHAR,string)

      package_end(xs)

@ Common blocks definitions.


@f xs_decls integer
@m xs_decls
      integer old_size @;

@ Other macros

/*
      The following macros are merely renamed versions from pmiformat.hweb.
      Any description may be found in that file.
*/

@m set_base(x,inc)
      $ASSERT( range_min(ind_##x##_base_1) == range_min(ind_##inc##_1) && range_max(ind_##x##_base_1) == range_max(ind_##inc##_1)) 
      x##_base[range_min(ind_##x##_base_1)]=0;
      $DO(I,range_min(ind_##x##_base_1)+1,range_max(ind_##x##_base_1)) {
         x##_base[I]=x##_base[I-1]+inc[I-1];
      }
      x##_size=x##_base[range_max(ind_##x##_base_1)]+inc[range_max(ind_##inc##_1)] @;

@#if 1
@m set_inc(x,y)
      $DO(J,range_min(ind_##y##_2),range_max(ind_##y##_2)) {
         x##_inc[J]=1;
         $DO(I,range_min(ind_##y##_1),range_max(ind_##y##_1)) {
            x##_inc[J]=x##_inc[J]*y[I,J]; 
         }
      }
@#else
@m set_inc(x,y)
      do j=range_min(ind_##y##_2),range_max(ind_##y##_2);
         x##_inc[j]=1;
         do i=range_min(ind_##y##_1),range_max(ind_##y##_1);
            x##_inc[j]=x##_inc[j]*y[i,j]; 
         end do;
       end do @;
@#endif

@m xs_ragged_alloc(x,y)
      set_inc(x,y);
      set_base(x,x##_inc);
      var_alloc(x##_tab) @;

@m xs_ragged_realloc(x,y)
      old_size=x##_size;
      set_inc(x,y);
      set_base(x,x##_inc);
      var_realloc(x##_tab,old_size-1,x##_size-1) @;      

@* Cross section class attribute descriptions.

@ Format for cross sections and other atomic physics data. Prefix is |xs|.

The properties associated with ``cross sections'' (which is a generic
designation for not only cross sections, but all related quantities
such as reaction rates, momentum transfer rates, etc.
presented below. Here, the subscript |j| denotes the index
for dependent variables (dimension variable |dep_var_ind|), while 
the nonzero values of the subscript |i| represent the independent
variables (dimension variables |rank_ind| and 
|rank_ind0|) needed to determine a particular value of variable |j|.
Some of these variables apply exclusively to ``fits'', some to
``tables''; some apply to both. {\em Note: fits are not yet implemented.}
See also the documentation in |ratecalc.web|.

\begin{description}
  \item[|xs_data_size|] Size of one-dimensional array containing all
data for this process.

  \item[|xs_num_dep_var|] Number of dependent variables associated with 
reaction |xs_name|.

  \item[|xs_rank[j]|] Integer number of independent variables for this 
particular ``cross section''.

  \item[|xs_tab_index[i,j]|] For tabular organizations, 
this integer provides the
number of values used for independent variable |i| and dependent
variable |j|. 

  \item[|xs_data_base[j]|] Index into 1-D data array for first element 
associated with |j|.

  \item[|xs_data_inc[j]|] Number of data elements associated with |j|.

  \item[|xs_name|] String naming the ``cross section''. 
Same as the reaction name; that is, it should match
|rc_sy(rc_num)|.

  \item[|xs_spacing[0,j]|] String describing the way the data are to be
interpolated. Either `linear' or `log'; applies to tabular organization
only.

  \item[|xs_spacing[i,j]|] String telling the method of interpolation to be
used for independent variable |i|; applies to tabular organization only.

  \item[|xs_var[0,j]|] String which tells more precisely what this quantity
is; e.g., `rate', `cross\_section'.

  \item[|xs_var[i,j]|] String describing independent variable |i|. Examples
are `density', `energy', 'temperature', 
`specific\_energy' (i.e., energy per amu), and `specific\_temperature'. Note:
the ``non-specific'' forms should only be used for electron-impact processes
where there can be no confusion as to the relevant mass.

  \item[|xs_units[0,j]|] String providing the units for this quantity; 
may be in any system.

  \item[|xs_units[i,j]|] String providing the units for independent variable
|i|.

  \item[|xs_eval_name[j]|] Mechanism for evaluating dependent
variable |j|; e.g., |table_calc|, |table_eval|, |table_external|, or
|fit| (not implemented yet).

  \item[|xs_min[i,j]|] Floating point minimum value to be used for independent
variable |i| in a table. It will be combined with the maximum and the number
of values to actually define the array of independent variable values. For a
fit, provides the lower range of validity for this independent variable.

  \item[|xs_max[i,j]|] Floating point maximum value to be used for independent
variable |i| in a table. For a
fit, provides the upper range of validity for this independent variable.

  \item[|xs_mult[0,j]|] Floating point multiplier for this quantity. While
it may be used for any necessary purpose, it should provide the conversion
factor from |xs_units[0,j]| to the MKS system.

  \item[|xs_mult[i,j]|] Floating point multipier for independent variable |i|.
It should provide the conversion factor from |xs_units[i]| to the MKS system.

  \item[|xs_data_tab|] One-dimensional array containing all data values.
\end{description}

@ Routines using cross section data.

\begin{description}
  \item[|xs_data_table(i,j,k,n)|] Multidimensional accessor function to cross 
section data provided for easier use; |i|, |j|, |k| are the independent 
variable indices, 0 $\leq$ |i| $\leq$ |xs_tab_index[1,n]|-1, etc. for the |n|th
dependent variable. 

  \item[|xs_ragged_alloc(xs_data,xs_tab_index)|] Computes sizes and base 
addresses of the one-dimensional data array |xs_data_tab| (|xs_data| is a 
root name here) based on the multi-dimensional informationprovided by 
|xs_tab_index|. There is additional documentation of a similar macro in 
|pmiformat.hweb|.

  \item[|xs_ragged_realloc(xs_data,xs_tab_index)|] Makes changes to size
of one-dimensional data array |xs_data_tab| based on a revised |xs_tab_index|.
The user must be adding to the end of the table for this to work properly.
\end{description}

