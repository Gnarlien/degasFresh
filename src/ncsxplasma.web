% $Id: 42e1552b25d7511c9db94850cb4a10f7fb1703a2 $
\Title{ncsxplasma}

@* Example non-default plasma setup routine.  This routine is called by 
{\tt defineback}. The easiest way to compile it into {\tt defineback} is to
copy it to a file named {\tt usr2dplasma.web}:
\begin{verbatim}
cd $HOME/degas2/src
cp ncsxplasma.web usr2dplasma.web
touch usr2dplasma.web
cd ../SUN
gmake defineback
\end{verbatim}

For additional details, see the documentation at the top of {\tt defineback}.

\ID{$Id: 42e1552b25d7511c9db94850cb4a10f7fb1703a2 $}

@m FILE 'ncsxplasma.web'

@I macros.hweb
@I sysdep.hweb
@I geomint.hweb
@I zone.hweb
@I species.hweb
@I geometry2d.hweb
@I netcdf.hweb
@I string.hweb
@I background.hweb
@I problem.hweb
@I location.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@ Compute background densities and temperatures for NCSX.

@m open_file(aunit,aname)    open(unit=aunit,file=aname,status='old',form='formatted',iostat=open_stat);
         assert(open_stat == 0) @;

@m max_stratum 100
@m max_radii 100

@m radii_done #:0
@m nT_done #:0

@<Functions...@>=
      subroutine get_n_t(nt_string)

      define_varp(zone_stratum,INT,zone_ind)

      implicit_none_f77
      zn_common                                             // Common
      sp_common
      pr_common
      bk_common
      g2_common
      implicit_none_f90

      character*LINELEN nt_string                           // Input

      integer is,ix,p,b,e,length,stratum,zone,j,num_x,      // Local
     $        close_zone,open_stat,lcms_stratum,fileid,
     $        zone2,back,ipoly,diskin3

      real x_in,jx_in,delta_min,delta,lambda_n,lambda_t
      real  stratum_radius[max_stratum],r_over_a[0:max_radii],
     $     ne[0:max_radii],te[0:max_radii],ti[0:max_radii]

      character*LINELEN line
      character*FILELEN radii_file,polygon_file,nT_profile  

      vc_decl(vec_delta)

      external find_index,interpolate1                       // External
      real find_index,interpolate1

      declare_varp(zone_stratum)

      @<Memory allocation interface@>
      st_decls
      vc_decls
      g2_ncdecl
      nc_decls
      zn_decls

      var_alloc(zone_stratum) 
/*
   Could have put all of these arguments in yet another text input file,
   but decided that there were already too many input files for this
   routine. For clarity, the order of the arguments is:
   |radii_file|  |nT_profile|  |polygon_file|  |lambda_n|  |lambda_t|
*/
      p=0
      assert(next_token(nt_string,b,e,p))
      radii_file=nt_string(b:e)

      assert(next_token(nt_string,b,e,p))
      nT_profile=nt_string(b:e)

      assert(next_token(nt_string,b,e,p))
      polygon_file=nt_string(b:e)

      assert(next_token(nt_string,b,e,p))
      lambda_n=read_real(nt_string(b:e))
      assert(lambda_n > zero)

      assert(next_token(nt_string,b,e,p))
      lambda_t=read_real(nt_string(b:e))
      assert(lambda_t > zero)

      diskin3=diskin+2
      open_file(diskin3,radii_file)
      assert(read_string(diskin3,line,length))  // Column header
      do is=1,max_stratum
         stratum_radius[is]=real_unused
      end do
      do is=1,max_stratum
         if (read_string(diskin3,line,length)) then
            assert(length<=len(line))
            length=parse_string(line(:length))
            p=0
            assert(next_token(line,b,e,p))
            stratum=read_integer(line(b:e))
            assert(stratum <= max_stratum)
            assert(stratum_radius[stratum] == real_unused)
            assert(next_token(line,b,e,p))
            stratum_radius[stratum]=read_real(line(b:e))
            assert(stratum_radius[stratum] >= zero
     $           && stratum_radius[stratum] <= one)
         else
            goto radii_done
         end if
      end do
      assert('Stratum radius file too long' == ' ')
radii_done: continue
/*
   Assume that these radii are defined only over the LCMS and 
   that the last one represents the LCMS itself.
*/
      lcms_stratum=stratum
      close(unit=diskin3)

      do zone=1,zn_num
         zone_stratum[zone]=int_unused
      end do

      assert(polygon_file != char_undef)
      fileid=ncopen(polygon_file,NC_NOWRITE,nc_stat)
      g2_ncread(fileid)

      do ipoly=1,g2_num_polygons
         zone=g2_polygon_zone[ipoly]
         if (zone_stratum[zone] == int_unused) then
            assert(g2_polygon_stratum[ipoly] >= 0)  // Do we need this?
            zone_stratum[zone]=g2_polygon_stratum[ipoly]
         else                                       // Or this?
            assert(zone_stratum[zone] == g2_polygon_stratum[ipoly])
         end if
      end do
      
      open_file(diskin3,nT_profile)
      assert(read_string(diskin3,line,length))  // Column header
/*
   Begin these arrays at zero so they will be consistent with the
   interpolation routines.
*/
      do ix=0,max_radii
         r_over_a[ix]=real_unused
         ne[ix]=real_unused
         te[ix]=real_unused
         ti[ix]=real_unused
      end do
      do ix=0,max_radii
         if (read_string(diskin3,line,length)) then
            assert(length<=len(line))
            length=parse_string(line(:length))
            p=0
            assert(next_token(line,b,e,p))
            j=read_integer(line(b:e))
            assert(j == ix+1)    // Be sure arrays ordered correctly
            assert(next_token(line,b,e,p))
            r_over_a[ix]=read_real(line(b:e))
            assert(r_over_a[ix] >= zero && r_over_a[ix] <= one)
            assert(next_token(line,b,e,p))
/*
   Assume density is in units of $10^{19}$ m$^{-3}$ and temperatures in keV.
*/
            ne[ix]=read_real(line(b:e))*const(1.,19)
            assert(ne[ix] > zero)
            assert(next_token(line,b,e,p))
            te[ix]=read_real(line(b:e))*const(1.,3)*electron_charge
            assert(te[ix] > zero)
            assert(next_token(line,b,e,p))
            ti[ix]=read_real(line(b:e))*const(1.,3)*electron_charge
            assert(ti[ix] > zero)
         else
            goto nT_done
         end if
      end do
      assert('Plasma profile file too long' == ' ')
nT_done: continue
      num_x=j    // Last value read
/*
   Done reading files. Interpolate density and temperature values for those
   zones inside the LCMS.
*/
      do back=1,bk_num
         assert(bk_check(back))
         do zone=1,zn_num
            assert(zn_check(zone))
            if (zn_type(zone) == zn_plasma) then
               if (zone_stratum[zone] <= lcms_stratum) then
                  x_in=stratum_radius[zone_stratum[zone]]
                  jx_in=find_index(x_in,r_over_a,num_x)
                  if (sp_sy(pr_background(back)) == 'e') then
                     bk_n(back,zone)=interpolate1(jx_in,ne,num_x)
                     bk_temp(back,zone)=interpolate1(jx_in,te,num_x) 
                  else
                     bk_n(back,zone)=interpolate1(jx_in,ne,num_x)
                     bk_temp(back,zone)=interpolate1(jx_in,ti,num_x) 
                  end if
               else
                  delta_min=geom_infinity
                  do zone2=1,zn_num
/*
   Find those zones representing the LCMS. Calculate minimum distance from
   |zone| to one of them. Compute density and temperature using
   exponential fall-off lengths.
*/
                     if (zone_stratum[zone2] == lcms_stratum) then
                        vc_difference(zone_center[zone],zone_center[zone2],
     $                       vec_delta)
                        delta=vc_abs(vec_delta)
                        if (delta < delta_min) then
                           delta_min=delta
                           close_zone=zone2
                        end if
                     end if
                  end do
                  assert(delta_min > zero && delta_min < geom_infinity)
                  assert(bk_n(back,close_zone) > zero)
                  assert(bk_temp(back,close_zone) > zero)
                  bk_n(back,zone)=bk_n(back,close_zone)*exp(-delta_min/lambda_n)
                  bk_temp(back,zone)=bk_temp(back,close_zone)*exp(-delta_min/lambda_n)
               end if
            end if
         end do
      end do
      
      return
      end

@* INDEX.
