% $Id: d2f120d844d8cd0047ab4647b2a0588474f55727 $
\Title{voigt}

@* Calculate the Voigt function.

\ID{$Id: d2f120d844d8cd0047ab4647b2a0588474f55727 $}

@m FILE 'voigt.web'

@I macros.hweb

@ The unnamed module.

@a
      @<Functions and subroutines@>

@ The algorithm used here was taken from J. H. Pierluissi, P. C. Vanderwood,
and R. B. Gomez, {\em J. Quant. Spectrosc. Radiat. Transfer} {\bf 18}, 555
(1977).

@<Functions...@>=
      function voigt(xarg,y)
      implicit_none_f77
      implicit_none_f90
      
      real voigt                  // Function
      real xarg,y                 // Input

      integer i,n                 // Local
      real fact_term,zn,x,s,t,xser,yser,xn,yn,xnew,ynew,x2,y2,r,f,g,h
      real coef_r1[30],coef_r2[6],coef_r3[4]
      logical init

      save init,coef_r1,coef_r2,coef_r3
      data init/.true./

      if (init) then
         fact_term=one
         coef_r1[1]=one
         do i=2,30
            zn=areal(i-1)
            fact_term*=-one/zn
            coef_r1[i]=fact_term/(two*zn+one)
         end do
         coef_r2[1]=const(0.46131350)
         coef_r2[2]=const(0.19016350)
         coef_r2[3]=const(0.09999216)
         coef_r2[4]=const(1.78449270)
         coef_r2[5]=const(0.002883894)
         coef_r2[6]=const(5.52534370)

         coef_r3[1]=const(0.51242424)
         coef_r3[2]=const(0.27525810)
         coef_r3[3]=const(0.05176536)
         coef_r3[4]=const(2.72474500)

         init=.false.
      end if
      assert(y >= zero)
      if (xarg < zero) then
         x=-xarg
      else
         x=xarg
      end if

      s=x*x-y*y
      t=two*x*y
      if (x < const(3.0) && y < const(1.8)) then
         xser=y
         yser=-x
         xn=y
         yn=-x
         x2=-s
         y2=-t
         n=int(const(6.842)*x+const(8.0))
         n=min(n,29)
         n=max(n,18)           // Try this instead
 //        if (x==zero) n=18
         do i=1,n
            xnew=xn*x2-yn*y2
            ynew=y2*xn+yn*x2
            xser+=xnew*coef_r1[i+1]
            yser+=ynew*coef_r1[i+1]
            xn=xnew
            yn=ynew
         end do
         voigt=exp(-s)*(cos(-t)*(one-(two/sqrt(PI))*xser) 
     $        + (two/sqrt(PI))*sin(-t)*yser)
      else if (x < const(5.0) && y < const(5.0)) then
         r=t*t
         t=t*x
         f=s-coef_r2[6]
         g=s-coef_r2[4]
         h=s-coef_r2[2]
         voigt=coef_r2[1]*((t-h*y)/(h*h+r)) + coef_r2[3]*((t-g*y)/(g*g+r))
     $        + coef_r2[5]*((t-f*y)/(f*f+r))
      else
         r=t*t
         t=t*x
         f=s-coef_r3[2]
         g=s-coef_r3[4]
         voigt=coef_r3[1]*((t-f*y)/(f*f+r)) + coef_r3[3]*((t-g*y)/(g*g+r))
      end if
      end

@* INDEX.
