% $Id: d55ea052001fc5d80735d82ac71d30b52be3e398 $
\Title{system dependent routines}


@* Introduction.

\ID{$Id: d55ea052001fc5d80735d82ac71d30b52be3e398 $}

System dependent routines for degas.

@m FILE 'string.web'

@I macros.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>
      
@* Some string utilities. Return the length of a string with trailing
blanks truncated.

@m NULL char(0)
@m TAB  char(9)
@m BACKSLASH char(92)
@m whitespace(c) (c == ' ' || c == TAB)
	
@<Functions...@>=
      function string_length(string)
      implicit_none_f77
      implicit_none_f90
      integer string_length       // Function
      character*(*) string      // Input
      integer i,k                 // Local

      k=index(string,NULL)
      if (k>0) then
         k=k-1
      else
         k=len(string)
      end if
      do i=k,1,-1
         if (string(i:i) != ' ') then
            string_length=i
            return
         end if
      end do

      string_length=0

      return
      end
      
@ Pad NULL-delimited string with blanks

@<Functions...@>=
      subroutine string_pad(string)
      implicit_none_f77
      implicit_none_f90
      character*(*) string      // Input/Output
      integer k                 // Local

      k=index(string,NULL)
      if (k>0) then
         string(k:) = ' '
      end if

      return
      end

@ NULL-terminate a string.

@<Functions...@>=
      subroutine null_terminate(string)
      implicit_none_f77
      implicit_none_f90
      character*(*) string      // Input/Output
      integer k               // Local
      integer string_length     // External

      k=string_length(string)
      if (k<len(string)) then
         string(k+1:k+1) = NULL
      end if

      return
      end

@ Read in a line from a file.  Lines beginning with \# and blank lines
are ignored.  If a line ends in \\ then this, the newline, and leading
white space on the next line are skipped and reading continues.  Returns
|.false.| on the end of file.  |length| is the length of the resulting
line read (which may be greater than the length of |string|).

@<Functions...@>=
      function read_string(unit,string,length)
      implicit_none_f77
      implicit_none_f90
      logical read_string       // Function
      integer unit              // Input
      character*(*) string      // Output
      integer length
      integer i,p,l,lb,pb       // Local
      character*LONGLINE buffer
      logical start,more
      external string_length    // External
      integer string_length

      l=len(string)
      p=1
      start=.true.
      more=.false.
      read_string=.true.
      string=' '
loop: continue
      read(unit,'(a)',end=eof) buffer
      if (start && (buffer(1:1)=='#' || buffer==' ')) goto loop
      start=.false.
      lb=string_length(buffer)
      if (! more) then
         pb=1
      else                      // Skip whitespace
         do i=1,lb
            if (! whitespace(buffer(i:i))) then
               pb=i
               goto break1
            end if
         end do
         pb=lb+1
break1:  continue
      end if
      more = buffer(lb:lb) == BACKSLASH
      if (more) lb=lb-1
      if (pb <= lb && p <= l) string(p:)=buffer(pb:lb)
      p=p+(lb-pb+1)
      if (more && read_string) goto loop
      length=p-1

      return

eof:  continue
      read_string=.false.
      length=p-1

      return
      end

@ Parse line.  This steps through the line compacting whitespace into a
single space, and deleting leading whitespace.  The parsing is done in
place.  the length of the resulting string is returned as the function
value.

@<Functions...@>=
      function parse_string(string)
      implicit_none_f77
      implicit_none_f90
      integer parse_string      // Function
      character*(*) string
      integer l,i,k,p,offset  // Local
      
      l=len(string)
      p=1
loop: continue
      k=index(string(p:),TAB)
      if (k>0) then
         string(k+p-1:k+p-1)=' '
         p=k+p
         if (p <= l) goto loop
      end if
      offset=0
      do i=1,l
         if (string(i:i)==' ') then
            offset=offset+1     // Skip leading blanks
         else
            goto break
         end if
      end do
break: continue
      p=1+offset
loop1:continue
      k=index(string(p:),' ')
      if (k>0) then
         if (offset > 0) string(p-offset:p-offset+k-1)=string(p:p+k-1)
         p=p+k
         do i=p,l
            if (string(i:i)==' ') then
               offset=offset+1
               p=p+1
            else
               goto break1
            end if
         end do
break1:  continue
      else
         if (offset > 0) string(p-offset:l-offset)=string(p:)
         p=l+1
      end if
      if (p<=l) goto loop1
      
      if (p-offset<=l) string(p-offset:)=' '
      parse_string=p-offset-1
      if (parse_string > 0 && string(parse_string:parse_string) == ' ')
     $     parse_string=parse_string-1
      
      return
      end

@ Find next space-delimited token in a string.  Token is given by
|string(b:e)|.  |next_token| keeps track of where it is with the integer
variable |p|; on the first call |p| should be set to zero.  Returns
|.false.| if no next token.

@<Functions...@>=
      function next_token(string,b,e,p)
      implicit_none_f77
      implicit_none_f90
      logical next_token        // Function
      character*(*) string      // Input
      integer b,e               // Output
      integer p                 // Input/output
      integer k,l               // Local
      
      p=p+1
      l=len(string)
      next_token=.false.
      if (p>l) return
      if (string(p:p)==' ') return
      next_token=.true.
      b=p
      k=index(string(p:),' ')
      if (k>0) then
         e=b+k-2
      else
         e=l
      end if
      p=e+1                     // Point to delimiter
      
      return
      end

@ Read an integer from a string.

@<Functions...@>=
      function read_integer(string)
      implicit_none_f77
      implicit_none_f90
      integer read_integer      // Function
      character*(*) string      // Input
      character*10 form         // Local
      
      write(form,'(a,i3.3,a)') '(i',len(string),')'
      read(string,form) read_integer
      
      return
      end

@ Read an integer from a string. This version has a soft failure
mode to be used in situations where unexpected input can be caught
and corrected.

@<Functions...@>=
      function read_int_soft_fail(string)
      implicit_none_f77
      implicit_none_f90
      integer read_int_soft_fail          // Function
      character*(*) string                // Input
      character*10 form                   // Local
      
      write(form,'(a,i3.3,a)') '(i',len(string),')'
      read(string,form,err=eof) read_int_soft_fail
      return

eof:  continue
      read_int_soft_fail=int_undef

      return
      end

@ Read a real from a string.

@<Functions...@>=
      function read_real(string)
      implicit_none_f77
      implicit_none_f90
      real read_real            // Function
      character*(*) string      // Input
      character*10 form         // Local
      
      write(form,'(a,i3.3,a)') '(f',len(string),'.0)'
      read(string,form) read_real
      
      return
      end

@ Read a real from a string. This version has a soft failure
mode to be used in situations where unexpected input can be caught
and corrected.

@<Functions...@>=
      function read_real_soft_fail(string)
      implicit_none_f77
      implicit_none_f90
      real read_real_soft_fail  // Function
      character*(*) string      // Input
      character*10 form         // Local
      
      write(form,'(a,i3.3,a)') '(f',len(string),'.0)'
      read(string,form,err=eof) read_real_soft_fail
      return

eof:  continue
      read_real_soft_fail=real_undef
      
      return
      end

@ Read and scale a real from a string. This is a modified version
of |read_real_soft_fail| that also reads the number from the string,
but scales it by $10^{|delta|}$ in the process.  The objective is
to eliminate the roundoff error introduced by direct arithmetic scaling.
The particular application is in reading geometry (coordinate) data
from external files.  Note that this presently assumes that the
strings are in the exponential format.  A corresponding procedure
for fixed format could probably be developed using the ``p'' format
descriptor.

@<Functions...@>=
      function read_real_scaled(string,delta)
      implicit_none_f77
      implicit_none_f90
      real read_real_scaled                       // Function
      character*(*) string                        // Input
      integer delta

      integer iexp,exp                            // Local
      character*3 stexp            

      external read_integer,read_real_soft_fail   // External
      integer read_integer
      real read_real_soft_fail
/*
   This may be overkill; don't know if the ``d'' format ever appears
   in practice.
*/      
      iexp=max(index(string,'e'),index(string,'E'),
     $         index(string,'d'),index(string,'D'))
      assert(iexp > 0)
      exp=read_integer(string(iexp+1:))
      exp+=delta
/*
   The ``sp'' descriptor forces ``+'' to be printed when applicable.
*/
      write(stexp,'(sp,i3.2)') exp
      read_real_scaled=read_real_soft_fail(string(:iexp)\/stexp)

      return
      end

@ Look up a string in an array of strings.  Returns index of first
match, if found; else 0.

@<Functions...@>=
      function string_lookup(string,array,num)
      implicit_none_f77
      implicit_none_f90
      integer string_lookup     // Function
      integer num               // Input
      character*(*) string,array[num]
      integer i                 // Local

      do i=1,num
         if (array[i] == string) then
            string_lookup=i
            return
         end if
      end do
      
      string_lookup=0
      
      return
      end

@ Look up an integer in an array of strings.  Returns index of first
match, if found; else 0.

@<Functions...@>=
      function int_lookup(n,array,num)
      implicit_none_f77
      implicit_none_f90
      integer int_lookup     // Function
      integer num               //Input
      integer n,array[num] 
      integer i                 // Local

      do i=1,num
         if (array[i] == n) then
            int_lookup=i
            return
         end if
      end do
      
      int_lookup=0
      
      return
      end
