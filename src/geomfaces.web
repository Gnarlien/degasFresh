% $Id: 59bf1a2c87b08944feb5886b65dc4d785dfac3a4 $
\Title{geometry faces}


@* Introduction.

\ID{$Id: 59bf1a2c87b08944feb5886b65dc4d785dfac3a4 $}

Face definition routines for degas.  These routines define various faces
returning the coefficients for the surfaces in the array |coeff[NCOEFFS]|.

@m FILE 'geomfaces.web'

@I macros.hweb
@I location.hweb
@I geomint.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@* Some elementary faces.  These are just set of various the face coefficients.

Firstly the $x,y$ plane.  Beneath the plane is negative.

@<Functions...@>=
      subroutine unit_plane(coeff)
      implicit_none_f77
      implicit_none_f90
      real coeff[NCOEFFS]   // Output
      integer i                 // Local

      do i=1,NCOEFFS
         coeff[i]=zero
      end do

      coeff[cz]=one

      return
      end

@ A sphere centered at the origin by unit radius.  Inside is negative.

@<Functions...@>=
      subroutine unit_sphere(coeff)
      implicit_none_f77
      implicit_none_f90
      real coeff[NCOEFFS]   // Output
      integer i                 // Local

      do i=1,NCOEFFS
         coeff[i]=zero
      end do
      coeff[c0]=-one
      coeff[cxx]=one
      coeff[cyy]=one
      coeff[czz]=one

      return
      end

@ A cylinder centered at the origin, axis parallel to $\hat{\vect z}$, and
with unit radius.

@<Functions...@>=
      subroutine unit_cylinder(coeff)
      implicit_none_f77
      implicit_none_f90
      real coeff[NCOEFFS]   // Output
      integer i                 // Local

      do i=1,NCOEFFS
         coeff[i]=zero
      end do

      coeff[c0]=-one
      coeff[cxx]=one
      coeff[cyy]=one

      return
      end

@ A cone centered at the origin, axis parallel to $\hat{\vect z}$, and
with angle $45^\circ$.  Inside of cone is negative.

@<Functions...@>=
      subroutine unit_cone(coeff)
      implicit_none_f77
      implicit_none_f90
      real coeff[NCOEFFS]   // Output
      integer i                 // Local

      do i=1,NCOEFFS
         coeff[i]=zero
      end do

      coeff[cxx]=one
      coeff[cyy]=one
      coeff[czz]=-one

      return
      end

@* Some more complex faces.  We derive these from the elementary surfaces
by the use of transformations.

A plane through $\vect x_0$ normal to $\vect a$.

@<Functions...@>=
      subroutine plane(x0,a,coeff)
      implicit_none_f77
      implicit_none_f90
      real x0[3],a[3]           // Input
      real coeff[NCOEFFS]       // Ouput
      real m[3,4]               // Local
      external geom_translate,geom_rotatea,unit_plane,init_identity // External
@#if DEBUG
      real grad[3],temp         // Local
      external in_surface // External
      logical in_surface
@#endif

      call unit_plane(coeff)
      call init_identity(m)
      call geom_translate(x0,m)
      call geom_rotatea(a,m)
      call transform_face(coeff,m,coeff)

@#if DEBUG
      assert(in_surface(coeff,1,x0,.false.,temp))
      call surface_gradient(coeff,1,x0,grad)
      temp=vc_product(grad,a)/(vc_abs(a)*vc_abs(grad))
      assert(abs(temp-one) <= epsilon_angle)
@#endif

      return
      end

@ A sphere centered at $\vect x_0$ of radius $r$.

@<Functions...@>=
      subroutine sphere(x0,r,coeff)
      implicit_none_f77
      implicit_none_f90
      real x0[3],r              // Input
      real coeff[NCOEFFS]   // Output
      real m[3,4] // Local
      external geom_scale,geom_translate,unit_sphere,init_identity // External
@#if DEBUG
      real x[3],dummy           // Local
      integer i,j
      external in_surface       // External
      logical in_surface
@#endif

      assert(r > two*geom_epsilon) // Can't tolerate a tiny radius
      call unit_sphere(coeff)
      call init_identity(m)
      call geom_translate(x0,m)
      call geom_scale(r,m)
      call transform_face(coeff,m,coeff)

@#if DEBUG
      do j=1,3
         do i=1,3
            x[i]=x0[i]
         end do
         x[j]=x0[j]+r
         assert(in_surface(coeff,1,x,.false.,dummy))
         x[j]=x0[j]-r
         assert(in_surface(coeff,1,x,.false.,dummy))
      end do
@#endif

      return
      end


@ Plane through $\vect x_1$, $\vect x_2$, and $\vect x_3$ pointing in the
direction $(\vect x_2-\vect x_1)\times(\vect x_3-\vect x_1)$.  Except for a
possible sign change, this routine returns the same face regardless of the
order of the points, making it easy to detect duplicate faces.  This is
done by sorting the points.

@<Functions...@>=
      subroutine planea(x1,x2,x3,coeff)
      implicit_none_f77
      implicit_none_f90
      real x1[3],x2[3],x3[3]    // Input
      real coeff[NCOEFFS]       // Output
      real t[3,3]               // Local
      vc_decls
      integer i,k,l,comp,orientation
      external vector_compare // External
      integer vector_compare
@#if DEBUG
      real temp                 // Local
      external in_surface       // External
      logical in_surface
@#endif

      vc_copy(x1,t[1])
      vc_copy(x2,t[2])
      vc_copy(x3,t[3])

      orientation=1

      do k=2,1,-1               // Bubble sort into ascending order
         do l=1,k
            comp=vector_compare(t[1,l],t[1,l+1])
            assert(comp != 0)
            if (comp > 0) then
               vc_swap(t[l],t[l+1])
               orientation=-orientation // Keep track of number of number of exchanges
            end if
         end do
      end do

      check( vector_compare(t[1,1],t[1,2]) < 0 && vector_compare(t[1,2],t[1,3]) < 0 )

      vc_difference(t[2],t[1],t[2])
      vc_difference(t[3],t[1],t[3])
      vc_unit(t[2],t[2])
      vc_unit(t[3],t[3])

      vc_cross(t[2],t[3],t[2])

      assert(vc_abs(t[2]) >= epsilon_angle)

      call plane(t[1,1],t[1,2],coeff)

      if (orientation < 0) then
         do i=1,NCOEFFS
            coeff[i]=-coeff[i]
         end do
      end if

@#if DEBUG
      assert(in_surface(coeff,1,x1,.false.,temp))
      assert(in_surface(coeff,1,x2,.false.,temp))
      assert(in_surface(coeff,1,x3,.false.,temp))
      vc_difference(x2,x1,t[1])
      vc_difference(x3,x1,t[2])
      vc_cross(t[1],t[2],t[3])
      call surface_gradient(coeff,1,x1,t[1,1])
      temp=vc_product(t[1],t[3])/(vc_abs(t[1])*vc_abs(t[3]))
      assert(abs(temp-one) <= epsilon_angle)
@#endif


      return
      end

@ A cylinder with axis going thru $\vect x_0$ parallel to $\vect a$, and
the radius of the cylinder equal to $r$.

@<Functions...@>=
      subroutine cylinder(x0,a,r,coeff)
      implicit_none_f77
      implicit_none_f90
      real x0[3],a[3],r         // Input
      real coeff[NCOEFFS]       // Output
      real m[3,4]               // Local
      vc_decls
      external unit_cylinder,init_identity,geom_translate,geom_rotatea // External
@#if DEBUG
      real x[3],b[3],c[3],temp  // Local
      external in_surface // External
      logical in_surface
@#endif

      assert(r > two*geom_epsilon) // Can't tolerate a tiny radius
      call unit_cylinder(coeff)
      call init_identity(m)
      call geom_translate(x0,m)
      call geom_rotatea(a,m)
      call geom_scale(r,m)
      call transform_face(coeff,m,coeff)

@#if DEBUG
      vc_set(b,one,zero,zero)
      vc_cross(a,b,c)
      if (vc_abs(c)==zero) then
         b[2]=one
         vc_cross(a,b,c)
      end if
      vc_unit(c,c)
      vc_cross(c,a,b)
      vc_unit(b,b)
      vc_xvt(x0,b,r,x)
      assert(in_surface(coeff,1,x,.false.,temp))
      vc_xvt(x0,b,-r,x)
      assert(in_surface(coeff,1,x,.false.,temp))
      vc_xvt(x0,c,r,x)
      assert(in_surface(coeff,1,x,.false.,temp))
      vc_xvt(x0,c,-r,x)
      assert(in_surface(coeff,1,x,.false.,temp))
@#endif

      return
      end
      
@ A cone with axis going thru $\hat{\vect z}$ axis, going thru the points
$\vect x_1$ and $\vect x_2$.  This routine returns a cylinder or a plane in
the special cases where $\vect x_1$ and $\vect x_2$ line up.  The
orientation of the surface is such that, once $\vect x_1$ and $\vect x_2$
are rotated to lie in the $(x,z)$ plane, $\hat{\vect y} \times (\vect
x_2-\vect x_1)$ is parallel to the gradient of the surface.  |surf_type| is
set to $0$, $1$, or $2$, depending on whether a plane, cone, or cylinder is
returned.  |apex| contains the coordinates of the apex (for a cone), the
intersection of the surface with the axis (for a plane), or a point off at
infinity (for a cone).

@<Functions...@>=
      subroutine conea(x1,x2,coeff,surf_type,apex)
      implicit_none_f77
      implicit_none_f90
      real x1[3],x2[3] // Input
      real coeff[NCOEFFS],apex[3] // Output
      integer surf_type
      real x0[3],a[3],m[3,4],xa1[3],xa2[3],c[3],slope // Local
      integer orientation,i
      vc_decls
      external unit_cone,init_identity,geom_translate,
     $     geom_scalea,transform,transform_face,vector_compare // External
      integer vector_compare
@#if DEBUG
      real temp // Local
      external in_surface,surface_gradient // External
      logical in_surface
@#endif

      orientation=vector_compare(x1,x2)
      assert(orientation != 0)
      do i=1,3
         xa1[i]=x1[i]
         xa2[i]=x2[i]
      end do
      if (orientation < 0) then
         vc_swap(xa1,xa2)
      end if

      xa1[1]=sqrt(xa1[1]^2+xa1[2]^2) // Rotate so that $y$ component is zero
      xa1[2]=zero
      xa2[1]=sqrt(xa2[1]^2+xa2[2]^2) // Rotate so that $y$ component is zero
      xa2[2]=zero

      vc_set(a,zero,zero,one)

      assert(sqrt( (xa1[1]-xa2[1])^2 + (xa1[3]-xa2[3])^2 ) > two*geom_epsilon) // Check points aren't too close. 

@#if 0
      if (abs(xa1[3] - xa2[3]) <= geom_epsilon) then // It's a plane
@#else
/*
   A case involving small cells managed to fool the above test.
   The following modification was derived from the first of the $|temp| - 1.$
   debug tests at the bottom of the routine.
*/
      if (abs(xa1[3] - xa2[3]) <= min(geom_epsilon,
     $                     sqrt(two*epsilon_angle)*abs(xa1[1] - xa2[1]))) then 
// It's a plane
@#endif
         vc_set(c,zero,zero,half*(x1[3]+x2[3]))
c         do i=1,3
c            c[i]=half*(x1[i]+x2[i]) // Compute midpoint
c         end do
         call plane(c,a,coeff)
         if (xa1[1] < xa2[1]) orientation=-orientation
         surf_type=0
         vc_set(apex,zero,zero,c[3]) // Apex
@#if 0
      else if (abs(xa1[1] - xa2[1]) <= geom_epsilon) then // It's a cylinder
@#else
      else if (abs(xa1[1] - xa2[1]) <= min(geom_epsilon,
     $                      sqrt(two*epsilon_angle)*abs(xa1[3] - xa2[3]))) then
// It's a cylinder
@#endif
         vc_set(x0,zero,zero,zero)
         call cylinder(x0,a,half*(xa1[1]+xa2[1]),coeff)
         if (xa2[3] < xa1[3]) orientation=-orientation
         surf_type=2
         vc_set(apex,zero,zero,geom_infinity) // Apex
      else                      // It's a cone
         slope=(xa2[3]-xa1[3])/(xa2[1]-xa1[1])
         vc_set(apex,zero,zero,xa1[3]-slope*xa1[1]) // Apex
         vc_set(c,one,one,slope)
         call init_identity(m)
         call geom_translate(apex,m)
         call geom_scalea(c,m)
         call unit_cone(coeff)
         call transform_face(coeff,m,coeff)
         if (xa2[3] < xa1[3]) orientation=-orientation
         surf_type=1
      end if

      if (orientation < 0) then
         do i=1,NCOEFFS
            coeff[i]=-coeff[i]
         end do
      end if

@#if DEBUG
      assert(in_surface(coeff,1,x1,.false.,temp)) // Check original points
      assert(in_surface(coeff,1,x2,.false.,temp))
      if (vector_compare(x1,x2) < 0) then
         vc_swap(xa1,xa2)   // Swap transformed points back
      end if
      assert(in_surface(coeff,1,xa1,.false.,temp)) // Check transformed points
      assert(in_surface(coeff,1,xa2,.false.,temp))
      vc_set(a,zero,one,zero) // $\hat{\vect y}$
      vc_difference(xa2,xa1,c) // $(\vect x_2-\vect x_1)$ 
      vc_cross(a,c,c) // $\hat{\vect y} \times (\vect x_2-\vect x_1)$ 
      vc_unit(c,c)
      call surface_gradient(coeff,1,xa1,a) // Check orientation of surface
      temp=vc_product(a,c)/vc_abs(a)
      assert(abs(temp-one) <= epsilon_angle)
      call surface_gradient(coeff,1,xa2,a)
      temp=vc_product(a,c)/vc_abs(a)
      assert(abs(temp-one) <= epsilon_angle)
      if (surf_type == 0) then
         assert(in_surface(coeff,1,apex,.false.,temp))
      else if (surf_type == 1) then
         call surface_gradient(coeff,1,apex,a) /* Gradient should vanish at apex */
  /* This check |assert(vc_abs(a) <= epsilon_angle)| is no good.  It
    needs to be normalized more sensibly. */
      end if

@#endif

      return
      end

@ A cone with axis going thru $\vect x_0$ parallel to $\vect a$, going thru
the points $\vect x_1$ and $\vect x_2$.  |surf_type| and |apex| have the same
meaning as in |conea|.

@<Functions...@>=
      subroutine cone(x0,a,x1,x2,coeff,surf_type,apex)
      implicit_none_f77
      implicit_none_f90
      real x0[3],a[3],x1[3],x2[3] // Input
      real coeff[NCOEFFS],apex[3] // Output
      integer surf_type
      real m[3,4],xa1[3],xa2[3],tempa[3] // Local
      external conea,init_identity,geom_translate,geom_rotatea,transform,transform_face // External
@#if DEBUG
      real temp                 // Local
      external in_surface // External
      logical in_surface
@#endif

      call init_identity(m)
      call geom_translate(x0,m)
      call geom_rotatea(a,m)

      call transform(m,x1,xa1) // Transform $\vect x_1$ to frame with axis equal to $\hat{\vect z}$.
      call transform(m,x2,xa2)

      call conea(xa1,xa2,coeff,surf_type,apex)

      call transform_face(coeff,m,coeff)

      call invert(m,m)
      vc_copy(apex,tempa)
      call transform(m,tempa,apex)
      

@#if DEBUG
      assert(in_surface(coeff,1,x1,.false.,temp)) // Check original points
      assert(in_surface(coeff,1,x2,.false.,temp))
      if (surf_type == 0) then
         assert(in_surface(coeff,1,apex,.false.,temp))
      else if (surf_type == 1) then
         call surface_gradient(coeff,1,apex,a) // Gradient should vanish at apex
         assert(vc_abs(a) <= epsilon_angle)
      end if
@#endif

      return
      end

@ A cone with axis going thru $\vect x_0$ parallel to $\vect a$, going thru
the points $\vect x_1$ and $\vect x_2$.

@<Functions...@>=
      subroutine coneb(x0,a,x1,x2,coeff)
      implicit_none_f77
      implicit_none_f90
      real x0[3],a[3],x1[3],x2[3] // Input
      real coeff[NCOEFFS]       // Output
      real m[3,4],xa1[3],xa2[3],xm[3],c[3],z1,slope // Local
      integer orientation,i
      vc_decls
      external unit_cone,init_identity,geom_translate,geom_rotatea,
     $     geom_scalea,transform,transform_face,vector_compare // External
      integer vector_compare
@#if DEBUG
      real temp,minv[3,4],tempa[3] // Local
      external in_surface,surface_gradient,invert // External
      logical in_surface
@#endif

      orientation=vector_compare(x1,x2)
      assert(orientation != 0)
      
      call init_identity(m)
      call geom_translate(x0,m)
      call geom_rotatea(a,m)
      
@#if DEBUG
      call invert(m,minv)
@#endif

      call transform(m,x1,xa1) // Transform $\vect x_1$ to frame with axis equal to $\hat{\vect z}$.
      call transform(m,x2,xa2)
      if (orientation < 0) then
         vc_swap(xa1,xa2)
      end if

      xa1[1]=sqrt(xa1[1]^2+xa1[2]^2) // Rotate so that $y$ component is zero
      xa1[2]=zero
      xa2[1]=sqrt(xa2[1]^2+xa2[2]^2) // Rotate so that $y$ component is zero
      xa2[2]=zero

      assert(sqrt( (xa1[1]-xa2[1])^2 + (xa1[3]-xa2[3])^2 ) > two*geom_epsilon) // Check points aren't too close

      if (abs(xa1[1] - xa2[1]) <= geom_epsilon) then // It's a cylinder
         call cylinder(x0,a,half*(xa1[1]+xa2[1]),coeff)
         if (xa2[3] < xa1[3]) orientation=-orientation
      else if (abs(xa1[3] - xa2[3]) <= geom_epsilon) then // It's a plane
         do i=1,3
            xm[i]=half*(x1[i]+x2[i]) // Compute midpoint
         end do
         call plane(xm,a,coeff)
         if (xa1[1] < xa2[1]) orientation=-orientation
      else                      // It's a cone
         slope=(xa2[3]-xa1[3])/(xa2[1]-xa1[1])
         z1=xa1[3]-slope*xa1[1] // Intercept
         vc_unit(a,xm)
         vc_xvt(x0,xm,z1,xm)
         c[1]=one
         c[2]=one
         c[3]=slope
         call unit_cone(coeff)
         call init_identity(m)
         call geom_translate(xm,m)
         call geom_rotatea(a,m)
         call geom_scalea(c,m)
         call transform_face(coeff,m,coeff)
         if (xa2[3] < xa1[3]) orientation=-orientation
      end if

      if (orientation < 0) then
         do i=1,NCOEFFS
            coeff[i]=-coeff[i]
         end do
      end if

@#if DEBUG
      assert(in_surface(coeff,1,x1,.false.,temp)) // Check original points
      assert(in_surface(coeff,1,x2,.false.,temp))
      if (vector_compare(x1,x2) < 0) then
         vc_swap(xa1,xa2)       // Swap transformed points back
      end if
      vc_copy(xa1,tempa)
      call transform(minv,tempa,xa1)
      vc_copy(xa2,tempa)
      call transform(minv,tempa,xa2)
      assert(in_surface(coeff,1,xa1,.false.,temp)) // Check transformed points
      assert(in_surface(coeff,1,xa2,.false.,temp))
      vc_set(tempa,zero,one,zero)
      call transform(minv,tempa,c)
      vc_difference(c,x0,c)
      assert(abs(vc_abs(c)-one) <= epsilon_angle)
      assert(abs(vc_product(c,a)/vc_abs(a)) <= epsilon_angle)
      vc_difference(xa2,xa1,xm)
      vc_cross(c,xm,xm)
      vc_unit(xm,xm)
      call surface_gradient(coeff,1,xa1,c)
      temp=vc_product(c,xm)/vc_abs(c)
      assert(abs(temp-one) <= epsilon_angle)
      call surface_gradient(coeff,1,xa2,c)
      temp=vc_product(c,xm)/vc_abs(c)
      assert(abs(temp-one) <= epsilon_angle)
@#endif

      return
      end
         

@* INDEX.






