% $Id: 3604cb4c0226590b22bbf143e96e49a32ed49a62 $
\Title{interpolate}

@* Interpolation and other general utility routines.

\ID{$Id: 3604cb4c0226590b22bbf143e96e49a32ed49a62 $}

@m FILE 'interpolate.web'

@I macros.hweb

@ The main program.

@a
      @<Functions and Subroutines@>

@ The interpolation routines.  The one-dimensional one interpolates in
an array dimensioned |0:n-1| according to a floating point index |f|.
If |f| is out of range then we imagine the table continued as a
constant.

@m array1(i) array[i]
      
@<Functions...@>=
      function interpolate1(f,array,n)
      implicit_none_f77
      implicit_none_f90
      real interpolate1         // Function
      integer n                 // Input
      real f,array[0:*]
      integer ia,ib           // Local
      real fx

      ia=int(f)
      if (f < areal(ia)) ia=ia-1
      fx=f-areal(ia)
      ib=ia+1
      ia=min(max(0,ia),n-1)
      ib=min(max(0,ib),n-1)
      interpolate1=array1(ia)*(one-fx)+array1(ib)*fx
      
      return
      end

@ One-dimensional interpolation and extrapolation. This is a trial
version; extensions to higher dimension will come only after testing.

@m array1(i) array[i]
      
@<Functions...@>=
      function extrapolate1(f,array,n)
      implicit_none_f77
      implicit_none_f90
      real extrapolate1         // Function
      integer n                 // Input
      real f,array[0:*]
      integer ia,ib           // Local
      real fx

      if (f < zero) then
         ia=0
         ib=1
         fx=f
      else if (f > areal(n-1)) then
         ia=n-1
         ib=n-2
         fx=areal(n-1)-f
      else                           // Interpolation as above
         ia=int(f)
         if (f < areal(ia)) ia=ia-1  // Do we need this?
         fx=f-areal(ia)
         ib=ia+1
      end if
      assert((ia >= 0) && (ia <= n-1))
      assert((ib >= 0) && (ib <= n-1))
      extrapolate1=array1(ia)*(one-fx)+array1(ib)*fx
      
      return
      end

@ The two-dimensional version.

@m array2(i,j) array[i+n[1]*j]

@<Functions...@>=
      function interpolate2(f,array,n)
      implicit_none_f77
      implicit_none_f90
      real interpolate2         // Function
      integer n[2]              // Input
      real f[2],array[0:*]
      integer i,ia[2],ib[2]   // Local
      real fx[2]

      do i=1,2
         ia[i]=int(f[i])
         if (f[i] < areal(ia[i])) ia[i]=ia[i]-1
         fx[i]=f[i]-areal(ia[i])
         ib[i]=ia[i]+1
         ia[i]=min(max(0,ia[i]),n[i]-1)
         ib[i]=min(max(0,ib[i]),n[i]-1)
      end do
      interpolate2=
     $     array2(ia[1],ia[2])*(one-fx[1])*(one-fx[2])+
     $     array2(ia[1],ib[2])*(one-fx[1])*fx[2]+
     $     array2(ib[1],ia[2])*fx[1]*(one-fx[2])+
     $     array2(ib[1],ib[2])*fx[1]*fx[2]

      return
      end

@ The three-dimensional version.

@m array3(i,j,k) array[i+n[1]*(j+n[2]*k)]

@<Functions...@>=
      function interpolate3(f,array,n)
      implicit_none_f77
      implicit_none_f90
      real interpolate3         // Function
      integer n[3]              // Input
      real f[3],array[0:*]
      integer i,ia[3],ib[3]   // Local
      real fx[3]

      do i=1,3
         ia[i]=int(f[i])
         if (f[i] < areal(ia[i])) ia[i]=ia[i]-1
         fx[i]=f[i]-areal(ia[i])
         ib[i]=ia[i]+1
         ia[i]=min(max(0,ia[i]),n[i]-1)
         ib[i]=min(max(0,ib[i]),n[i]-1)
      end do
      interpolate3=
     $     array3(ia[1],ia[2],ia[3])*(one-fx[1])*(one-fx[2])*(one-fx[3])+
     $     array3(ia[1],ia[2],ib[3])*(one-fx[1])*(one-fx[2])*fx[3]+
     $     array3(ia[1],ib[2],ia[3])*(one-fx[1])*fx[2]*(one-fx[3])+
     $     array3(ia[1],ib[2],ib[3])*(one-fx[1])*fx[2]*fx[3]+
     $     array3(ib[1],ia[2],ia[3])*fx[1]*(one-fx[2])*(one-fx[3])+
     $     array3(ib[1],ia[2],ib[3])*fx[1]*(one-fx[2])*fx[3]+
     $     array3(ib[1],ib[2],ia[3])*fx[1]*fx[2]*(one-fx[3])+
     $     array3(ib[1],ib[2],ib[3])*fx[1]*fx[2]*fx[3]
      
      return
      end
      
@ The four-dimensional version.

@m array4(i,j,k,l) array[i+n[1]*(j+n[2]*(k+n[3]*l))]

@<Functions...@>=
      function interpolate4(f,array,n)
      implicit_none_f77
      implicit_none_f90
      real interpolate4         // Function
      integer n[4]              // Input
      real f[4],array[0:*]
      integer i,ia[4],ib[4]   // Local
      real fx[4],ia1,ib1

      do i=1,4
         ia[i]=int(f[i])
         if (f[i] < areal(ia[i])) ia[i]=ia[i]-1
         fx[i]=f[i]-areal(ia[i])
         ib[i]=ia[i]+1
         ia[i]=min(max(0,ia[i]),n[i]-1)
         ib[i]=min(max(0,ib[i]),n[i]-1)
      end do
      ia1=
     $     array4(ia[1],ia[2],ia[3],ia[4])*(one-fx[1])*(one-fx[2])*(one-fx[3])*(one-fx[4])+
     $     array4(ia[1],ia[2],ia[3],ib[4])*(one-fx[1])*(one-fx[2])*(one-fx[3])*fx[4]+
     $     array4(ia[1],ia[2],ib[3],ia[4])*(one-fx[1])*(one-fx[2])*fx[3]*(one-fx[4])+
     $     array4(ia[1],ia[2],ib[3],ib[4])*(one-fx[1])*(one-fx[2])*fx[3]*fx[4]+
     $     array4(ia[1],ib[2],ia[3],ia[4])*(one-fx[1])*fx[2]*(one-fx[3])*(one-fx[4])+
     $     array4(ia[1],ib[2],ia[3],ib[4])*(one-fx[1])*fx[2]*(one-fx[3])*fx[4]+
     $     array4(ia[1],ib[2],ib[3],ia[4])*(one-fx[1])*fx[2]*fx[3]*(one-fx[4])+
     $     array4(ia[1],ib[2],ib[3],ib[4])*(one-fx[1])*fx[2]*fx[3]*fx[4]
      ib1=
     $     array4(ib[1],ia[2],ia[3],ia[4])*fx[1]*(one-fx[2])*(one-fx[3])*(one-fx[4])+
     $     array4(ib[1],ia[2],ia[3],ib[4])*fx[1]*(one-fx[2])*(one-fx[3])*fx[4]+
     $     array4(ib[1],ia[2],ib[3],ia[4])*fx[1]*(one-fx[2])*fx[3]*(one-fx[4])+
     $     array4(ib[1],ia[2],ib[3],ib[4])*fx[1]*(one-fx[2])*fx[3]*fx[4]+
     $     array4(ib[1],ib[2],ia[3],ia[4])*fx[1]*fx[2]*(one-fx[3])*(one-fx[4])+
     $     array4(ib[1],ib[2],ia[3],ib[4])*fx[1]*fx[2]*(one-fx[3])*fx[4]+
     $     array4(ib[1],ib[2],ib[3],ia[4])*fx[1]*fx[2]*fx[3]*(one-fx[4])+
     $     array4(ib[1],ib[2],ib[3],ib[4])*fx[1]*fx[2]*fx[3]*fx[4]

      interpolate4=ia1+ib1
      
      return
      end
      
@ The five-dimensional version.

@m array5(i,j,k,l,m) array[i+n[1]*(j+n[2]*(k+n[3]*(l+n[4]*m)))]

@<Functions...@>=
      function interpolate5(f,array,n)
      implicit_none_f77
      implicit_none_f90
      real interpolate5         // Function
      integer n[5]              // Input
      real f[5],array[0:*]
      integer i,ia[5],ib[5]   // Local
      real fx[5],ia1ia2,ia1ib2,ib1ia2,ib1ib2

      do i=1,5
         ia[i]=int(f[i])
         if (f[i] < areal(ia[i])) ia[i]=ia[i]-1
         fx[i]=f[i]-areal(ia[i])
         ib[i]=ia[i]+1
         ia[i]=min(max(0,ia[i]),n[i]-1)
         ib[i]=min(max(0,ib[i]),n[i]-1)
      end do
      ia1ia2=
     $     array5(ia[1],ia[2],ia[3],ia[4],ia[5])*(one-fx[1])*(one-fx[2])*(one-fx[3])*(one-fx[4])*(one-fx[5])+
     $     array5(ia[1],ia[2],ia[3],ia[4],ib[5])*(one-fx[1])*(one-fx[2])*(one-fx[3])*(one-fx[4])*fx[5]+
     $     array5(ia[1],ia[2],ia[3],ib[4],ia[5])*(one-fx[1])*(one-fx[2])*(one-fx[3])*fx[4]*(one-fx[5])+
     $     array5(ia[1],ia[2],ia[3],ib[4],ib[5])*(one-fx[1])*(one-fx[2])*(one-fx[3])*fx[4]*fx[5]+
     $     array5(ia[1],ia[2],ib[3],ia[4],ia[5])*(one-fx[1])*(one-fx[2])*fx[3]*(one-fx[4])*(one-fx[5])+
     $     array5(ia[1],ia[2],ib[3],ia[4],ib[5])*(one-fx[1])*(one-fx[2])*fx[3]*(one-fx[4])*fx[5]+
     $     array5(ia[1],ia[2],ib[3],ib[4],ia[5])*(one-fx[1])*(one-fx[2])*fx[3]*fx[4]*(one-fx[5])+
     $     array5(ia[1],ia[2],ib[3],ib[4],ib[5])*(one-fx[1])*(one-fx[2])*fx[3]*fx[4]*fx[5]
      ia1ib2=
     $     array5(ia[1],ib[2],ia[3],ia[4],ia[5])*(one-fx[1])*fx[2]*(one-fx[3])*(one-fx[4])*(one-fx[5])+
     $     array5(ia[1],ib[2],ia[3],ia[4],ib[5])*(one-fx[1])*fx[2]*(one-fx[3])*(one-fx[4])*fx[5]+
     $     array5(ia[1],ib[2],ia[3],ib[4],ia[5])*(one-fx[1])*fx[2]*(one-fx[3])*fx[4]*(one-fx[5])+
     $     array5(ia[1],ib[2],ia[3],ib[4],ib[5])*(one-fx[1])*fx[2]*(one-fx[3])*fx[4]*fx[5]+
     $     array5(ia[1],ib[2],ib[3],ia[4],ia[5])*(one-fx[1])*fx[2]*fx[3]*(one-fx[4])*(one-fx[5])+
     $     array5(ia[1],ib[2],ib[3],ia[4],ib[5])*(one-fx[1])*fx[2]*fx[3]*(one-fx[4])*fx[5]+
     $     array5(ia[1],ib[2],ib[3],ib[4],ia[5])*(one-fx[1])*fx[2]*fx[3]*fx[4]*(one-fx[5])+
     $     array5(ia[1],ib[2],ib[3],ib[4],ib[5])*(one-fx[1])*fx[2]*fx[3]*fx[4]*fx[5]
      ib1ia2=
     $     array5(ib[1],ia[2],ia[3],ia[4],ia[5])*fx[1]*(one-fx[2])*(one-fx[3])*(one-fx[4])*(one-fx[5])+
     $     array5(ib[1],ia[2],ia[3],ia[4],ib[5])*fx[1]*(one-fx[2])*(one-fx[3])*(one-fx[4])*fx[5]+
     $     array5(ib[1],ia[2],ia[3],ib[4],ia[5])*fx[1]*(one-fx[2])*(one-fx[3])*fx[4]*(one-fx[5])+
     $     array5(ib[1],ia[2],ia[3],ib[4],ib[5])*fx[1]*(one-fx[2])*(one-fx[3])*fx[4]*fx[5]+
     $     array5(ib[1],ia[2],ib[3],ia[4],ia[5])*fx[1]*(one-fx[2])*fx[3]*(one-fx[4])*(one-fx[5])+
     $     array5(ib[1],ia[2],ib[3],ia[4],ib[5])*fx[1]*(one-fx[2])*fx[3]*(one-fx[4])*fx[5]+
     $     array5(ib[1],ia[2],ib[3],ib[4],ia[5])*fx[1]*(one-fx[2])*fx[3]*fx[4]*(one-fx[5])+
     $     array5(ib[1],ia[2],ib[3],ib[4],ib[5])*fx[1]*(one-fx[2])*fx[3]*fx[4]*fx[5]
      ib1ib2=
     $     array5(ib[1],ib[2],ia[3],ia[4],ia[5])*fx[1]*fx[2]*(one-fx[3])*(one-fx[4])*(one-fx[5])+
     $     array5(ib[1],ib[2],ia[3],ia[4],ib[5])*fx[1]*fx[2]*(one-fx[3])*(one-fx[4])*fx[5]+
     $     array5(ib[1],ib[2],ia[3],ib[4],ia[5])*fx[1]*fx[2]*(one-fx[3])*fx[4]*(one-fx[5])+
     $     array5(ib[1],ib[2],ia[3],ib[4],ib[5])*fx[1]*fx[2]*(one-fx[3])*fx[4]*fx[5]+
     $     array5(ib[1],ib[2],ib[3],ia[4],ia[5])*fx[1]*fx[2]*fx[3]*(one-fx[4])*(one-fx[5])+
     $     array5(ib[1],ib[2],ib[3],ia[4],ib[5])*fx[1]*fx[2]*fx[3]*(one-fx[4])*fx[5]+
     $     array5(ib[1],ib[2],ib[3],ib[4],ia[5])*fx[1]*fx[2]*fx[3]*fx[4]*(one-fx[5])+
     $     array5(ib[1],ib[2],ib[3],ib[4],ib[5])*fx[1]*fx[2]*fx[3]*fx[4]*fx[5]

      interpolate5=ia1ia2+ia1ib2+ib1ia2+ib1ib2
      
      return
      end

@ Simple function to identify bounding indices prior to interpolation for 
nonuniform spacing cases. This assumes that |array| decreases or 
increases monotonically. Taken from Numerical Recipes.

@<Functions...@>=
      function find_index(x,array,n)
      implicit_none_f77
      implicit_none_f90
      real find_index            // Function
      integer n                  // Input
      real x,array[0:*]
      integer jl, jm, ju     // Local

      jl=-1
      ju=n
loop1: continue
      if (ju-jl > 1) then
         jm=(ju+jl)/2
/*
   The |.eqv.| here is what allows this to work for both
   increasing and decreasing functions.
*/
         if ((array[n-1] > array[0]) .eqv. (x > array[jm])) then
            jl=jm
         else
            ju=jm
         end if
         goto loop1
      end if
      jl=min(max(0,jl),n-2)

/* Arranged so that if $|x| < |array[0]|, |find_index| < 0$ and if 
   $|x| > |array[n-1]|$,
   $|find_index| > |n| - 1$. In either case, the interpolation routines will
   yield the limiting values. 
*/
      find_index=(x - array[jl]) / (array[jl+1] - array[jl]) + jl

      return
      end
      
@ Initialize ``base'' arrays for both reaction and PMI data. Done via
subroutine to allow one routine to handle both rank 1 and 2 cases.

@<Functions...@>=
      subroutine init_base(base,size)
      implicit_none_f77
      implicit_none_f90
      integer size                        // Input
      integer base[size]
      integer i                           // Local

      do i=1,size
         base[i]=int_unused
      end do

      return
      end

@ Interpolates a 1-D array of values from one grid to another. The values
may be interpolated linearly or logarithmically. The grid indices 
|new_grid| have already been matched up to the old ones.

@<Functions...@>=
      subroutine interpolate_grid(new_values,old_values,value_spacing,
     $     new_grid,n,nold)
      implicit_none_f77
      implicit_none_f90
                                                        
      real new_values[0:*],old_values[0:*],new_grid[0:*]  // Input
      character*(*) value_spacing
      integer n,nold

      integer i                                           // Local

      external interpolate1                               // External
      real interpolate1

      if (value_spacing == 'log') then
         do i=0,nold-1
            old_values[i]=log(old_values[i])
         end do
      else
         assert(value_spacing == 'linear')
      end if

      do i=0,n-1
         new_values[i]=interpolate1(new_grid[i],old_values,nold)
         if (value_spacing == 'log') then
            new_values[i]=exp(new_values[i])
         end if
      end do

      return
      end

@ Interpolates a 2-D array of values from one grid to another. The values
may be interpolated linearly or logarithmically. The grid indices 
|new_grid| have already been matched up to the old ones.

@<Functions...@>=
      subroutine interpolate_grid2(new_values,old_values,value_spacing,
     $     new_grid_m,new_grid_n,m,n,mold,nold)
      implicit_none_f77
      implicit_none_f90
                                                        
      integer m,n,mold,nold                                  // Input
      real new_values[0:*][0:n-1],old_values[0:*][0:nold-1], 
     $     new_grid_m[0:*],new_grid_n[0:*]
      character*(*) value_spacing

      integer i,j                                            // Local
      integer dim[2]
      real f[2]

      external interpolate2                                  // External
      real interpolate2

      if (value_spacing == 'log') then
         do i=0,mold-1
            do j=0,nold-1
               old_values[i][j]=log(old_values[i][j])
            end do
         end do
      else
         assert(value_spacing == 'linear')
      end if

      dim[1]=nold
      dim[2]=mold
      do i=0,m-1
         f[2]=new_grid_m[i]
         do j=0,n-1
            f[1]=new_grid_n[j]
            new_values[i][j]=interpolate2(f,old_values,dim)
            if (value_spacing == 'log') then
               new_values[i][j]=exp(new_values[i][j])
            end if
         end do
      end do

      return
      end

@ Interpolates a 3-D array of values from one grid to another. The values
may be interpolated linearly or logarithmically. The grid indices 
|new_grid| have already been matched up to the old ones.

@<Functions...@>=
      subroutine interpolate_grid3(new_values,old_values,value_spacing,
     $     new_grid_l,new_grid_m,new_grid_n,l,m,n,lold,mold,nold)
      implicit_none_f77
      implicit_none_f90
                                                        
      integer l,m,n,lold,mold,nold                          // Input
      real new_values[0:*][0:m-1][0:n-1],            
     $     old_values[0:*][0:mold-1][0:nold-1],
     $     new_grid_l[0:*],new_grid_m[0:*],new_grid_n[0:*]
      character*(*) value_spacing

      integer i,j,k                                          // Local
      integer dim[3]
      real f[3]

      external interpolate3                                  // External
      real interpolate3

      if (value_spacing == 'log') then
         do k=0,lold-1
            do i=0,mold-1
               do j=0,nold-1
                  old_values[k][i][j]=log(old_values[k][i][j])
               end do
            end do
         end do
      else
         assert(value_spacing == 'linear')
      end if

      dim[1]=nold
      dim[2]=mold
      dim[3]=lold
      do k=0,l-1
         f[3]=new_grid_l[k]
         do i=0,m-1
            f[2]=new_grid_m[i]
            do j=0,n-1
               f[1]=new_grid_n[j]
               new_values[k][i][j]=interpolate3(f,old_values,dim)
               if (value_spacing == 'log') then
                  new_values[k][i][j]=exp(new_values[k][i][j])
               end if
            end do
         end do
      end do

      return
      end

@* INDEX.
