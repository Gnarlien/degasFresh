@* Plasma-Material Interaction (PMI) format definitions.
% $Id: fba0fb8bda440a6d673f6d35499341447888f04f $

\ID{$Id: fba0fb8bda440a6d673f6d35499341447888f04f $}

@I pmi.hweb

@ Information about data used to define plasma-material interactions

@ Constant definitions.

@m pf_spacing_unknown 0          // Types of spacing of data and
@m pf_spacing_linear 1           // independent variable arrays
@m pf_spacing_log 2

@m pf_var_unknown 0             // Indices for the independent variables;
@m pf_var_energy_in 1           // These double as the indices for the
@m pf_var_vel_1_in 2            // |independent_paramaters| array used
@m pf_var_vel_2_in 3            // in the main code.
@m pf_var_vel_3_in 4
@m pf_var_polar_angle_in 5
@m pf_var_t_wall 6
@m pf_var_1st_random_number 7   // These must be consecutive!
@m pf_var_2nd_random_number 8
@m pf_var_3rd_random_number 9
@m pf_var_cos_polar_angle_in 10

@m pf_max_random 3
@m pf_max_indep_params 10

@m pf_unit_string_length 12     // The length of the unit specifications
@m pf_tag_string_length 20      // The length of variable names and spacings
@m pf_eval_string_length 40     // Routine used to evaluate data

@m pf_table_rank_max 5          // The biggest rank for data tables
@m pf_dep_var_max 5             // Maximum number of dependent variables

@   Accessor functions to make main tables look like multi-dimensional arrays

@m pf_data_table(i,j,k,l,m,n) pf_data_tab[i+pf_tab_index[n][1]*(j+pf_tab_index[n][2]*(k+pf_tab_index[n][3]*(l+pf_tab_index[n][4]*m)))+pf_data_base[n]]

@ variable definitions.

@a
      package_init(pf)

      define_dimen_pk(pf,pf_rank_ind,pf_table_rank_max)
      define_dimen_pk(pf,pf_rank_ind0,0,pf_table_rank_max)
      define_dimen_pk(pf,pf_dep_var_ind,pf_dep_var_max)
      define_dimen_pk(pf,pf_unit_string,pf_unit_string_length)
      define_dimen_pk(pf,pf_tag_string,pf_tag_string_length)
      define_dimen_pk(pf,pf_symbol_string,pm_sy_len)
      define_dimen_pk(pf,pf_eval_string,pf_eval_string_length)

/* The ``size'' variables get used in the table allocation macros. */
      define_var_pk(pf,pf_data_size,INT)
      define_dimen_pk(pf,pf_data_ind,0,pf_data_size-1)

      define_var_pk(pf,pf_num_dep_var,INT)
      define_var_pk(pf,pf_rank,INT,pf_dep_var_ind)
      define_var_pk(pf,pf_tab_index,INT,pf_rank_ind,pf_dep_var_ind)
      define_var_pk(pf,pf_data_base,INT,pf_dep_var_ind)
      define_var_pk(pf,pf_data_inc,INT,pf_dep_var_ind)

      define_var_pk(pf,pf_name,CHAR,pf_symbol_string)
      define_var_pk(pf,pf_spacing,CHAR,pf_tag_string,pf_rank_ind0,pf_dep_var_ind)
      define_var_pk(pf,pf_var,CHAR,pf_tag_string,pf_rank_ind0,pf_dep_var_ind)
      define_var_pk(pf,pf_units,CHAR,pf_unit_string,pf_rank_ind0,pf_dep_var_ind)
      define_var_pk(pf,pf_eval_name,CHAR,pf_eval_string,pf_dep_var_ind)

      define_var_pk(pf,pf_min,FLOAT,pf_rank_ind,pf_dep_var_ind)
      define_var_pk(pf,pf_max,FLOAT,pf_rank_ind,pf_dep_var_ind)
      define_var_pk(pf,pf_mult,FLOAT,pf_rank_ind0,pf_dep_var_ind)

      define_varp_pk(pf,pf_data_tab,FLOAT,pf_data_ind)
      define_varlocal_pk(pf,pf_version,CHAR,string)
      package_end(pf)


@ Common blocks definitions.

@f pf_decls integer
@m pf_decls
      integer old_size @;

@ Other macros

/*
   |set_base(x,y)| is used to set the array |x_base(i)| which points to the
   first element of the |i|th slice of the rank 1 array |x_tab|. The length
   of each slice is provided by the input array |inc(i)| (set up via |set_inc|). 
   The total size of |x_tab| is stored in |x_size|.
*/
@m set_base(x,inc)
      $ASSERT( range_min(ind_##x##_base_1) == range_min(ind_##inc##_1) && range_max(ind_##x##_base_1) == range_max(ind_##inc##_1)) 
      x##_base[range_min(ind_##x##_base_1)]=0;
      $DO(I,range_min(ind_##x##_base_1)+1,range_max(ind_##x##_base_1)) {
         x##_base[I]=x##_base[I-1]+inc[I-1];
      }
      x##_size=x##_base[range_max(ind_##x##_base_1)]+inc[range_max(ind_##inc##_1)] @;

/*
   From the array |y(m,n)|, |set_inc| computes
   the number of elements implied in the |m|th dimensional
   object represented by each |n| and stores it in |x_inc(n)|.
   The first loop is over the the dependent variables;
   the second is over the rank of each dependent variable.
*/
@m set_inc(x,y)
/*  \begin{verbatim}     $ASSERT( rank##y == 2) \end{verbatim}  */
      $DO(J,range_min(ind_##y##_2),range_max(ind_##y##_2)) {
         x##_inc[J]=1;
         $DO(I,range_min(ind_##y##_1),range_max(ind_##y##_1)) {
            x##_inc[J]=x##_inc[J]*y[I,J]; 
         }
      }

/*
   |pf_ragged_alloc| automatically sets
   up and allocates memory for ``ragged'' arrays used to store
   the main tabular data. The first argument
   is intended to be a root name. A family of arrays sharing that root
   name are required for this macro. These are |x_base| (pointer to
   the starting point of individual array slices), |x_tab| (the 1-D
   array which will actually be allocated), |x_size| (scalar which
   contains the total number of elements), and |x_inc| (number of 
   elements in a given array slice; i.e., the increment). The macro
   |set_inc| is called to set |x_inc|. A separate
   accessor macro is used to equivalence |x_tab| to the apparently
   multi-rank array seen by the user.

   |y| describes the rank and size of each dependent variable; namely,
   it will be the array |pf_tab_index| defined above. |x| will be 
   |pf_data|.
*/
@m pf_ragged_alloc(x,y)
      set_inc(x,y);
      set_base(x,x##_inc);
      var_alloc(x##_tab) @;

/*
   |pf_ragged_realloc| is exactly like |pf_ragged_alloc| except for saving
   the |old_size| and finishing with a call to |var_realloc|. Since |x_base|
   etc. are recomputed from scratch, the only requirement on the change in
   the array dimensions is that the user add on to the end (rather than 
   insert in between existing slices) of the table. 
*/
@m pf_ragged_realloc(x,y)
      old_size=x##_size;
      set_inc(x,y);
      set_base(x,x##_inc);
      var_realloc(x##_tab,old_size-1,x##_size-1) @;      

@* PMI format class attribute descriptions.

@ Define structures used to specify plasma-material interaction data.
Prefix is |pf|.

This class provides a format for external storage of data which deal
with a particular PMI. Here, the subscript |j| denotes the index
for dependent variables, while 
the nonzero values of the subscript |i| represent the independent
variables needed to determine a particular value of variable |j|.

\begin{description}

  \item[|pf_data_size|] Size of one-dimensional array containing all data for
this PMI.

  \item[|pf_num_dep_var|] Number of dependent variables associated with 
this PMI.

  \item[|pf_rank[j]|] Integer number of independent variables for 
the |j|th dependent variable.

  \item[|pf_tab_index[j][i]|] Integer
number of values used for the |i|th independent variable of the |j|th 
dependent variable.

  \item[|pf_data_base[j]|] Index in |pf_data_tab|
at which the data for the |j|th dependent variable begin.
This array is set by the macros associated with |pf_ragged_alloc| and
|pf_ragged_realloc|.

  \item[|pf_data_inc[j]|] Is the number of elements in |pf_data_table|
required for the |j|th dependent variable. 
This array is set by the macros associated with |pf_ragged_alloc| and
|pf_ragged_realloc|.

  \item[|pf_name|] String (length |pm_sy_len|) naming the PMI.
Same as the name of the PMI in the |pm| class; that is, it should match
|pm_sy|.

  \item[|pf_spacing[j][i]|] String (length |pf_tag_string_length|)
describing the way the data are to be
interpolated. Examples are `linear', `log', and 'nonuniform'; 
applies to tabular data only.

  \item[|pf_var[j][i]|] String (length |pf_tag_string_length|)
describing the |i|th independent variable of the |j|th dependent variable.
|i| = 0 refers to the dependent variable itself.
Examples are 'yield', 'energy\_in', etc.; see |pmiformat.hweb| for a
complete list.

  \item[|pf_units[j][i]|] String (length |pf_eval_string_length|) 
providing the units for the |i|th independent variable
|i|. String providing the units for this quantity; 
may be in any system.

  \item[|pf_eval_name[j]|] String 
(length |pf_eval_string_length|) identifying the means for
evaluating the |j|th dependent variable. 
The most prevalent value is ``table''; other
values must correspond to the name of a fitting subroutine. See 
|plate.web| and the description of the |pd| class
for more details. Note that in some instances, the appropriate
dependent ``variable'' is really a vector (i.e., velocity); in this case,
tabular evaluation (which can return only a single scalar) makes no sense.

  \item[|pf_min[j][i]|] Floating point minimum value to be used for the 
|i|th independent variable of the |j|the dependent variable.
It will be combined with the maximum and the number
of values to actually define the array of independent variable values.

  \item[|pf_max[j][i]|] Floating point maximum value to be used for 
the |i|th independent of the |j|th depdendent variable.

  \item[|pf_mult[j][i]|] Floating point multipier for the |i|th
independent variable of the |j|th dependent variable. |i| = 0 refers
to the dependent variable itself.
It should provide the conversion factor from |pf_units[j][i]| to the 
MKS system.

  \item[|pf_data_tab[macro_index]|] is the actual data object which
holds the data. As described above, this
is a 1-D array; its size is |pf_data_size|, an integer variable set
by the macros |pf_ragged_alloc| and |pf_ragged_realloc|.
\end{description}

@ Routines using PMI data.

\begin{description}
  \item[|pf_data_table(i,j,k,l,m,n)|] Multidimensional accessor function to
the PMI data provided for ease of use; the integers |i| through |m| are the
independent variable indices, 0 $\leq$ |i| $\leq$ |pf_tab_index[n][1]|-1, etc.
where |n| is the dependent variable.

  \item[|pf_ragged_alloc(pf_data,pf_tab_index)|] Computes sizes and base 
addresses of the one-dimensional data array |pf_data_tab| (|pf_data| is a 
root name here) based on the multi-dimensional information provided by 
|pf_tab_index|. There is additional documentation of a similar macro in 
|pmiformat.hweb|.

  \item[|pf_ragged_realloc(pf_data,pf_tab_index)|] Makes changes to size
of one-dimensional data array |pf_data_tab| based on a revised |pf_tab_index|.
The user must be adding to the end of the table for this to work properly.
\end{description}

