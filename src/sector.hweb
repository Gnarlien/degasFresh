@* Sector definitions.

% $Id: 63f36c9b540d39b37bdeebfe3e386b865c971cf9 $

\ID{$Id: 63f36c9b540d39b37bdeebfe3e386b865c971cf9 $}

@ A stratum is identified by a positive integer.

@f sc_decl integer

@m sc_args(x) x

@m sc_dummy(x) x

@m sc_decl(x) integer x @;

@m sc_plasma_decl(x) integer x @;
@m sc_target_decl(x) integer x @;
@m sc_wall_decl(x) integer x @;

@m sc_copy(x,y) y=x @;

@m sc_check(x) (x > 0 && x <= nsectors)

@m sc_compare(sect,zone,face,stratum,seg) ((zone == sector_zone[sect]) &&
      (face == sector_surface[sect]) && (stratum == strata[sect]) &&
      (seg == sector_strata_segment[sect])) @;

@m sc_plasma_check(x) (x > 0 && x <= sc_plasma_num)
@m sc_vacuum_check(x) (x > 0 && x <= sc_vacuum_num)
@m sc_target_check(x) (x > 0 && x <= sc_target_num)
@m sc_wall_check(x) (x > 0 && x <= sc_wall_num)
@m sc_exit_check(x) (x > 0 && x <= sc_exit_num)
@m sc_diag_check(x,g) (x > 0 && x <= diagnostic_num_sectors[g])

// Define these to work around the [0] element.

@m diag_lookup(name) string_lookup(name,diagnostic_grp_name[1],sc_diagnostic_grps)

@m plasma_lookup(sector) int_lookup(sector,plasma_sector[1],sc_plasma_num)
@m target_lookup(sector) int_lookup(sector,target_sector[1],sc_target_num)
@m wall_lookup(sector) int_lookup(sector,wall_sector[1],sc_wall_num)

@m sc_unknown 0      // Sector types
@m sc_vacuum 1
@m sc_plasma 2
@m sc_target 3
@m sc_wall 4
@m sc_exit 5
@m sc_diagnostic(grp) 6+grp-1 @;  // I guess this will work as long as new ones go in before here
@m sc_type_max 17

@m sc_diag_unknown 0  // Independent variables for diagnostic groups
@m sc_diag_energy 1
@m sc_diag_angle 2

@m sc_diag_spacing_unknown 0
@m sc_diag_spacing_linear 1
@m sc_diag_spacing_log 2

@m sc_diag_name_len 40

@m diagnostic_sector(i,grp) diagnostic_sector_tab[diagnostic_grp_base[grp]+i-1]  // Used anywhere?

@ Define the dimensions and variables used by the geometry routines.
Note that the dimensions in this file begin at 0. However, the 0 index 
isn't really used.  They are defined this way to
accomodate netcdf's wish to say that a zero length dimension is
unlimited. Namely, until sectors are in wide use, |nsectors|, |sc_vacuum_num|,
etc. will $= 0$ for many cases. If the corresponding dimensions began at
$1$, the {\em length} of the dimension would be computed to be $=0$; hence,
netcdf would think we meant these dimensions be unlimited. We would then
get an error for having more than one such dimension in the file. By instead
starting them at $0$, the dimensions have a length of at least $1$.

@a
      package_init(sc)
      define_var_pk(sc,nsectors,INT)
      define_dimen_pk(sc,sector_ind,0,nsectors)
      define_dimen_pk(sc,sector_neg_pos_ind,sc_neg,sc_pos)
      define_dimen_pk(sc,sector_type_ind,sc_type_max)

/*
   These two provide external code labels for each sector, analogous to
   |zone_index|. E.g., |strata| would correspond to DEGAS |walls| and
   |sector_strata_segment| to wall segments.
*/
      define_varp_pk(sc,strata,INT,sector_ind)  
      define_varp_pk(sc,sector_strata_segment,INT,sector_ind)

      define_varp_pk(sc,sectors,INT,sector_ind)
      define_varp_pk(sc,sector_zone,INT,sector_ind)
      define_varp_pk(sc,sector_surface,INT,sector_ind)
      define_varp_pk(sc,sector_points,FLOAT,vector,sector_neg_pos_ind,sector_ind)
      define_varp_pk(sc,sector_type_pointer,INT,sector_type_ind,sector_ind)

/* Subclasses; first |vacuum| */
      define_var_pk(sc,sc_vacuum_num,INT)
      define_dimen_pk(sc,vacuum_ind,0,sc_vacuum_num)
      define_varp_pk(sc,vacuum_sector,INT,vacuum_ind) 
          // Properties: ?

/* |plasma| subclass */
      define_var_pk(sc,sc_plasma_num,INT)
      define_dimen_pk(sc,plasma_ind,0,sc_plasma_num)
      define_varp_pk(sc,plasma_sector,INT,plasma_ind)

/* |target| subclass */
      define_var_pk(sc,sc_target_num,INT)
      define_dimen_pk(sc,target_ind,0,sc_target_num)
      define_varp_pk(sc,target_sector,INT,target_ind)
      define_varp_pk(sc,target_material,INT,target_ind)
      define_varp_pk(sc,target_temperature,FLOAT,target_ind)
      define_varp_pk(sc,target_recyc_coef,FLOAT,target_ind)
          // Properties: field-line-angle-of-incidence, for example

/* |wall| subclass */
      define_var_pk(sc,sc_wall_num,INT)
      define_dimen_pk(sc,wall_ind,0,sc_wall_num)
      define_varp_pk(sc,wall_sector,INT,wall_ind)
      define_varp_pk(sc,wall_material,INT,wall_ind)
      define_varp_pk(sc,wall_temperature,FLOAT,wall_ind)
      define_varp_pk(sc,wall_recyc_coef,FLOAT,wall_ind)

/* |exit| subclass (includes pump) */
      define_var_pk(sc,sc_exit_num,INT)
      define_dimen_pk(sc,exit_ind,0,sc_exit_num)
      define_varp_pk(sc,exit_sector,INT,exit_ind)
@#if 0
      define_varp_pk(sc,exit_albedo,FLOAT,exit_ind)
@#endif

/* |diagnostic| subclass */
      define_var_pk(sc,sc_diagnostic_grps,INT)               

      define_dimen_pk(sc,sc_diag_name_string,sc_diag_name_len)
      define_dimen_pk(sc,diag_grp_ind,0,sc_diagnostic_grps)  

      define_var_pk(sc,sc_diag_max_bins,INT)             

      define_varp_pk(sc,diagnostic_grp_name,CHAR,sc_diag_name_string,diag_grp_ind)
      define_varp_pk(sc,diagnostic_num_sectors,INT,diag_grp_ind)

      define_varp_pk(sc,diagnostic_var,INT,diag_grp_ind)        
                                                                
      define_varp_pk(sc,diagnostic_tab_index,INT,diag_grp_ind)  
      define_varp_pk(sc,diagnostic_min,FLOAT,diag_grp_ind)      
      define_varp_pk(sc,diagnostic_delta,FLOAT,diag_grp_ind)
      define_varp_pk(sc,diagnostic_spacing,INT,diag_grp_ind)
      
      define_varp_pk(sc,diagnostic_grp_base,INT,diag_grp_ind) 
      define_var_pk(sc,sc_diag_size,INT)                      
      define_dimen_pk(sc,sc_diag_ind,0,sc_diag_size-1)        
      define_varp_pk(sc,diagnostic_sector_tab,INT,sc_diag_ind)   

      package_end(sc)

@ Indices

@m sc_neg 0
@m sc_pos 1

/* Constructors (really?) for sector subclasses.
   Any real reason for not doing these as subroutines? */
@m define_sector_vacuum(sc)
      sc_vacuum_num=sc_vacuum_num+1;
      var_realloca(vacuum_sector);
      vacuum_sector[sc_vacuum_num]=sc;
      sector_type_pointer[sc][sc_vacuum]=sc_vacuum_num @;
@m define_sector_plasma(sc)
      sc_plasma_num=sc_plasma_num+1;
      var_realloca(plasma_sector);
      plasma_sector[sc_plasma_num]=sc;
      sector_type_pointer[sc][sc_plasma]=sc_plasma_num; 
@m define_sector_target(sc,mat,temp,recyc)
      sc_target_num=sc_target_num+1;
      var_realloca(target_sector);
      var_realloca(target_material);
      var_realloca(target_temperature);
      var_realloca(target_recyc_coef);
      target_sector[sc_target_num]=sc;
      sector_type_pointer[sc][sc_target]=sc_target_num;
      target_material[sc_target_num]=mat;
      target_temperature[sc_target_num]=temp;
      target_recyc_coef[sc_target_num]=recyc @; 
@m define_sector_wall(sc,mat,temp,recyc)
      sc_wall_num=sc_wall_num+1;
      var_realloca(wall_sector);
      var_realloca(wall_material);
      var_realloca(wall_temperature);
      var_realloca(wall_recyc_coef);
      wall_sector[sc_wall_num]=sc;
      sector_type_pointer[sc][sc_wall]=sc_wall_num;
      wall_material[sc_wall_num]=mat;
      wall_temperature[sc_wall_num]=temp;
      wall_recyc_coef[sc_wall_num]=recyc @;
@m define_sector_exit(sc)
      sc_exit_num=sc_exit_num+1;
      var_realloca(exit_sector);
      exit_sector[sc_exit_num]=sc;
      sector_type_pointer[sc][sc_exit]=sc_exit_num @;
@#if 0
      exit_albedo[sc_exit_num]=alb @;
@#endif

@* Sector class attribute descriptions.

@ Define a sector. Prefix is |sc|.

The default behavior for a surface in DEGAS 2's tracking algorithm is
to stop the flight momentarily (to check for a zone boundary) and then
to continue. In some instances, these surfaces need to do more, e.g.,
\begin{enumerate}
  \item If that surface represents the interface between a plasma or
vacuum zone and a material (solid) or exit zone, the quantities describing
the flight must be altered to represent the effect of that next zone,
  \item If the user wishes to monitor the passing of a flight through a
particular surface, the flight's parameters must be noted and used to
update the appropriate tallies.
\end{enumerate}

To address these needs, DEGAS 2 utilizes the {\em sector} concept.
A sector is identified by a positive integer |sector|.
At a minimum, a sector represents  a coupled surface and 
a zone. More specifically, the surface should be a bounding surface
of a cell comprising the zone (the orientation is important; see below).
The function used to define sectors takes as an optional argument a
second zone. If provided, the function will verify that the input surface
is indeed an interface between the two zones. The programmer should use
this option whenever possible as a consistency check. 

A set of sector subclasses have been established to provide 
clearly defined arrays for storing sector-related properties.
The intention is that the number of these subclasses will change
infrequently; with new properties added occasionally. Hence, we have
opted, for clarity, to make the subclass and property names explicit
rather than store all of this information in some flexible array
structure. 

The sector subclasses are:
\begin{description}
  \item[target] The interface between a plasma zone and a solid zone; the
face used is a surface of the solid zone,
  \item[wall] The interface between a vacuum zone and a solid zone; the
face used is a surface of the solid zone,
  \item[exit] The interface between a vacuum or plasma zone and an
exit zone; the face used is a surface of the exit zone ,
  \item[diagnostic] A diagnostic sector.
  \item[plasma] The complementary interface to a target sector, i.e., using the
surface of the plasma zone.
  \item[vacuum] The complementary interface to a wall sector, i.e., using the
surface of the vacuum zone.
\end{description}

At one point, the elimination of the |plasma| and |vacuum| types was
considered; the desired objectives were, at that time, being met with
just a single sector at each interface.  However, initial work with
nearly symmetric 3-D problems made clear the need for maintaining all
four types. In these cases, the zone type can vary in the third
dimension so that the nature of the interface between adjacent zones can
also vary. By having sectors defined on both sides, the interface can be
completely characterized.

As an example, consider a vertical pipe inserted into the bottom
of an otherwise toroidally symmetric solid annular plate.  Particles
impinging on the plate from above would strike a solid surface
except at the location of the pipe; there, they would travel down
into the pipe. The surface that serves as the interface between the
upper volume and the surface / pipe entrance would be identical,
say, $z = $ constant. However, we can correctly track the particle
through that interface only if we know about the 3-D structure
of the plate / pipe combination. This information would be contained
in the zones used to model the plate and pipe, and not the 
surface between them and the volume above. We can accomplish this
just by defining separate sectors for the plate (say, a |wall| sector)
and the pipe interior (say, a |vacuum| sector). Furthermore, the
gas properties in the volume above may be varying toroidally, leading
to a toroidal discretization of that vacuum region. Each of those
zones could be associated with a different |vacuum| sector. These
sectors could also be used to tally toroidally resolved diagnostics
at the vacuum - plate / pipe interface or to define toroidally
discretized sources at the plate surface. In a toroidally symmetric
(2-D) problem, there is no pipe, and a single sector sufficiently
defines the interface. Hence, the earlier approach of using just
|wall| and |target| sectors.

The |exit| and |diagnostic| subclasses have not been qualitatively
altered since their introduction.
However, the never-implemented |albedo| property
of the exits has been replaced with the equivalent functionality
of the |wall| and |target| recycling coefficients.
The |exit| sector (and the associated |zone| type) has been 
retained; note that particles striking an |exit| sector
are killed without undergoing any
PMI processing. Another useful feature of |exit| sectors 
is that a separate default diagnostic group is defined for them.

A |target| sector is assumed to exist at the interface between adjacent
plasma and solid zones.  The properties |target_material|,
|target_temperature|, and |target_recyc_coef| describe the solid.  
Obviously, the |plasma|
sector is defined using the plasma zone, and the |target| sector is
defined using the target zone.  The sectors' surfaces are of opposite
sign, chosen so that a particle leaving the plasma zone goes ``out'' (in
the sense determined by the surface function's gradient) through the
|plasma| sector's surface and goes ``into'' the |target| sector's
surface.  (Although this also seems obvious, the previous implementation
used the opposite convention.)

The |wall| and |vacuum| sectors exist at the interface between vacuum and solid
zones. They currently differ from the |target| and |plasma| zones only by the
absence of the above-mentioned sheath related properties.

The diagnostic subclass (distinct from the separate, but also arbitrarily
named, |detector| class) properties permit sectors to record information
about sector-crossing flights. Default diagnostic sectors are set up 
using the declared |target|, |wall|, and |exit| sectors. Associated tallies
are defined from these. Related diagnostic sectors with identical properties 
may be collectively ``grouped'' together. There may be several groups of 
diagnostics in a given problem: one to measure particle current to each sector,
one to collect an energy spectrum of arriving particles, etc.
Each sector (a given surface and zone) may belong to one of the 
non-diagnostic subclasses (this is only a logical restriction and is
unenforced), as well as to one or more diagnostic groups. Sectors
may also be defined solely to serve as diagnostic surfaces.

The |strata| and |sector_strata_segment| arrays provide
labels for coordinating input and output data with external codes. The
intention is to use them in the same way as the |zn_index| for 
individual zones. For historical reasons, a single stratum is used to
for sectors on both sides of a boundary (e.g., plasma-surface interface).

\begin{description}
  \item[|nsectors|] Total number of sectors in the problem.

  \item[|strata[sector]|] External (arbitrary) label for a group of sectors. 
In the nomenclature of the original DEGAS, one stratum would correspond to
a single wall.

  \item[|sector_strata_segment[sector]|] Another external label intended
to enumerate individual sectors in a stratum; the original DEGAS analog
would be wall segments.

  \item[|sectors[pointer]|] Array pointed to by |surface_sectors| (see
|geometry.web|) via the integer index |pointer|. The array |sectors| provides
the sector(s) index |sector| associated with a given surface. Need to use a
pointer here rather than a direct array with a |surface| index since there
may indeed be more than one |sector| associated with a given |surface|.
Nonetheless, because of the fact that a sector is defined by a single
(and only one) surface, the number of elements in |sectors| is just
|nsectors|.

  \item[|sector_zone[sector]|] Returns the zone (class |zn|)
associated with |sector|.

  \item[|sector_surface[sector]|] Returns the surface (see |geomint.hweb|)
associated with |sector|.

  \item[|sector_points[i,e,sector]|] Returns the
|i|th component of the position
vector at one end (i.e., |e| = 0 or 1) of |sector|.

  \item[|sector_type_pointer[sector][type]|] Integer index into the list
of the |type| subclass corresponding to |sector| (each sector may belong
to more than one subclass).
\end{description}

{\bf vacuum subclass}
\begin{description}
  \item[|sc_vacuum_num|] Number of sectors in the vacuum subclass.

  \item[|vacuum_sector[vacuum_ind]|] Returns the sector index corresponding
to index |vacuum_ind| in the vacuum subclass list.
\end{description}

{\bf plasma subclass}
\begin{description}
  \item[|sc_plasma_num|] Number of sectors in the plasma subclass.

  \item[|plasma_sector[plasma_ind]|] Returns the sector index corresponding
to index |plasma_ind| in the plasma subclass list.

  \item[|plasma_e_ion_delta[plasma_ind]|] (OBSOLETE.  This
and the other two |plasma_e_ion| parameters have been replaced
by similarly named miscellaneous source parameters.  Retaining
only this documentation for archival reference.) 
Contains $\delta$ (eV), the constant
(i.e., not a function of the incident ion parameters) contribution
to the incident ion energy following acceleration through the sheath:
$E_{\rm ion} = \delta + \alpha E_{\rm i,0} + \phi_{\rm s} Z_{i}$.

  \item[|plasma_e_ion_mult[plasma_ind]|] Contains $\alpha$, 
the multiplier on the sampled ion's energy, $E_{\rm i,0}$, in the
expression for the incident ion energy following acceleration through 
the sheath: $E_{\rm ion} = \delta + \alpha E_{\rm i,0} + \phi_{\rm s} Z_{i}$.

  \item[|plasma_e_ion_sheath[plasma_ind]|] Contains $\phi_{\rm s}$ (eV),
the sheath potential contribution to the incident ion energy; this
gets multiplied by the sampled ions charge $Z_{i}$: 
$E_{\rm ion} = \delta + \alpha E_{\rm i,0} + \phi_{\rm s} Z_{i}$.
\end{description}

{\bf target subclass}
\begin{description}
  \item[|sc_target_num|] Number of sectors in the target subclass.

  \item[|target_sector[target_ind]|] Returns the sector index corresponding
to index |target_ind| in the target subclass list.

  \item[|target_material[target_ind]|] Integer index into the materials
class |ma| to be used to identify the plasma-material interactions for
the target sector |target_ind|.

  \item[|target_temperature[target_ind]|] Temperature, in joules, of the 
target material comprising the target sector |target_ind|.

  \item[|target_recyc_coef[target_ind]|] Recycling coefficient (1 - 
absorbed fraction) of the target material comprising the target 
sector |target_ind|.

\end{description}

{\bf wall subclass}
\begin{description}
  \item[|sc_wall_num|] Number of sectors in the wall subclass.

  \item[|wall_sector[wall_ind]|] Returns the sector index corresponding
to index |wall_ind| in the wall subclass list.

  \item[|wall_material[wall_ind]|] Integer index into the materials
class |ma| to be used to identify the plasma-material interactions for
the wall sector |wall_ind|.

  \item[|wall_temperature[wall_ind]|] Temperature, in joules, of the 
wall material comprising the wall sector |wall_ind|.

  \item[|wall_recyc_coef[wall_ind]|] Recycling coefficient (1 - 
absorbed fraction) of the wall material comprising the wall 
sector |wall_ind|.
\end{description}

{\bf exit subclass}
\begin{description}
  \item[|sc_exit_num|] Number of sectors in the exit subclass.

  \item[|exit_sector[exit_ind]|] Returns the sector index corresponding
to index |exit_ind| in the exit subclass list.
\end{description}

{\bf diagnostic subclass}
\begin{description}
  \item[|sc_diagnostic_grps|] Number of {\em groups} of diagnostics in this 
subclass.

  \item[|sc_diag_max_bins|] Used in conjunction with |de_max_bins| to check
the dimension for the bins scoring array, |max_bins|.

  \item[|diagnostic_grp_name[group_ind]|] Descriptive label for each 
diagnostic group.

  \item[|diagnostic_num_sectors[group_ind]|] Number of sectors comprising each
diagnostic group.

  \item[|diagnostic_var[group_ind]|] Independent variable for 
spectrum-collecting (e.g., |sc_diag_energy| or incident angle, 
|sc_diag_angle|) diagnostics.

  \item[|diagnostic_tab_index[group_ind]|] Number of bins for 
spectrum-collecting diagnostics. For simplicity, only rank 0 
(designated by |diagnostic_tab_index| = 0) or 1 diagnostics are 
permitted.

  \item[|diagnostic_min[group_ind]|] Minimum value for the independent
variable.

  \item[|diagnostic_delta[group_ind]|] Increment between independent
variable bins.

  \item[|diagnostic_spacing[group_ind]|] Spacing method for independent
variables. Presently only uniform-linear and uniform-log are 
treated.

  \item[|diagnostic_grp_base[group_ind]|] Index into the list of all sectors
for the first member of |groud_ind| (members of each group are required
to be consecutive in this list). This array is used only to set up the
|diagnostic_sector| macro (see below).
  \item[|sc_diag_size|] Total number of diagnostic sectors.

  \item[|diagnostic_sector_tab[diagnostic_ind]|] Sector number corresponding
to the diagnostic number |diagnostic_ind|. Again, this is used only to
set up the |diagnostic_sector| macro.
\end{description}

@ Routines using sectors.

\begin{description}

  \item[|sc_check(sector)|] Verifies that this is a valid sector.

  \item[|sc_compare(sect,zone,face,stratum,seg)|] Compares the
input zone number |zone|, surface number |face|, stratum
label |stratum|, and segment number |seg| with the corresponding
properties of sector |sect|.  If all four match identically,
this macro evaluates as ``true''.

  \item[|sc_plasma_check(p_sector)|] Verifies that |p_sector| is a
valid identifier for a member of the plasma subclass (i.e., |p_sector|
is {\em not} a sector number).

  \item[|sc_vacuum_check(v_sector)|] Verifies that |v_sector| is a
valid identifier for a member of the vacuum subclass (i.e., |v_sector|
is {\em not} a sector number).

  \item[|sc_target_check(t_sector)|] Verifies that |t_sector| is a
valid identifier for a member of the target subclass (i.e., |t_sector|
is {\em not} a sector number).

  \item[|sc_wall_check(w_sector)|] Verifies that |w_sector| is a
valid identifier for a member of the wall subclass (i.e., |w_sector|
is {\em not} a sector number).

  \item[|sc_exit_check(e_sector)|] Verifies that |e_sector| is a
valid identifier for a member of the exit subclass (i.e., |e_sector|
is {\em not} a sector number).

  \item[|sc_diag_check(d_sector,grp)|] Verifies that |d_sector| is a
valid identifier for a member of the diagnostic subclass in diagnostic
group |grp| (i.e., |d_sector| is {\em not} a sector number).

  \item[|diag_lookup(name)|] Returns the integral diagnostic group number
associated with |name|.

  \item[|plasma_lookup(sector)|] Retrieves the index in the plasma subclass
list corresponding to sector.

  \item[|target_lookup(sector)|] Retrieves the index in the target subclass
list corresponding to sector.

  \item[|wall_lookup(sector)|] Retrieves the index in the wall subclass
list corresponding to sector.

  \item[|sc_diagnostic(group)|] Provides the integral sector type 
(analogous to |sc_wall|, |sc_plasma|, etc.) associated with |group|.

  \item[|diagnostic_sector(i,group)|] Sector number corresponding to the
|i|th member of diagnostic group |group|.

  \item[|define_sector_vacuum(sector)|] Adds |sector| to the vacuum sector
subclass.

  \item[|define_sector_plasma(sector,temp)|] Adds |sector| to the plasma sector
subclass. The |temp| property is no longer used, but retained in the
macro for compatibility. 

  \item[|define_sector_target(sector,material,temp,recyc)|] 
Adds |sector| to the 
target sector subclass. It is assumed to made of |material| (member of the
material class |ma|) at temperature |temp|, with recycling coefficient |recyc|.

  \item[|define_sector_wall(sector,material,temp,recyc)|] Adds |sector| to the 
wall sector subclass. It is assumed to made of |material| (member of the
material class |ma|) at temperature |temp|, with recycling coefficient |recyc|.

  \item[|define_sector_exit(sector)|] Adds |sector| to the exit
sector subclass. 
\end{description}
  
