@* Tally definitions.

% $Id: 68ccb2d3e20a0e7ffca627d6157d0209aa72b292 $

\ID{$Id: 68ccb2d3e20a0e7ffca627d6157d0209aa72b292 $}

@I zone.hweb
@I sector.hweb
@I problem.hweb

@ Scoring can happen at one of five points within DEGAS 2: (a) when a
track crosses a sector (e.g., to compute a flux), (b) when a track
travels through a zone (e.g., to compute a track length estimator), 
(c) at a collision event (e.g., to compute a collision estimator),
(d) at a time boundary (e.g., a snapshot estimator of the 
density),
and (e) after the run (to compute a derived score).

Used the word ``tally'' here instead of ``score'' since the two-letter
prefix for the latter would be too similar to those for sectors and
sources.

For further documentation, see the classes.web file.


@f tl_decl integer

@m tl_args(x) x

@m tl_dummy(x) x

@m tl_decl(x) integer x @;

@m tl_copy(x,y) y=x @;

@m tl_check(x) check_tally(tl_args(x))

@ Constant specifications.

@m tl_type_max 3                  // Types of different tallies
@m tl_type_undefined 0
@m tl_type_sector 1
@m tl_type_test 2
@m tl_type_reaction 3

@m tl_est_unknown 0               // Different estimators
@m tl_est_track 1  
@m tl_est_collision 2
@m tl_est_post_process 3
@m tl_est_snapshot 4
@m tl_est_max 4            

@m tl_rank_max 5

@ Indices for the independent variables. These are associated with
strings in subroutine |set_var_list|. Additions here must be made
there as well.

@m tl_index_unknown 0             
@m tl_index_zone 1
@m tl_index_plasma_zone 2
@m tl_index_test 3
@m tl_index_problem_sp 4
@m tl_index_detector 5          
@m tl_index_test_author 6         // Reaction or PMI responsible for $\vec{v}$
@m tl_index_reaction 7
@m tl_index_pmi 8
@m tl_index_material 9
@m tl_index_source_group 10       // A source group. Probably won't be used.
@m tl_index_sector 11
@m tl_index_strata 12
@m tl_index_strata_segment 13
@m tl_index_energy_bin 14
@m tl_index_angle_bin 15
@m tl_index_wavelength_bin 16
@m tl_index_diagnostic 17
@m tl_index_zone_ind_1 18
@m tl_index_zone_ind_2 19
@m tl_index_max 100               // An arbitrary limit

@m tl_name_length 80              // For tally names
@m tl_tag_length 40               // For dependent variable names

@m tl_geom_unknown 0              // Tally geometries
@m tl_geom_volume 1        
@m tl_geom_surface 2       
@m tl_geom_detector 3      
@m tl_geom_global 4 

@m tl_dep_var_scalar 1            // For |tally_dep_var_dim|
@m tl_dep_var_vector 3

@m tl_scoring_index(t,j,ip) pr_var_problem_sp_index(t+j-1,ip[tl_index_problem_sp])

@m tl_cv_unknown 0                // Tally conversions    
@m tl_cv_scaler_unknown 0
@m tl_cv_partner_unknown 0

@m tl_cv_max_conversions 5        // Fixed dimensioning parameters
@m tl_cv_max_scalers 3    
@m tl_cv_max_partners 3
@m tl_cv_max_local_data 5

@m tl_cv_track 1                  // Types of conversions 
@m tl_cv_post 2
@m tl_cv_output 3

@m tl_cv_scale 1                  // Action performed by the conversion
@m tl_cv_to_external_coords 2
@m tl_cv_to_internal_coords 3
@m tl_cv_divide_number 4

@m tl_cv_test_mass 1              // Scalers and other parameters used 
@m tl_cv_problem_sp_mass 2
@m tl_cv_volume 3
@m tl_cv_Pa_per_mTorr 4
@m tl_cv_pos_1 5
@m tl_cv_pos_2 6
@m tl_cv_pos_3 7
@m tl_cv_zone_pos_1 8
@m tl_cv_zone_pos_2 9
@m tl_cv_zone_pos_3 10 
@m tl_cv_three_halves 11

@m tl_cv_max_params 11  

@m scoring_data_max 280            // Length of |scoring_data| array
@m max_bins 200

@ Variable definitions. |tally_ind| is dimensioned from zero to
accomodate netcdf.  The 0 index is unused. ??? Start from 1 for now.

@a
      package_init(tl)

      define_dimen_pk(tl,tally_type_ind,tl_type_max)  
      define_dimen_pk(tl,tally_rank_ind,tl_rank_max)  
      define_dimen_pk(tl,tally_est_ind,tl_est_max)
      define_dimen_pk(tl,tally_reac_ind,pr_reaction_dim+so_type_num)
      define_dimen_pk(tl,tally_name_string,tl_name_length)
      define_dimen_pk(tl,tally_tag_string,tl_tag_length) 
      define_dimen_pk(tl,tally_cv_ptr_ind,tl_cv_max_conversions)
      define_dimen_pk(tl,tally_cv_scaler_ind,tl_cv_max_scalers)
      define_dimen_pk(tl,tally_cv_partner_ind,tl_cv_max_partners)
      define_dimen_pk(tl,tally_index_ind,0,tl_index_max)

      define_var_pk(tl,tl_num,INT)                     
      define_dimen_pk(tl,tally_ind,tl_num)

      define_var_pk(tl,nconversions,INT)
      define_dimen_pk(tl,tally_cv_ind,nconversions)

      define_var_pk(tl,tally_size,INT)                 

      define_varp_pk(tl,tally_type_num,INT,tally_type_ind) 
      define_varp_pk(tl,tally_type,INT,tally_ind)          
      define_varp_pk(tl,tally_geometry,INT,tally_ind)      
      define_varp_pk(tl,tally_geometry_ptr,INT,tally_ind)  
      define_varp_pk(tl,tally_base,INT,tally_ind)          
      define_varp_pk(tl,tally_type_base,INT,tally_type_ind)
      define_varp_pk(tl,tally_rank,INT,tally_ind)    
      define_varp_pk(tl,tally_dep_var_dim,INT,tally_ind)
      define_varp_pk(tl,tally_indep_var,INT,tally_rank_ind,tally_ind) 
      define_varp_pk(tl,tally_tab_index,INT,tally_rank_ind,tally_ind)
      define_varp_pk(tl,tally_name,CHAR,tally_name_string,tally_ind) 
      define_varp_pk(tl,tally_dep_var,INT,tally_ind)

      define_varp_pk(tl,tally_est_test,FLOAT,tally_est_ind,tally_ind)
      define_varp_pk(tl,tally_est_reaction,FLOAT,tally_reac_ind,tally_est_ind,tally_ind)

      define_varp_pk(tl,tally_num_conversions,INT,tally_ind)
      define_varp_pk(tl,tally_cv_ptr,INT,tally_cv_ptr_ind,tally_ind)
      define_varp_pk(tl,tally_cv_action,INT,tally_cv_ind)
      define_varp_pk(tl,tally_cv_type,INT,tally_cv_ind)
      define_varp_pk(tl,tally_cv_num_partners,INT,tally_cv_ind)
      define_varp_pk(tl,tally_cv_scalers,INT,tally_cv_scaler_ind,tally_cv_ind)
      define_varp_pk(tl,tally_cv_partners,INT,tally_cv_partner_ind,tally_cv_ind)
      define_var_pk(tl,tally_var_list,CHAR,tally_tag_string,tally_index_ind)

      define_varlocal_pk(tl,tally_version,CHAR,string)
      package_end(tl)

@ Common blocks definitions.

@f tl_decls integer
@m tl_decls
      logical check_tally;
      integer inc @;

@ Setting up tally information.

/* The |ragged_alloc| macros are similar to those in 
   |pmidata.hweb|. More detailed documentation is given there. */
@m tl_set_baseinc(x,y,subs)
      x##_base##subs##=x##_size;
      inc=1;
      $DO(I,range_min(ind_##y##_1),range_max(ind_##y##_1)) {
        inc=inc*y##subs##[I];
      }
      inc=x##_dep_var_dim##subs*inc @;

@m tl_set_base_size(x,y,subs)
      tl_set_baseinc(x,y,subs);
      x##_size=x##_size+inc @;

@* Tally class attribute descriptions.

@ Define tallies or scores. Prefix is |tl|. 

This class provides the machinery for tabulating
the Monte Carlo scores or tallies which form the basis of the DEGAS 2 output.
The actual output is controlled within the ``output class'' (see below).

There are a total of |tl_num| tallies, each representing an accounting of
how a physical quantity, the ``dependent variable'', depends on a
limited set of problem parameters, the ``independent variables''. The
rank of each tally is in principle arbitrary. Sums over an individual
index could either be carried out after the run, or specified as a
separate tally (e.g., in order to obtain an explicit estimate of the
relative standard deviation in the reduced tally).

For each tally, an estimate of the mean and the relative standard
deviation are provided. The latter is ill-defined for tallies with
non-positive tally contributions.

There are three types of tally determined by the dependent variable:
% Note: the following has been pasted into tallysetup.web.
\begin{description}
  \item[|tl_type_sector|] A simple event score carried out when a flight 
crosses a sector. This can be either a material surface or a purely
diagnostic sector (see the sector class above).

  \item[|tl_type_test|] A tally based solely on the properties of the
test flight itself. The most familiar example is the neutral density.

  \item[|tl_type_reaction|] Tallies associated with reactions and
sources. The most important examples are the sources of background 
particles, momenta, and
energy arising from each reaction in the problem. The same set of
tallies apply to sources. Because this capability was added later,
and for the sake of brevity, the associated variable names refer
only to ``reactions''.
\end{description}

In general, we envision each tally consisting of additive contributions
from one or more estimators. At this time, there are only two 
run time estimators, |tl_est_track| and |tl_est_collision|. The latter
is really a catch-all category since it includes not only collision
based scores of type |tl_type_test|, but also event-based scores
such as those of type |tl_type_sector| and of |tl_type_reaction| which
can only be carried out when the reaction actually occurs or in the
case of sources. The third
type of estimator |tl_est_post_process| must be derived from existing
tallies. This option is implemented presently for only certain reactions,
sources 
and tallies; no effort is made to propagate the standard deviation
values through this process. 
A fourth, |tl_est_snapshot|, scores |tl_type_test| tallies at the
end of a time dependent calculation.  That is, it essentially computes
a tally based on the particle positions and
velocities as they reach |so_time_final|.
There is also a null estimator,
|tl_est_unknown| that provides an easy way to ignore the contribution of,
say, a particular reaction to a score.

The relative contributions of each estimator to a tally are controlled
by the arrays |tally_est_test| (for type |tl_type_est|) and
|tally_est_reaction| (|tl_type_reaction|). Since there is only
one sensible estimator for |tl_type_sector|, no analogous array
is carried along for that type. These arrays contain the multiplicative
factor associated with each estimator for that tally. |tally_est_reaction|
has an additional index so that different estimator
combinations may be specified for each reaction. {\bf Presently, this
multiplicative factor is constrained to be either 0 or 1 with the
sum over estimators equalling 1.} Once more detailed optimization is
carried out, this constraint will be relaxed.

Certain simple manipulations of the tally data can be effected by 
{\em conversions}. The principal examples are scaling a tally by a
constant (e.g., species mass or zone volume) and velocity coordinate
conversion (may be required for coupling DEGAS 2 to a plasma code). 
The conversions are
implemented within the tally class because of the tight links 
between the two sets of ``objects''.
The decision not to establish them as separate classes was motivated in
part by the 
treatment of the geometry transformations. Each tally may have associated 
with it 0 or more (up to |tl_cv_max_conversions|) conversions. 
Each conversion maintains pointers back to its tally so that the conversions
can be carried out completely either by enumerating the conversions 
for each tally (as is done during tracking) or vice-versa (the case for
post-processing). The converted data replace the original so that dimension
reducing conversions could not be done with the present approach.

Conversions are carried out at three points during the run; each is 
designated as a different conversion ``type'': |tl_cv_track| for those
performed during tracking (the only nontrivial example at present is
the conversion of velocities from the internal cartesian coordinates to
the external cylindrical system associated with a toroidally symmetric
geometry), |tl_cv_post| for conversions needed to prepare the
neutral particle number and velocity which are input to the post 
processing estimator, 
and |tl_cv_output| for the bulk
of the conversions done just before writing the output data.

Presently there are four ``actions'' performed by the conversions. Although
there are no a priori links between the action and the type of conversion, 
only certain combinations are used in practice; see |tallysetup.web| for 
specifics. The actions are: |tl_cv_scale| to scale a tally by a constant
specified as part of the conversion, |tl_cv_divide_number| to normalize a
tally by the number of test particles in a zone; 
|tl_cv_to_external_coords| and |tl_cv_to_internal_coords| do the
velocity conversions.  Note, however, that presently |tl_cv_divide_number|
does not work as intended for multiple source group runs; for this reason,
its use is not recommended.

\begin{description}
  \item[|tl_num|] Total number of distinct tallies in the problem.

  \item[|nconversions|] Total number of distinct conversions in the problem.

  \item[|tally_size|] The total size of the array holding all of the
tally data.

  \item[|tally_type_num[type_ind]|] Number of tallies of type |type_ind|.

  \item[|tally_type[tally_ind]|] Type of tally |tally_ind|.

  \item[|tally_geometry[tally_ind]|] Geometry of tally |tally_ind|: 

  \begin{enumerate}
    \item |tl_geom_volume| tallies compiled as a function of zone,

    \item |tl_geom_surface| |tl_type_sector| tallies,

    \item |tl_geom_detector| tallies computed for a member of the
detector class, 

    \item |tl_geom_global| globally integrated tallies (not yet implemented).
  \end{enumerate}

  \item[|tally_geometry_ptr[tally_ind]|] Points to the geometric group of
elements corresponding to tally |tally_ind|. This currently nontrivial only
for |tl_geom_surface| (points to a diagnostic group) and
|tl_geom_detector| (points to a detector group).

  \item[|tally_base[tally_ind]|] Pointer to the first datum for tally
|tally_ind| in the array holding all of the tally data.

  \item[|tally_type_base[type_ind]|] Pointer to the first datum of
type |type_ind| in the array holding all of the tally data. Note that
the tallies of each type are assumed to be consecutive in that array.

  \item[|tally_rank[tally_ind]|] Number of indepenedent variables
(dimensionality) of tally |tally_ind|.

  \item[|tally_dep_var_dim[tally_ind]|] Dimensionality of dependent variables
of tally |tally_ind|; presently either 1 (|tl_dep_var_scalar|) or 3
(|tl_dep_var_vector|).

  \item[|tally_indep_var[rank_ind,tally_ind]|] Integer index corresponding
to the |rank_ind|th independent variable for tally |tally_ind|. The list
of possible values is lengthy and probably will be subject to considerable
change; refer to |tally.hweb| for the current list (these are macros 
beginning with |tl_index|; they are matched with strings in 
subroutine |set_var_list|).

  \item[|tally_tab_index[rank_ind,tally_ind]|] Number of values of the
|rank_ind|th independent variable of tally |tally_ind|.

  \item[|tally_name[tally_ind]|] Descriptive name for tally |tally_ind|;
if the tally is for a vector quantity, the name {\em must} contain the
word ``vector''.

  \item[|tally_dep_var[tally_ind]|] Integer identifying the physical 
quantity being accumulated for tally |tally_ind|. This is set using
a string specified in the argument list to |define_tally| in |tallysetup|.
This string is searched for in the global list of dependent variables,
|pr_var0_list|, set in subroutine |init_var0_list|. The familiar examples are:

  \begin{enumerate}
    \item |mass_change| source of mass for a background or test species 
(denoted by the generic term ``problem species'') due to the current test 
species,

    \item |momentum_change_vector| source of vector momentum 
for a problem species due to the current test species,

    \item |energy_change| source of energy for a problem species
due to the current test species,

    \item |mass| mass of test species,

    \item |momentum_vector| momentum vector of the
test species,

    \item |energy| energy of the test species.
  \end{enumerate}
Or, it must be one of the other quantities appearing as reaction handling 
variables (reactiondata
class, |reaction_handling_var0|). The most
commonly used example are the H$_{\alpha}$ emission rates which
are named |emission_rate_h_alpha| where |h| = H, D, or T according
to the current test species.

  \item[|tally_est_test[est_ind,tally_ind]|] Multiplier on estimator
|est_ind| for tally |tally_ind|; makes sense only for tallies of 
|tl_type_test|.

  \item[|tally_est_reaction[reac_so,est_ind,tally_ind]|] Multiplier on 
estimator |est_ind| for tally |tally_ind| when scoring a reaction or
source. The index |reac_so| is a concatenated list of the problem
reactions (first) and the source types. Makes sense only for tallies of 
|tl_type_reaction|.

  \item[|tally_num_conversions[tally_ind]|] Number of conversions for tally
|tally_ind|; must be $\leq$ |tl_cv_max_conversions|.

  \item[|tally_cv_ptr[ptr_ind,tally_ind]|] The |ptr_ind|th
conversion for tally |tally_ind|.

  \item[|tally_cv_action[cv_ind]|] The action to be performed by conversion
|cv_ind|.

  \item[|tally_cv_type[cv_ind]|] Type of conversion |cv_ind|.

  \item[|tally_cv_num_partners[cv_ind]|] Number of tallies required
to carry out |cv_ind|, must be at least one and not more than 
|tl_cv_max_partners|. 

  \item[|tally_cv_scalers[scal_ind,cv_ind]|] List of scalers (constants)
|scal_ind| required to carry out |cv_ind|. There may be 0 to 
|tl_cv_max_scalers| for each conversion; the number is determined by
the action. 

  \item[|tally_cv_partner[part_ind,cv_ind]|] The |part_ind|th partner
in the list of partners for conversion |cv_ind|. The first partner
is always the tally being operated on by the conversion. Additional
(unmodified) tallies which are required to effect the conversion are
included as other ``partners''.
\end{description}

@ Routines for use with tallies.

\begin{description}
  \item[|tl_scoring_index(t,j,ip)|] Provides the integer index of the 
globally used compiled list of dependent variables, |scoring_data|, for
dimension |j| (|j| $<$ |tally_dep_var_dim[t]|) of tally |t|. |ip| is
intended to be the up-to-date |index_parameters| array which is 
currently used to access the background species index.
\end{description}

