% $Id: a835239d43721eeee2cc63f125a4b74e1aa0d3b4 $
\Title{pmitest}

@* A test program for the Plasma-Material Interaction (PMI) routines.

\ID{$Id: a835239d43721eeee2cc63f125a4b74e1aa0d3b4 $}

This program queries the user for a particular test particle and
PMI. It then asks for the incident energy and angle of the test
particle as well as a number of trials. The selected PMI is then
run for that number of trials. Various summary data are printed to
the screen, including averages over the trials. The results of
the individual trials are written to a file for possible external
analysis.

|pmitest| can be run once the problem netCDF file has been generated.
The geometry, background, and tally files are not required.

The code first asks for the symbol representing the test particle
and PMI to be considered. Only those test particles and 
PMI appearing in the current problem input file are available
for testing.
\begin{verbatim}
 Enter symbol for test particle and Plasma-Material Interaction
\end{verbatim}
The user might respond with
\begin{verbatim}
D D_refl_strim_Mo
\end{verbatim}
The code prints out the corresponding full names of these, as well
as the name of the associated material,
\begin{verbatim}
      Test species is: atomic deuterium
      Material is:     molybdenum
      PMI name is:     deuterium reflection (trim) on molybdenum
\end{verbatim}

The code then requests
\begin{verbatim}
Enter test energy, polar angle-of-incidence, and number of trials
\end{verbatim}
The user might specify
\begin{verbatim}
10. 5. 100
\end{verbatim}
The input energy is in eV. The angle-of-incidence is relative
to the normal to the surface (i.e., zero is a normally
incident particle) and is in degrees. The number of
trials is an integer $\geq$ 1.

The screen output begins with the internal parameters corresponding
to the input energy and angle:
\begin{verbatim}
     Test energy =     1.6021773300000D-18 J
     Test (vx,vy,vz) =     2697.8131504786,   0.,    -30836.145413047 m/s
     Incident polar angle =     8.7266462599716D-02 radians
\end{verbatim}
Note that the incident velocity is constrained to be in the $x$, $z$ plane
(without loss of generality).

Using these parameters, the code first computes the ``yield'' for the
PMI. E.g., for a reflection process the yield is just the reflection 
coefficient. During a DEGAS 2 run, the yield is the probability
of this process occurring during a collision of this test species with
this material. The remainder of the screen output will look like:
\begin{verbatim}
       => Yield =    0.65686515907191
 <E> =     6.5922781019467 eV, <cos(theta)> =    0.66748723243273, <cos(phi)> = 
    -1.0431528440643D-02, <sin(phi)> =     2.3997145268382D-02
  Number of products =   1
   Product #  1 is atomic deuterium                
      (vx,vy,vz) =     21166.989699732,    -11251.043196982,     11367.619046774
  m/s
      weight =     1.0000000000000
\end{verbatim}
The line after the yield contains 
averages over the product velocities (|pmitest|
currently assumes that there is only one product for the PMI). $\theta$ is
the polar
angle with zero corresponding to normal to the
surface. $\phi$ is the second angle; $\phi = 0$ is parallel to
the $x$ axis (i.e., specular reflection would always result in
$\phi = 0$). Most PMI are symmetric about $\phi = 0$ so that
$\langle \sin(\phi) \rangle \simeq 0$.
The last section contains the specific product information for the last 
trial executed.

If the number of trials is $< 5000$, the individual product velocities
for each trial are printed out to the file \verb+pmitest.out+,
\begin{verbatim}
    E (eV)        vx (m/s)         vy             vz
  4.20292E+00   -2.31656E+03    1.94155E+04    4.51347E+03
  4.48760E+00   -7.47107E+03    1.60200E+04    1.08407E+04
  2.98038E+00   -1.42524E+04   -2.35169E+03    8.76950E+03
\end{verbatim}
\vdots

For the curious, the limit of 5000 is determined by the largest number
of data points that can be comfortably loaded into the PC application
{\em KaleidaGraph}.

@m FILE 'pmitest.web'

@I macros.hweb
@I string.hweb
@I problem.hweb
@I random.hweb
@I pmi.hweb
@I pmidata.hweb
@I materials.hweb
@I reaction.hweb
@I species.hweb
@I pmiformat.hweb
@I mpi.hweb

@ The main program.
@m GET_DIST 1

@a
      program pmitest
      
      implicit_none_f77
      sp_common
      rc_common
      pr_common
      pm_common
      ma_common
      pd_common
      mp_common

      implicit_none_f90
      mp_decls
      character*LINELEN line                          // Local
      integer length,p,b,e
      rn_seed_decl(seed)
      integer i,nprod
      real velocity,energy,polar_angle,yield,ran
      real independent_parameters[pf_max_indep_params]
      integer j,j_max
      real eprod,cos_theta,sin_phi,cos_phi,e_avg,cos_th_avg,cos_phi_avg,
     $     sin_theta,sin_phi_avg
      
      pm_decl(pmi_ref)
      sp_decl(test_species)
      pr_test_decl(test)
      ma_decl(mat_ref)
      pr_pmi_decl(pmi_sub)
      pr_materials_decl(mat_sub)
      pr_pmi_decl(ts_pmi)
      vc_decl(v_test)
      rn_decl(tag)
      sp_decl(prod[pm_product_max])
      vc_decl(v_prod[pm_product_max])
      real w_prod[pm_product_max]

      external pd_eval_data                          // External
      real pd_eval_data

      st_decls
      rn_decls

@#if MPI
      mpi_init
@#endif
      call readfilenames
      call init_pmitest

/* Called routines need random number thread */
      call decimal_to_seed('12345678',seed)
      call random_init_d2(seed,rn_args(tag))  

      open(unit=diskout,file='pmitest.out',status='unknown')

loop: continue
      write(stdout,*) 'Enter symbol for test particle and Plasma-Material Interaction'

      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      test_species=sp_lookup(line(b:e))
      assert(next_token(line,b,e,p))
      pmi_ref=pm_lookup(line(b:e))
      if (!pm_check(pmi_ref)) then
         write(stdout,*) line(b:e),' is not a valid PMI; try again.'
         go to loop
      end if
      if (pm_gen(pmi_ref) == pmi_generic_yes) then
         if (sp_generic(test_species) != sp_generic(pm_reagent(pmi_ref))) then
            write(stdout,*) trim(sp_sy(test_species)),
     $           ' is not a reagent for PMI ',trim(pm_sy(pmi_ref)),
     $           '; try again.'
            go to loop
         end if
      else
         if (test_species != pm_reagent(pmi_ref)) then
            write(stdout,*) trim(sp_sy(test_species)),
     $           ' is not a reagent for PMI ',trim(pm_sy(pmi_ref)),
     $           '; try again.'
            go to loop
         end if
      end if
      test=pr_test_lookup(test_species)
      if (!pr_test_check(test)) then
         write(stdout,*) trim(sp_sy(test_species)),
     $        ' is not a valid test species; try again.'
         go to loop
      end if
      mat_ref=pm_materials(pmi_ref)
      mat_sub=problem_materials_sub(mat_ref)
      if (!pr_materials_check(mat_sub)) then
         write(stdout,*) trim(ma_sy(mat_ref)),
     $        ' is not in the list of materials for this problem; try again.'
         go to loop
      end if
      pmi_sub=problem_pmi_sub(pmi_ref)
      if (!pr_pmi_check(pmi_sub)) then
         write(stdout,*) trim(pm_sy(pmi_ref)),
     $        ' is not a PMI in this problem for test species ',
     $        trim(sp_sy(test_species)),'; try again.'
         go to loop
      end if
      ts_pmi=int_lookup(pmi_sub,pr_pm_cases(test,1),pr_pmi_max)
      
      write(stdout,*) '     Test species is: ',trim(sp_name(test_species))
      write(stdout,*) '     Material is:     ',trim(ma_name(mat_ref))
      write(stdout,*) '     PMI name is:     ',trim(pm_name(pmi_ref))

loop1: continue

      write(stdout,'(/a)') 'Enter test energy, polar angle-of-incidence, and number of trials'
      
      if (! read_string(stdin,line,length)) goto loop
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      energy=electron_charge*read_real(line(b:e))
      if (energy <= zero) then
         write(stdout,*) ' Test energy must be > 0; try again.'
         go to loop1
      end if
      assert(next_token(line,b,e,p))
      polar_angle=read_real(line(b:e))*PI/const(180.0)
      assert(next_token(line,b,e,p))
      j_max=read_integer(line(b:e))
      if (j_max < 1) j_max=1

      velocity=sqrt(two*energy/sp_m(test_species))
/* Pretend surface normal is in +z direction => can easily interpret
   product velocities. */
      vc_set(v_test,velocity*sin(polar_angle),zero,-velocity*cos(polar_angle))

      do i=1,pf_max_indep_params
         independent_parameters[i]=zero
      end do
      independent_parameters[pf_var_energy_in]=energy
      independent_parameters[pf_var_vel_1_in]=v_test[1]
      independent_parameters[pf_var_vel_2_in]=v_test[2]
      independent_parameters[pf_var_vel_3_in]=v_test[3]
      independent_parameters[pf_var_polar_angle_in]=polar_angle
      independent_parameters[pf_var_cos_polar_angle_in]=cos(polar_angle)
      independent_parameters[pf_var_t_wall]=const(3.,2)*boltzmanns_const // INPUT !!
      if (pmi_yield_num_rand[pmi_sub] > 0) then
         assert(pmi_yield_num_rand[pmi_sub] <= pf_max_random)
         do i=1,pmi_yield_num_rand[pmi_sub]
            rn_next(ran,tag)
            independent_parameters[pf_var_1st_random_number+i-1]=ran
         end do
      end if

      yield=pd_eval_data(pd_data_args(pmi_yield,[pmi_sub]),
     $     independent_parameters,rn_args(tag))

      write(stdout,*) '    Test energy = ',energy,' J'
      write(stdout,*) '    Test (vx,vy,vz) = ',v_test[1],', ',v_test[2],', ',v_test[3],
     $                     ' m/s'
      write(stdout,*) '    Incident polar angle = ',polar_angle,' radians'
      write(stdout,*) '      => Yield = ',yield

/* 
   Determine PMI products 
*/

      e_avg=zero
      cos_th_avg=zero
      cos_phi_avg=zero
      sin_phi_avg=zero

      do j=1,j_max
         if (pmi_handling_num_rand[pmi_sub] > 0) then
            assert(pmi_handling_num_rand[pmi_sub] <= pf_max_random)
            do i=1,pmi_handling_num_rand[pmi_sub]
               rn_next(ran,tag) 
               independent_parameters[pf_var_1st_random_number+i-1]=ran
            end do
         end if

         if (pm_pmi_type(pmi_ref) == 'reflection') then
            call reflection(pr_test_args(test),pr_pmi_args(ts_pmi),
     $           independent_parameters,
     $           nprod,sp_args(prod),vc_args(v_prod[1]),
     $           w_prod,rn_args(tag))
         else if (pm_pmi_type(pmi_ref) == 'adsorption') then
            call adsorption(pr_test_args(test),pr_pmi_args(ts_pmi),
     $           independent_parameters,
     $           nprod,sp_args(prod),vc_args(v_prod[1]),
     $           w_prod,rn_args(tag))
         else if (pm_pmi_type(pmi_ref) == 'desorption') then
            call desorption(pr_test_args(test),pr_pmi_args(ts_pmi),
     $           independent_parameters,
     $           nprod,sp_args(prod),vc_args(v_prod[1]),
     $           w_prod,rn_args(tag))
         else
            assert('Unsupported PMI type' == ' ')
         end if

/*   
   For accumulating distributions. Assumes a single product
*/
         if (j_max > 1) then
            assert(nprod == 1)
            eprod=half*sp_m(prod[1])*vc_abs2(v_prod[1])
            if (vc_abs(v_prod[1]) > zero) then
               cos_theta=v_prod[1][3]/vc_abs(v_prod[1])
            else
               cos_theta=zero
            end if
            sin_theta=sqrt(one-cos_theta**2)
            if (sin_theta > zero) then
               cos_phi=v_prod[1][1]/(sin_theta*vc_abs(v_prod[1]))
               sin_phi=v_prod[1][2]/(sin_theta*vc_abs(v_prod[1]))
            end if
            e_avg+=eprod
            cos_th_avg+=cos_theta
            cos_phi_avg+=cos_phi
            sin_phi_avg+=sin_phi
            if (j_max < 5000) then   // Avoid HUGE files 
               if (j == 1) then
                  write(diskout,'(4x,a,8x,a,9x,a,13x,a)') 'E (eV)',
     $                 'vx (m/s)','vy','vz'
               end if
               write(diskout,'(1p,4(e13.5,2x))') eprod/electron_charge,
     $              v_prod[1][1],v_prod[1][2],v_prod[1][3]
            end if
         end if
      end do

      if (j_max > 1) then
         e_avg/=(electron_charge*j_max)
         cos_th_avg/=j_max
         cos_phi_avg/=j_max
         sin_phi_avg/=j_max
         write(stdout,*) '<E> = ',e_avg,' eV, <cos(theta)> = ',cos_th_avg,
     $        ', <cos(phi)> = ',cos_phi_avg,', <sin(phi)> = ',sin_phi_avg
      end if

      write(stdout,*) ' Number of products = ',nprod
      do i=1,nprod
         write(stdout,*) '  Product #',i,' is ',sp_name(prod[i])
         write(stdout,*) '     (vx,vy,vz) = ',v_prod[i][1],', ',v_prod[i][2],
     $                   ', ',v_prod[i][3],' m/s'
         write(stdout,*) '     weight = ',w_prod[i]
      end do

      goto loop1


eof:  continue

@#if MPI
      mpi_end
@#endif
      stop
      end
      @<Functions and Subroutines@>

@* Initialize.

@<Functions...@>=
      subroutine init_pmitest
      implicit_none_f77
      implicit_none_f90
      
      call nc_read_elements
      call nc_read_species
      call nc_read_materials
      call nc_read_pmi
      call nc_read_problem
      
      return
      end

@* INDEX.
      
