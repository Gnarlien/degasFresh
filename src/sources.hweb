@* Source definitions.

% $Id: 019d04be6127bf3d9abf167fd7a56778de642e58 $

\ID{$Id: 019d04be6127bf3d9abf167fd7a56778de642e58 $}

@I random.hweb

@ Specification of the sources.  At present only surface and volume
sources are handled.

@f so_decl integer

@m so_args(x) x

@m so_dummy(x) x

@m so_decl(x) integer x @;

@m so_copy(x,y) y=x @;

@m so_check(x) (x > 0 && x <= so_grps)

@m so_seg_check(x) (x > 0 && x <= so_seg_tot)

@m so_base(i)     source_base_ptr[i]
@m so_nseg(i)     source_num_segments[i]
@m so_type(i)     source_type[i]
@m so_geom(i)     source_geometry[i]
@m so_nflights(i) source_num_flights[i]
@m so_chkpt(i)    source_num_checkpoints[i]
@m so_species(i)  source_species[i]
@m so_root_sp(i)  source_root_species[i]
@m so_t_varn(i)   source_time_variation[i]
@m so_tot_curr(i) source_total_current[i]
@m so_wt_norm(i)  source_weight_norm[i]
@m so_scale(i)    source_scale_factor[i]
@m so_name(i)     source_name[i]

@m so_plate 1                 // Source types
@m so_puff 2
@m so_recomb 3
@m so_vol_source 4
@m so_snapshot 5
@m so_plt_e_bins 6
@m so_type_num 6
@m so_name_len 10

@m so_point 0                  // Source geometries
@m so_line 1
@m so_surface 2
@m so_volume 3

@m so_random 0                 // Source sampling schemes
@m so_direct 1

@m so_delta_fn 0               // Source time variation
@m so_time_uniform 1

@m so_e_bins_spacing_unknown 0 // Spacing option for energy distributions
@m so_e_bins_spacing_linear 1
@m so_e_bins_spacing_log 2
@m so_e_bins_num_max 15         // Maximum number of energy bins (for dimensions)
 
@m so_gparam_unknown 0          // Labels for global source parameters
@m so_gparam_puff_temp 1
@m so_gparam_puff_exponent 2
@m so_gparam_e_bins_min 3       // |e_bins|: source energy distribution in bins
@m so_gparam_e_bins_delta 4

@m so_giparam_e_bins_num 1
@m so_giparam_e_bins_spacing 2

@m so_param_unknown 0           // Labels for segment source parameters
@m so_param_v1 1                // Volume source
@m so_param_v2 2
@m so_param_v3 3
@m so_param_temperature 4
@m so_param_e_ion_delta 5       // Sheath (development purposes only for now)
@m so_param_e_ion_mult 6
@m so_param_e_ion_sheath 7
@m so_param_pt_t 8              // For snapshot source
@m so_param_pt_v1 9
@m so_param_pt_v2 10
@m so_param_pt_v3 11
@m so_param_lc_x1 12
@m so_param_lc_x2 13
@m so_param_lc_x3 14
@m so_param_e_bin_prob 15       // Source energy distribution probabilities

@m so_iparam_pt_sp 1            // Other snapshot integer data
@m so_iparam_pt_test 2          // meaningless for source particles.
@m so_iparam_lc_cell 3
@m so_iparam_lc_zone 4
@m so_iparam_pt_type 5
@m so_iparam_pt_author 6

@m so_gparams_list(i,g) source_gparameters_list[source_gparameters_base[g]+i]
@m so_gparams_data(i,g) source_gparameters_data[source_gparameters_base[g]+i]

@m so_params_list(i,g) source_parameters_list[source_parameters_base[g]+i]
/*
   Note that |s| here is the total segment index so that |so_base(g)|
   must be subtracted by the macro.
*/
@m so_params_data(i,s,g) source_parameters_data[source_parameters_data_base[g]+(s-so_base(g))*source_num_parameters[g]+i]

@m so_giparams_list(i,g) source_giparameters_list[source_giparameters_base[g]+i]
@m so_giparams_data(i,g) source_giparameters_data[source_giparameters_base[g]+i]

@m so_iparams_list(i,g) source_iparameters_list[source_iparameters_base[g]+i]
@m so_iparams_data(i,s,g) source_iparameters_data[source_iparameters_data_base[g]+(s-so_base(g))*source_num_iparameters[g]+i]

@m so_direct_mult half*(sqrt(const(5.))-one)

@ Standard initialization statements. These should eventually be in
a ``run control'' dialog along with the number of flights, etc.

@m so_set_run_flags so_restart=FALSE;
      so_seed_decimal='12';
      so_spaced_seeds=FALSE;
      so_seed_spacing=100000000;
      so_sampling=so_random;
      so_time_dependent=FALSE;
      so_time_initialization=FALSE;
      so_time_initial=const(0.0);
      so_time_final=const(0.0);
      so_name(so_plate)='plate';
      so_name(so_puff)='puff';
      so_name(so_recomb)='recomb';
      so_name(so_vol_source)='vol_source';
      so_name(so_snapshot)='snapshot';
      so_name(so_plt_e_bins)='plt_e_bins';
      so_rel_wt_min=const(5.,-1);
      so_rel_wt_max=const(2.);
      so_wt_norm_min=const(5.,-1);
      so_wt_norm_max=const(2.) @;

@ Definition of the common blocks.

@a
      package_init(so)

      define_var_pk(so,so_grps,INT)
      define_var_pk(so,so_seg_tot,INT)
      define_var_pk(so,so_restart,INT)
      define_var_pk(so,so_spaced_seeds,INT)
      define_var_pk(so,so_seed_spacing,INT)
      define_var_pk(so,so_sampling,INT)
      define_var_pk(so,so_time_dependent,INT)
      define_var_pk(so,so_time_initialization,INT)
      define_var_pk(so,so_time_initial,FLOAT)
      define_var_pk(so,so_time_final,FLOAT)
      define_var_pk(so,so_rel_wt_min,FLOAT)
      define_var_pk(so,so_rel_wt_max,FLOAT)
      define_var_pk(so,so_wt_norm_min,FLOAT)
      define_var_pk(so,so_wt_norm_max,FLOAT)

      define_var_pk(so,so_gparams_list_size,INT)
      define_var_pk(so,so_gparams_list_dim,INT)
      define_var_pk(so,so_params_list_size,INT)
      define_var_pk(so,so_params_list_dim,INT)
      define_var_pk(so,so_params_data_size,INT)
      define_var_pk(so,so_params_data_dim,INT)
      define_var_pk(so,so_giparams_list_size,INT)
      define_var_pk(so,so_giparams_list_dim,INT)
      define_var_pk(so,so_iparams_list_size,INT)
      define_var_pk(so,so_iparams_list_dim,INT)
      define_var_pk(so,so_iparams_data_size,INT)
      define_var_pk(so,so_iparams_data_dim,INT)

      define_dimen_pk(so,source_grp_ind,so_grps)
      define_dimen_pk(so,source_seg_ind,so_seg_tot)
      define_dimen_pk(so,so_seed_decimal_ind,ran_c)
      define_dimen_pk(so,so_name_ind,so_name_len)
      define_dimen_pk(so,so_type_ind,so_type_num)
      define_dimen_pk(so,source_gparams_ind,so_gparams_list_dim)
      define_dimen_pk(so,source_params_ind,so_params_list_dim)
      define_dimen_pk(so,source_params_data_ind,so_params_data_dim)
      define_dimen_pk(so,source_giparams_ind,so_giparams_list_dim)
      define_dimen_pk(so,source_iparams_ind,so_iparams_list_dim)
      define_dimen_pk(so,source_iparams_data_ind,so_iparams_data_dim)

      define_var_pk(so,so_seed_decimal,CHAR,so_seed_decimal_ind)
      define_var_pk(so,source_name,CHAR,so_name_ind,so_type_ind)

      define_varp_pk(so,source_base_ptr,INT,source_grp_ind)
      define_varp_pk(so,source_num_segments,INT,source_grp_ind)
      define_varp_pk(so,source_type,INT,source_grp_ind)
      define_varp_pk(so,source_geometry,INT,source_grp_ind)
      define_varp_pk(so,source_num_flights,INT,source_grp_ind)
      define_varp_pk(so,source_num_checkpoints,INT,source_grp_ind)
      define_varp_pk(so,source_species,INT,source_grp_ind)
      define_varp_pk(so,source_root_species,INT,source_grp_ind)
      define_varp_pk(so,source_time_variation,INT,source_grp_ind)
      
      define_varp_pk(so,source_num_gparameters,INT,source_grp_ind)
      define_varp_pk(so,source_num_parameters,INT,source_grp_ind)
      define_varp_pk(so,source_gparameters_list,INT,source_gparams_ind)
      define_varp_pk(so,source_parameters_list,INT,source_params_ind)
      define_varp_pk(so,source_gparameters_base,INT,source_grp_ind)
      define_varp_pk(so,source_parameters_base,INT,source_grp_ind)
      define_varp_pk(so,source_parameters_data_base,INT,source_grp_ind)
      define_varp_pk(so,source_gparameters_data,FLOAT,source_gparams_ind)
      define_varp_pk(so,source_parameters_data,FLOAT,source_params_data_ind)
      define_varp_pk(so,source_num_giparameters,INT,source_grp_ind)
      define_varp_pk(so,source_num_iparameters,INT,source_grp_ind)
      define_varp_pk(so,source_giparameters_list,INT,source_giparams_ind)
      define_varp_pk(so,source_iparameters_list,INT,source_iparams_ind)
      define_varp_pk(so,source_giparameters_base,INT,source_grp_ind)
      define_varp_pk(so,source_iparameters_base,INT,source_grp_ind)
      define_varp_pk(so,source_iparameters_data_base,INT,source_grp_ind)
      define_varp_pk(so,source_giparameters_data,INT,source_giparams_ind)
      define_varp_pk(so,source_iparameters_data,INT,source_iparams_data_ind)

      define_varp_pk(so,source_total_current,FLOAT,source_grp_ind)
      define_varp_pk(so,source_weight_norm,FLOAT,source_grp_ind)
      define_varp_pk(so,source_scale_factor,FLOAT,source_grp_ind)

      define_varp_pk(so,source_segment_ptr,INT,source_seg_ind)
      define_varp_pk(so,source_current,FLOAT,source_seg_ind)
      define_varp_pk(so,source_segment_rel_wt,FLOAT,source_seg_ind)
      define_varp_pk(so,source_segment_prob_alias,FLOAT,source_seg_ind)
      define_varp_pk(so,source_segment_ptr_alias,INT,source_seg_ind)
      define_varlocal_pk(so,so_direct_delta,FLOAT)

      package_end(so)

@* Source class attribute descriptions.

@ Define properties of sources. Prefix is |so|. 

Individual source elements or ``segments''
are sorted into source ``groups''. Surface source groups may be aligned with
the sector strata, if desired, for external labeling purposes.
Both the source group and
segment are represented by integer variables. The segment
is a general concept meant to account for all possible source geometries.
For example, axisymmetric surface and volume sources are presently
treated. The segments in this case represent sectors and zones, respectively.
All segments in a group are assumed to have the same type, geometry,
and species.

Segment-specific data are stored in single 1-D arrays with the beginning
of the portion corresponding to a particular group denoted by the 
|so_base(igroup)| array.

A number of run control type variables and switches have been collected
into this file, starting with the number of flights which sensibly belongs
here. These may eventually be moved elsewhere or be assigned nontrivial
values as part of a run setup procedure executed just prior to the running
of the main DEGAS 2 code, |flighttest|.

\begin{description}
  \item[|so_base(igroup)|] Pointer in arrays defined over all
segments at which the segments of group |igroup| begin.

  \item[|so_nseg(igroup)|] Number of segments in group |igroup|.

  \item[|so_type(igroup)|] Physical process associated with group |igroup|. 
Presently treat plate (recycling), gas puff, recombination, volume
(|vol_source|, a specified volumetric source distinct from recombination), 
snapshot, and plate with binned energy distribution (|plt_e_bins|, another 
approach to specifying a recycling source).  Additional 
miscellaneous source parameters (with names containing |e_bins|)
specify the energy distribution used in sampling the |plt_e_bins|
source. A recombination source will be 
set up automatically by
the code when a recombining reaction is present in the problem
specification.    Likewise, a snapshot source is set up automatically
in time dependent runs when a |snapshotfile| netCDF file is present
from a previous time step.

  \item[|so_geom(igroup)|] Geometry of group |igroup|. Presently treat
axisymmetric surface and volume sources. Although in general the geometry
should be independent of the source type, practically we expect plate and
puff sources to have surface geometry.  Both recombination and volume
sources are sampled randomly throughout the volume (according to
source strength).  Snapshot sources are effectively volumetric, but
the source locations are determined by the particles stored in and
sampled from the data in the |snapshotfile|.

  \item[|so_nflights(igroup)|] Number of flights to be used for group 
|igroup| during the run. These may be set independently of the source
current for each group. The variance
in the observable parameters of interest due to a particular group 
should also be used to choose the number of flights.

  \item[|so_chkpt(igroup)|] Number of checkpoints which should be written
out for group |igroup|. A value of 0 will result in no checkpoint files.

  \item[|so_species(igroup)|] Species index (species class) of group
|igroup|.

  \item[|so_root_sp(igroup)|] Root species that gives rise to the actual
species sourced. In the cases of plate and recombination (and, perhaps,
puff) sources, this is a background species providing the distribution
function for the source.

  \item[|so_time_varn(igroup)|] Specifies the time variation of group
|igroup| in a time dependent simulation.  The currently supported values
are |so_delta_fn| (all flights start at |so_time_initial|; this is the 
default) and |so_time_uniform| (the initial time for flight is uniformly 
sampled between |so_time_initial| and |so_time_final|).

  \item[|so_tot_curr(igroup)|] Total current (particles per second) of all
segments in group |igroup|.

  \item[|so_wt_norm(igroup)|] Factor used to renomormalize the total
weight flown for group |igroup| to adjust for nonunity values of
|source_segment_rel_wt|.

  \item[|so_scale(igroup)|] Arbitrary scaling factor for the total current
of group |igroup|. Setting this to a value $\neq 1$ has the same impact
as rescaling all of the segment currents by this factor. This provides
additional flexibility for combining source groups since it can be applied
after the run has been completed.

\end{description}

@ Internal variables in the sources class.

\begin{description}
  \item[|so_grps|] Number of source groups in the problem.

  \item[|so_seg_tot|] Total number of source segments in the problem.

  \item[|source_segment_ptr[iseg]|] Integer pointer to the geometry element
corresponding to segment |iseg|. 

  \item[|source_current[iseg]|] Current (in particles per second) associated
with segment |iseg|.

  \item[|source_segment_rel_wt[iseg]|] Arbitrary multiplier on the weight
of flights launched from segment |iseg|. Nonunity values allow for 
importance sampling of the source segments.
Biasing of the results is eliminated by dividing 
the probability for selecting |iseg| by this factor. The factor |so_wt_norm| 
is also required for this purpose.

  \item[|source_segment_prob_alias[iseg]|] ``Probability alias'' for segment
|iseg|. In sampling from this source group, a random number is compared 
with entries in this array. For further explanation see the routines
|sample_sources| and |set_prob_alias|. This is computed as part of the
setup process from the source current distribution.  An alternative,
more basic sampling procedure is available for large source groups
(e.g., a snapshot source).
When that procedure is to be used, this array will contain the cumulative
probability distribution.

  \item[|source_segment_ptr_alias[iseg]|] ``Pointer alias'' for segment 
|iseg|. Used in sampling from this source group. A random number is
compared with |source_segment_prob_alias|. This leads either directly
to an entry in |source_segment_ptr| or to an entry in this array which
serves as an indirect pointer to the same set of geometry elements.
For further explanation see the routines
|sample_sources| and |set_prob_alias|. This is computed as part of the
setup process from the source current distribution.  An alternative,
more basic sampling procedure is available for large source groups.
When that procedure is to be used, all elements of this array will
be |int_unused|.

  \item[|so_name(itype)|] Name of each of the source types stored as
a string for output purposes.
\end{description}

@ Run control parameters. 

The macro |so_set_run_flags| assigns all of these
at once to the values noted above. The macro is presently invoked in
|boxgen.web| and |readbackground.web| (twice). Again, these parameters
may eventually be relocated and / or reset elsewhere.

\begin{description}
  \item[|so_restart|] If |FALSE|, the code will start a new run. If |TRUE|, the
code will read an existing output file and add to the data contained therein.

  \item[|so_seed_decimal|] Character variable containing the decimal 
representation of the random number seed. 

  \item[|so_spaced_seeds|] If |FALSE|, the random number seed will be 
advanced continuously between source groups (i.e., the original mode
of operation for the code). If |TRUE|, the initial seed will be incremented
|so_seed_spacing| for each subsequent source group.

  \item[|so_seed_spacing|] The number of ``flights'' between the initial
seeds for each source group in the case of |so_spaced_seeds| = |TRUE|.
The code will check that this number is greater than the number of flights,
preventing possible reuse of a portion of the random number sequence.

  \item[|so_sampling|] Specifies the scheme used to sample the initial
source segment for a flight. The usual, random, Monte Carlo approach is
selected by |so_random|. The scheme selected by |so_direct| flight
number to directly generate an irrational number between 0 and 1 which
is then used in the usual fashion in extracting a segment number from
the ``probability alias'' arrays.

  \item[|so_time_dependent|] Is usually left at the default |FALSE| 
value, representing a steady state or time independent simulation.
When |TRUE|, the value of |so_time_final| must be set to something
larger than |so_time_initial|, determining the time interval (as
experienced by the flights) over which the flights will be followed.

  \item[|so_time_initialization|] Is usually left at the default
|FALSE| and has no effect if the time dependent parameters are not set.
If |TRUE|, flights are tracked much as in a steady state run, but
are stopped after each time interval |so_time_final| - 
|so_time_initial| so that a marker can be added to the snapshot
distribution.  The end result is a snapshot distribution of 
particles that can serve as the initial state for a fully
time dependent run.

  \item[|so_time_initial|] For a time dependent simulation, the smallest
initial time (in seconds) that can be assigned to a flight.  E.g., for a time
independent source, the initial time will be randomly sampled between
|so_time_initial| and |so_time_final|.

  \item[|so_time_final|] For a time dependent simulation, the largest
initial time (in seconds) that can be assigned to a flight.  E.g., for a time
independent source, the initial time will be randomly sampled between
|so_time_initial| and |so_time_final|.  More importantly, all flights
will be stopped when their time reaches this value, provided they have
not been already terminated due to ionization, absorption, etc.

  \item[|so_rel_wt_min|] For iterations with a coupled plasma code only,
places a lower bound on the ratio of the updated current in a source segment
to the ``old'' current last used to set the source sampling (probability
alias) arrays. Smaller values of the ratio will cause the source sampling
arrays to be updated. The test is applied separately to each group.

  \item[|so_rel_wt_max|] For iterations with a coupled plasma code only,
places an upper bound on the ratio of the updated current in a source segment
to the ``old'' current last used to set the source sampling (probability
alias) arrays. Larger values of the ratio will cause the source sampling
arrays to be updated. The test is applied separately to each group.

  \item[|so_wt_norm_min|] For iterations with a coupled plasma code only,
places a lower bound on the |so_wt_norm| for a source group (providing
an essentially global check on |source_segment_rel_wt|).
Smaller values of |so_wt_norm| will cause the source sampling
arrays to be updated. 

  \item[|so_wt_norm_max|] For iterations with a coupled plasma code only,
places an upper bound on the |so_wt_norm| for a source group (providing
an essentially global check on |source_segment_rel_wt|).
Larger values of |so_wt_norm| will cause the source sampling
arrays to be updated. 
\end{description}

@ Parameters and arrays associated with miscellaneous source parameters.

The need for these parameters arises from the fact that the set of
parameters required to specify a source group varies considerably
with the type of source.  In fact, even the number of parameters
can vary dramatically, going from $\sim 2$ for a gas puff to 
$> 10$ for a snapshot source.  The miscellaneous source parameters
provide an extensible framework for specifying just about any
conceivable source type.

These parameters are broken down into four categories, each distinguished
by a different ``root'' phrase that appears in each of the constituent
variables used to specify and store the parameters.  Namely:
\begin{description}
  \item[|giparams| or |giparameters|] Global, integer parameters. These 
are ``global'' in that they are same for all segments of a particular
source group.  
  \item[|gparams| or |gparameters|] Global, floating parameters. Again,
these are the same for all segments of a particular source group.
  \item[|iparams| or |iparameters|] Integer parameters that vary with
each segment of a particular source group.
  \item[|params| or |parameters|] Floating parameters that vary with
each segment of a particular source group.
\end{description}
For each of these four there is an associated |num| variable that specifies
the number of parameters of each source type that are needed for each
source group; this may very well be zero.  Then, there is a 2-D |list| 
variable that keeps track of what these parameters are.  
The entries in these lists are integers that are associated
with specific physical or computational quantities via the 
macro values at the top of this file.  The range
of the first index of the |list| 
is governed by |num|; the second index is the source
group.  As is the case with all of the multi-dimensional variables,
the |list| is actually stored as a 1-D array and accessed with a 2-D
macro (defined above).  The length being used for this array
is specified by the |list_size| variable (a scalar).  There is an
indepdendent dimension, |list_dim|, which is needed so that the
arrays can be made non-trivial for output to the netCDF files even
if the |list_size| is zero.  The initial entry in the 1-D list array for
each source group is contained in the |base| array.

The actual values of the parameters are similarly specified in 1-D
arrays containing the word |data|.  These are accessed via 2-D (for
``global'' parameters) or 3-D macros (for segment-varying parameters)
in a similar manner.  In fact, the indexing required for the global
parameters uses same |base| array since the parameter value, like 
its identifier, is a scalar.  For the segment-varying parameters,
the corresponding quantities are the |data_base| arrays.  Likewise, 
the length of the data arrays being used is |data_size| and the
actual dimension, |data_dim|.

Here is the full list of the miscellaneous source parameter variables
and applicable macro interfaces:
\begin{description}
  \item[|so_gparams_list_size|] Number of entries in the list of global
parameters.
  \item[|so_gparams_list_dim|] The dimension corresponding to 
|so_gparams_list_size|.  Need a separate variable to allow the arrays
to be nontrivial (for the sake of netCDF) when |so_gparams_list_size| = 0.
  \item[|so_params_list_size|] Number of entries in the list of segment
based parameters.
  \item[|so_params_list_dim|] The dimension corresponding to 
|so_params_list_size|.  Need a separate variable to allow the arrays
to be nontrivial (for the sake of netCDF) when |so_params_list_size| = 0.
  \item[|so_params_data_size|] Number of entries in the full set of
segment based parameter data.
  \item[|so_params_data_dim|] The dimension corresponding to 
|so_params_data_size|.  Need a separate variable to allow the arrays
to be nontrivial (for the sake of netCDF) when |so_params_data_size| = 0.
  \item[|so_giparams_list_size|] Number of entries in the list of integer
global parameters.
  \item[|so_giparams_list_dim|] The dimension corresponding to 
|so_giparams_list_size|.  Need a separate variable to allow the arrays
to be nontrivial (for the sake of netCDF) when |so_giparams_list_size| = 0.
  \item[|so_iparams_list_size|] Number of entries in the list of integer
segment based parameters.
  \item[|so_iparams_list_dim|] The dimension corresponding to 
|so_iparams_list_size|.  Need a separate variable to allow the arrays
to be nontrivial (for the sake of netCDF) when |so_iparams_list_size| = 0.
  \item[|so_iparams_data_size|] Number of entries in the full set of
integer segment based parameter data.
  \item[|so_iparams_data_dim|] The dimension corresponding to 
|so_iparams_data_size|.  Need a separate variable to allow the arrays
to be nontrivial (for the sake of netCDF) when |so_iparams_data_size| = 0.
  \item[|source_num_gparameters[igroup]|] Number of global,
miscellaneous parameters associated with source group |igroup|.
  \item[|source_num_parameters[igroup]|] Number of segment based,
miscellaneous parameters associated with source group |igroup|.
  \item[|so_gparams_list(iparam,igroup)|] Identity 
(e.g., |so_gparam_puff_temp|) of miscellaneous global parameter |iparam|
for source group |igroup|.
  \item[|so_gparams_data(iparam,igroup)|] Real value of miscellaneous global 
parameter |iparam| for source group |igroup|.
  \item[|so_params_list(iparam,igroup)|] Identity 
(e.g., |so_param_temperature|) of miscellaneous segment based 
parameter |iparam| for source group |igroup|.
  \item[|so_params_data(iparam,iseg,igroup)|] Real value of miscellaneous 
segment based parameter |iparam| for source group |igroup| at total segment
|iseg| (i.e., $1 \leq$ |iseg| $\leq$ |so_seg_tot|).
  \item[|source_giparameters_base[igroup]|] Pointer to the starting point
in the |source_giparameters_list| and |source_giparameters_data| arrays
for source group |igroup|.
  \item[|source_iparameters_base[igroup]|] Pointer to the starting point
in the |source_iparameters_list| for source group |igroup|.
  \item[|source_iparameters_data_base[igroup]|] Pointer to the starting point
in the |source_iparameters_data| for source group |igroup|.
  \item[|source_num_giparameters[igroup]|] Number of integer, global,
miscellaneous parameters associated with source group |igroup|.
  \item[|source_num_iparameters[igroup]|] Number of integer, segment based,
miscellaneous parameters associated with source group |igroup|.
  \item[|so_giparams_list(iparam,igroup)|] Identity of miscellaneous integer,
global parameter |iparam| for source group |igroup|.
  \item[|so_giparams_data(iparam,igroup)|] Real value of miscellaneous, 
integer, global parameter |iparam| for source group |igroup|.
  \item[|so_iparams_list(iparam,igroup)|] Identity of miscellaneous, 
integer, segment based parameter |iparam| for source group |igroup|.
  \item[|so_iparams_data(iparam,iseg,igroup)|] Real value of miscellaneous, 
integer, segment based parameter |iparam| for source group |igroup| at 
total segment |iseg|  (i.e., $1 \leq$ |iseg| $\leq$ |so_seg_tot|).
  \item[|source_giparameters_base[igroup]|] Pointer to the starting point
in the |source_giparameters_list| and |source_giparameters_data| arrays
for source group |igroup|.
  \item[|source_iparameters_base[igroup]|] Pointer to the starting point
in the |source_iparameters_list| for source group |igroup|.
  \item[|source_iparameters_data_base[igroup]|] Pointer to the starting point
in the |source_iparameters_data| for source group |igroup|.
\end{description}
  





