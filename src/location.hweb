@* Location definitions.

% $Id: 35678ba30de93ac1cad8304e0ec5e47791c11b1d $

\ID{$Id: 35678ba30de93ac1cad8304e0ec5e47791c11b1d $}

A location is identified by a string tag.

@f lc_decl integer
@f lc_decls integer

@m lc_args(x) lc_x(x)[1],lc_cell(x),lc_zone(x),
      lc_face(x),lc_cell_next(x),lc_zone_next(x),
      lc_sector(x),lc_sector_next(x)

@m lc_dummy(x) lc_x(x),lc_cell(x),lc_zone(x),
      lc_face(x),lc_cell_next(x),lc_zone_next(x),
      lc_sector(x),lc_sector_next(x)

@m lc_decl(x) real lc_x(x)[3]; integer lc_cell(x),lc_zone(x),
      lc_face(x),lc_cell_next(x),lc_zone_next(x),
      lc_sector(x),lc_sector_next(x) @;

@m lc_decls external locate_point,check_location;
      integer locate_point;
      logical check_location @;

@m lc_copy(x,y) vc_copy(lc_x(x),lc_x(y));
      lc_cell(y)=lc_cell(x);
      lc_zone(y)=lc_zone(x);
      lc_face(y)=lc_face(x);
      lc_cell_next(y)=lc_cell_next(x);
      lc_zone_next(y)=lc_zone_next(x);
      lc_sector(y)=lc_sector(x);
      lc_sector_next(y)=lc_sector_next(x) @;

@m lc_check(x) check_location(lc_args(x))

@m lc_x(x) lc_x1(x)
@m lc_x1(x) pos_##x
@m lc_cell(x) lc_cell1(x)
@m lc_cell1(x) cell_##x
@m lc_zone(x) lc_zone1(x)
@m lc_zone1(x) zone_##x
@m lc_face(x) lc_face1(x)
@m lc_face1(x) surface_##x
@m lc_cell_next(x) lc_cell_next1(x)
@m lc_cell_next1(x) cell_next_##x
@m lc_zone_next(x) lc_zone_next1(x)
@m lc_zone_next1(x) zone_next_##x
@m lc_sector(x) lc_sector1(x)
@m lc_sector1(x) sector_##x
@m lc_sector_next(x) lc_sector_next1(x)
@m lc_sector_next1(x) sector_next_##x

@ Some interface routines

@m lc_set(x) lc_cell(x)=locate_point(lc_x(x),lc_zone(x));
      lc_face(x)=0 @;

@m lc_set_a(x) lc_set(x);lc_cell_next(x)=0;lc_zone_next(x)=0;lc_sector(x)=0;lc_sector_next(x)=0 @;

@ This one only sets the zone number and is used to speed up post processing scores.

@m lc_set_b(x,z) lc_zone(x)=z;lc_zone_next(x)=0;lc_cell(x)=0;lc_cell_next(x)=0;lc_sector(x)=0;lc_sector_next(x)=0;lc_face(x)=0 @;

@m lc_thru_face(x) if (lc_face(x) != 0) then;
      lc_face(x) = 0;
      lc_cell(x) = lc_cell_next(x);
      lc_zone(x) = lc_zone_next(x);
      lc_sector(x) = lc_sector_next(x);
      end if @;

@ Some constants for the geometry package.

@m geom_epsilon const(1.0,-8) // A small distance $10\,\mathrm{nm}$.
@m geom_infinity const(1.0,16) // A large distance---about a light year.  Also a long time---about a billion years.
@m geom_large const(1000.0) // A largish (non-infinite) distance $1\,\mathrm{km}$.
@m epsilon_angle const(1.0,-10) // A small angle.

@* Location class attribute descriptions.

@ Define a location.  Prefix is |lc|.  

The identifier |location| is a
string tag.

\begin{description}
  \item[|lc_x(location)|] Is the position.
  \item[|lc_cell(location)|] Is the cell number.
  \item[|lc_zone(location)|] Is the zone number.
  \item[|lc_face(location)|] Is the face of the cell if at a face (else 0).
  \item[|lc_cell_next(location)|] Is the next cell number.
  \item[|lc_zone_next(location)|] Is the next zone number.
  \item[|lc_sector(location)|] Is the present sector number if at a sector; 
else 0.
  \item[|lc_sector_next(location)|] If at or just past a sector adjacent to a 
second sector, contains the number of the latter; else 0.
\end{description}

@ Routines using locations.

\begin{description}
  \item[|lc_set(location)|] Sets other fields of |location| given the position.
  \item[|lc_thru_face(location)|] Updates the fields of |location| for 
traversal of a cell face.
\end{description}

