@* Plasma-Material Interaction (PMI) data definitions.

% $Id: cc2a235d694e0640f0498ac5a717424f9edf1be1 $


\ID{$Id: cc2a235d694e0640f0498ac5a717424f9edf1be1 $}

@I pmiformat.hweb
@I problem.hweb

@ Data for Plasma Material Interactions is held in arrays in common
blocks.  |pd_yield(i,j,k,l,m,p)| accesses the data for the $p$th PMI as
an array with up to 5 dimensions.  Data used in handling the PMI are
stored in the |pd_handling(i,j,k,l,m,d,p)| array with the $d$ subscript
denoting the $d$th dependent variable associated with the $p$th PMI.

@m pd_yield(i,j,k,l,m,p) pmi_yield_tab[i+pmi_yield_tab_index[p][1]*(j+pmi_yield_tab_index[p][2]*(k+pmi_yield_tab_index[p][3]*(l+pmi_yield_tab_index[p][4]*m)))+pmi_yield_base[p]]

@m pd_handling(i,j,k,l,m,d,p) pmi_handling_tab[i+pmi_handling_tab_index[p][d][1]*(j+pmi_handling_tab_index[p][d][2]*(k+pmi_handling_tab_index[p][d][3]*(l+pmi_handling_tab_index[p][d][4]*m)))+pmi_handling_base[p][d]]

@m pd_data_args(x,subs)
      x##_eval_name##subs,x##_rank##subs,x##_var##subs[1],x##_tab_index##subs[1],x##_spacing##subs[0],x##_min##subs[1],x##_delta##subs[1],x##_tab[0],x##_base##subs

@m pd_dep_var_max $EVAL(pf_dep_var_max-1)

@ Variable definitions.

@a
      package_init(pd)

      define_dimen_pk(pd,pd_rank_ind,pf_table_rank_max)
      define_dimen_pk(pd,pd_dep_var_ind,pd_dep_var_max)
      define_dimen_pk(pd,pd_rank_ind0,0,pf_table_rank_max)
      define_dimen_pk(pd,pd_tag_string,pf_tag_string_length)
      define_dimen_pk(pd,pd_eval_string,pf_eval_string_length)

      define_var_pk(pd,pmi_yield_size,INT)
      define_dimen_pk(pd,pd_yield_ind,0,pmi_yield_size-1)
      define_var_pk(pd,pmi_handling_size,INT)
      define_dimen_pk(pd,pd_handling_ind,0,pmi_handling_size-1)

      define_varp_pk(pd,pmi_yield_min,FLOAT,pd_rank_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_yield_delta,FLOAT,pd_rank_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_yield_rank,INT,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_yield_spacing,INT,pd_rank_ind0,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_yield_eval_name,CHAR,pd_eval_string,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_yield_tab_index,INT,pd_rank_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_yield_var,INT,pd_rank_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_yield_num_rand,INT,problem_pmi_sub_ind)

      define_varp_pk(pd,pmi_yield_base,INT,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_yield_tab,FLOAT,pd_yield_ind)

      define_varp_pk(pd,pmi_handling_min,FLOAT,pd_rank_ind,pd_dep_var_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_handling_delta,FLOAT,pd_rank_ind,pd_dep_var_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_handling_rank,INT,pd_dep_var_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_handling_spacing,INT,pd_rank_ind0,pd_dep_var_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_handling_eval_name,CHAR,pd_eval_string,pd_dep_var_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_handling_tab_index,INT,pd_rank_ind,pd_dep_var_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_handling_var0,CHAR,pd_tag_string,pd_dep_var_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_handling_var,INT,pd_rank_ind,pd_dep_var_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_handling_num_rand,INT,problem_pmi_sub_ind)

      define_varp_pk(pd,pmi_handling_base,INT,pd_dep_var_ind,problem_pmi_sub_ind)
      define_varp_pk(pd,pmi_handling_tab,FLOAT,pd_handling_ind)
      define_varlocal_pk(pd,pd_inc,INT)
      package_end(pd)

@ Common blocks definitions.

/*
   |pd_ragged_alloc| and |pd_ragged_realloc| are designed to automatically
   allocate memory for ragged data arrays. To save space, these arrays 
   are packed into 1-D arrays and the multidimensionality is simulated 
   through the macros at the top of this class. Two variables are used 
   along with the main data
   table in this process. All three should be formed from the same ``root''
   word or phrase; this simplifies the macro argument lists so that
   only |x| needs to be passed in. The |y| array provides the actual dimensions
   of the ragged array. 
   \begin{description}
     \item[|x_tab|] One-dimensional array which will contain the data.
     \item[|x_size|] Integer variable representing the total size of |x_tab|.
     \item[|x_base|] Multidimensional array which provides the ``bookmarks''
                     needed to separate the portions of |x_tab|. The input
                     variable |subs| represents the dependence on variables
                     which the macro doesn't need to know about (e.g.,
                     dependent variable index or reaction number). 
          \item[|y|] Dependence on indices external to this macros is again
                     carried through the variable |subs|. The ``rank'' 
                     index used in the macros gives the size of the data 
                     required for this dependent variable in |x_tab|. The 
                     number of 
                     nontrivial ($\neq 1$; can't use $0$ as a trivial
                     size because of the need to take products) entries
                     in |y| gives the real dimensionality of this dependent
                     variable. The value of |y| at each of these entries is
                     the number of independent variables for that dimension.
   \end{description}

   |x_base| just keeps track of where each dependent variable begins in 
   |x_tab|. The macro used to simulate the multidimensionality of |x_tab| 
   uses both |x_base| and |y| to locate a particular entry. The size 
   required for a dependent variable is just the product of its dimensions 
   which can be computed (|pd_set_baseinc|) by looping over its rank and 
   forming the product of the corresponding entries in |y|.
   
   Since |x_tab| has zero size at the beginning of the
   code, no initial allocation is required. However, |x_size| must be
   initialized and memory for |x_base| allocated. We do this in the
   disguise of |pd_ragged_alloc| for consistency with other macros
   which are expanded at the same time.
*/

@m pd_set_baseinc(x,y,subs)
      x##_base##subs=x##_size;
      pd_inc=1;
      $DO(I,range_min(ind_##y##_1),range_max(ind_##y##_1)) {
        pd_inc=pd_inc*y##subs[I];
      }

@m pd_ragged_alloc(x) 
      x##_size=0;
      var_alloc(x##_base);
      call init_base(x##_base,array_size(x##_base)) @;

@m pd_ragged_realloc(x,y,subs)
      pd_set_baseinc(x,y,subs);
      var_realloc(x##_tab,x##_size-1,x##_size-1+pd_inc);
      x##_size=x##_size+pd_inc @;

/*
  Although the end result of these macros is similar to that
  from those in pmiformat.hweb, the approach appears quite different. The
  reason is that in this case, none of the crucial dimensions are known
  at compile time. Instead, the base and increments are recomputed, and
  memory reallocated, not only as new data sets are read in, but also
  as each dependent variable is handled. 
*/

@* PMI data class attribute descriptions.

@ Structures used to hold plasma-material interaction data for the
current problem. Prefix is |pd|.

A given PMI is identified by an integer index |pr_pmi| (``problem PMI''). This
is the internal class corresponding to the ``PMI format'' class |pf|. It 
contains all of the data required to deal with the PMI in the problem. Not
by accident, the elements of this class closely resemble those of the
reaction data class |rd|. One difference is that fits have been made
available for some of the PMI. 

For clarity, here are the assumptions made about the data used to represent
the fit and the associated information in this class:
\begin{enumerate}
  \item |rank| provides the number of independent variables required to
evaluate the fit; their identity is stored in the corresponding |var| array
just as for tables.
  \item The data table passed (the fit coefficients) is considered to be 
strictly 1-D with |tab_index[1]| elements.
  \item The multiplier |mult| does get applied to the fit coefficients.
Hence, |mult[0]| should probably be set to one.
  \item No spacing or value information is stored for the independent 
variables. Since this information is at least likely to be peculiar to each 
fit and at most irrelevant, it is assumed to reside within the fit function.
  \item Eventually, we would like to store the fit function along with the
data so that the data could be completely described by a single package,
as can now be done with tables.
\end{enumerate}

The PMI data class is divided into two similar subclasses. The first 
represents a single dependent variable, the ``yield'' of the PMI (e.g.,
the reflection coefficient, adsorption rate, sputtering yield, etc.; 
in effect, the probability of the process taking place). Hence, this
sub-class lacks any explicit ``dependent variable'' dimension in the arrays.
The |pmi_handling| arrays contain the data required to process or ``handle''
|pr_pmi|. The nature and names of the data objects within the 
|pmi_handling| array can vary not only with the PMI, but
with the model used to represent a given reaction.

The representation of the data in memory is crucial to efficiency. Since the
main data tables here are six or seven dimensional objects of very ``ragged''
structure, we have opted for an internal representation as single dimensional
arrays. To simplify coding, macros have been developed to simulate the
familiar multi-dimensional array functionality. The downside of this
is the addition of bookkeeping arrays (here, the |xxx_base| arrays),
the unwieldy-ness of the macros themselves, and the difficulty in extracting
data from the 1-D array during debugging or while perusing the netCDF files.
At least this last issue may be addressed by the construction of a small
browser code to allow multi-dimensional netCDF data to be viewed and 
plotted in a straightforward manner. The macros are documented in more
detail in |pmidata.hweb|.

\begin{description}
  \item[|pmi_yield_size|] Size of the 1-D array for the PMI yields;
set by the macros |pd_ragged_alloc| and |pd_ragged_realloc|.

  \item[|pmi_handling_size|] Size of the 1-D array for the handling data;
set by the macros |pd_ragged_alloc| and |pd_ragged_realloc|.

  \item[|pmi_yield_min[pr_pmi][i]|] Floating point minimum value of
the |i|th independent variable of the yield for |pr_pmi|.

  \item[|pmi_yield_delta[pr_pmi][i]|] Floating point increment in
the |i|th independent variable of the yield for |pr_pmi|.

  \item[|pmi_yield_rank[pr_pmi]|] Integer number of independent
variables for the yield for |pr_pmi|.

  \item[|pmi_yield_spacing[pr_pmi][i]|] Integer identifying the way
the |i|th variable for the yield of |pr_pmi| (|i| = 0 refers to the
yield itself) is to be interpolated. Examples are
|pf_spacing_linear| and |pf_spacing_log|. Namely, in the log case the
log of the independent variable (or dependent if |i| = 0) is interpolated
linearly. 

  \item[|pmi_yield_eval_name[pr_pmi]|] String (length |pf_eval_string_length|)
providing the name of the function which will be used to evaluate the yield 
data. The most prevalent value is ``table''; other
values must correspond to the name of a fitting subroutine. See 
|plate.web| for more details.

  \item[|pmi_yield_tab_index[pr_pmi][i]|] Number of values used for
the |i|th independent variable of the yield for |pr_pmi|.

  \item[|pmi_yield_var[pr_pmi][i]|] Integer identifying the |i|th
independent variable for the yield. The independent variables are typically 
incident energy, and incident poloidal angle; see |pmiformat.hweb| for a 
full list.

  \item[|pmi_yield_num_rand[pr_pmi]|] Integer number of uniform 
random variates required to evaluate the yield for |pr_pmi|.
This is provided for compatibility with the |pmi_handling| variables and will
usually be 0 here.

  \item[|pmi_yield_base[pr_pmi]|] Index in |pmi_yield_tab| at which the data 
for the yield of |pr_pmi| begin. This array is set by the macros 
|pd_ragged_alloc| and |pd_ragged_realloc|.

  \item[|pmi_yield_tab[macro_index]|] Is the actual data object which
holds the yield data. As described above, this is a 1-D array of size 
|pmi_yield_size|. These data are normally accessed through the macro interface
|pd_yield|.

  \item[|pmi_handling_min[pr_pmi][j][i]|] Floating point minimum value of
the |i|th independent variable for the |j|th dependent variable in |pr_pmi|.

  \item[|pmi_handling_delta[pr_pmi][j][i]|] Floating point increment in
the |i|th independent variable for the |j|th dependent variable in |pr_pmi|.

  \item[|pmi_handling_rank[pr_pmi][j]|] Integer number of independent
variables for the |j|th dependent variable in |pr_pmi|.

  \item[|pmi_handling_spacing[pr_pmi][j][i]|] Integer identifying the way
the |i|th variable for the |j|th dependent variable (|i| = 0 refers to the
dependent variable itself) is to be interpolated. Examples are
|pf_spacing_linear| and |pf_spacing_log|. Namely, in the log case the
log of the independent variable (or dependent if |i| = 0) is interpolated
linearly. 

  \item[|pmi_handling_eval_name[pr_pmi][j]|] String (length 
|pf_eval_string_length|) providing the name of the function or subroutine
which will be used to evaluate the data for the |j|th dependent variable
in handling |pr_pmi|. The most prevalent value is ``table''; other
values must correspond to the name of a fitting subroutine. See 
|plate.web| for more details. Note that in some instances, the appropriate
dependent ``variable'' is really a vector (i.e., velocity); in this case,
tabular evaluation (which can return only a single scalar) makes no sense.

  \item[|pmi_handling_tab_index[pr_pmi][j][i]|] Number of values used for
the |i|th independent variable of the |j|th dependent variable for |pr_pmi|.

  \item[|pmi_handling_var0[pr_pmi][j]|] String (length |pf_tag_string_length|)
 identifying the |j|th dependent variable of |pr_pmi|. A string is used here 
since the nature of the handling data varies from one PMI to the next.

  \item[|pmi_handling_var[pr_pmi][j][i]|] Integer identifying the
|i|th independent variable for the |j|th dependent variable. The 
independent variables are typically incident energy, and incident 
poloidal angle; see |pmiformat.hweb| for a full list.

  \item[|pmi_handling_num_rand[pr_pmi]|] Integer number of uniform 
random deviates required to handle a single interaction of |pr_pmi|.
The need for this became apparent when implementing the Bateman format.
In this case, the {\em same random number} is needed to evaluate more than
one dependent variable. |pmi_handling_num_rand| lets the code 
maintain them through all of the required dependent variable evaluations.

  \item[|pmi_handling_base[pr_pmi][j]|] Index in |pmi_handling_tab|
at which the data for the |j|th dependent variable of |pr_pmi| begin.
This array is set by the macros |pd_ragged_alloc| and |pd_ragged_realloc|.

  \item[|pmi_handling_tab[macro_index]|] Is the actual data object which
holds the handling data. As described above, this is a 1-D array of size
|pmi_handling_size|. These data are normally accessed through the macro 
interface |pd_handling|.
\end{description}

@ Routines using PMI data.

\begin{description}
  \item[|pd_yield(k,l,m,n,o,pr_pmi)|] The programmer's representation of the
yield data for |pr_pmi|. |k|, |l|, |m|, |n|, and |o| represent the up-to-five
dimensional dependency of the yield on its independent variables.
|k| ranges from 0 $\rightarrow$ |pmi_yield_tab_index[pr_pmi][1]| - 1;
similarly for |l| with |i|=2, |m|, |i|=3, etc.

  \item[|pd_handling(k,l,m,n,o,j,pr_pmi)|] The programmer's representation of 
the handling data for |pr_pmi|. |k|, |l|, |m|, |n|, and |o| represent the 
up-to-five dimensional dependency of the |j|th dependent variable on its 
independent variables. |k| ranges from 
0 $\rightarrow$ |pmi_handling_tab_index[pr_pmi][j][1]| - 1; similarly for |l| 
with |i|=2, |m|, |i|=3, etc.

  \item[|pd_data_args(x,subs)|] This macro provides an argument list of all of
the |pmi_yield| or |pmi_handling| (use either of these as |x|) arrays
for passing down to a subroutine. The |subs| argument provides the |pr_pmi|
array index (both cases) and the dependent variable index for |pmi_handling|. 
E.g., usage might be: |pd_data_args(pmi_yield,[pr_pmi])| or 
|pd_data_args(pmi_handling,[pr_pmi][j])|.

  \item[|pd_ragged_alloc(pd_data)|] Initializes |pd_data_size| and allocates
space for |pd_data_base| (|pd_data| is a root name here, either |pmi_yield|
or |pmi_handling|). This macro needs to do nothing more because the 
PMI data are loaded in one PMI at a time, and the sizes are not known a priori.

  \item[|pd_ragged_realloc(pd_data,pd_tab_index,subs)|] Makes changes to size
of one-dimensional data array |pd_data_tab| (|pd_data| is a root name here, 
either |pmi_yield| or |pmi_handling|) based on a revised |pd_tab_index|. 
|subs| provides the |pr_pmi| array index (both cases) and the dependent 
variable index for |pmi_handling|. The user must be adding to the end of the 
table for this to work properly.
\end{description}

