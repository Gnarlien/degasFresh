% $Id: a3bb4dace5f202806b5068ac39f39d6c0a19a34d $
\Title{classes}

@* Introduction.

\ID{$Id: a3bb4dace5f202806b5068ac39f39d6c0a19a34d $}

This file provides a detailed description of the classes and associated
common variables in the code. It is mainly intended to be read by
people working on the code directly, including the authors, but may
be accessible to the casual user as well. Note that because of its 
extensive length, the file may not be up-to-date with respect to the
code. However, there should not ever be any fundamental discrepancies.

We define the various classes here and the methods to access the
components.  Each class has a two-letter abbreviation which is used to
prefix the accessor functions.  Ideally, each class has 5 standard methods:

|CL_args(inst)| is how to pass a instance of a class to a subroutine.
|CL_dummy(inst)| is the dummy argument for a subroutine.
|CL_common| will declare common variable for this class.
|CL_decl(inst)| is how to declare a member of a class in a subroutine.
|CL_copy(inst1,inst2)| is how to copy one instance of a class to
another instance of the same class.
|CL_check(inst)| will check the consistency of the instance.

This file is intended to document the ``accessor functions'' (usually
macros), representing common arrays as well as few-line code, most 
used in DEGAS 2. Many of the classes below also contain descriptions of
the less frequently used arrays and variables which make up the
``internal'' description of the class. In a genuine object-oriented 
language, these would correspond to ``public'' and ``private'' methods,
respectively.

The instance above is designated in one of two ways.

For some classes, the information is held in global common blocks.  In
this case, the instance is denoted by an integer variable which is a
pointer into the common block arrays.  Examples of these classes are
elements, species, and reactions.

For the other classes, the instance is tagged with an arbitrary string.
The various components are obtained by constructing variable names from
that string.

In both cases, the instance can be an array reference and an array of
instances can be constructed in a natural manner; e.g.,
|CL_args(inst[3])| or |CL_decl(inst[0:5])|.

These combine in a natural way.  Thus if we are dealing with flight |f|,
then |fl_current(f)| is the current particle being tracked.  Its species
is |pt_sp(fl_current(f))|.  The first component of this species is
|sp_el(pt_sp(fl_current(f)),1)|, and so on.

Because DEGAS 2 is written in a non-object-oriented language and all of
this class structure is implemented in a rather ad hoc way, the above
described ``ideals'' are not adhered to throughout the code. The most
familiar offenses are:
\begin{enumerate}
  \item For those classes in which objects are denoted by a single integer,
the |CL_args| and |CL_dummy| functions (which are really null macros)
are frequently not used. An effort should be made to use these macros anyway
as a method of labeling the variables in an argument list.
  \item Again for the classes labeled by an integer, |CL_decl| is often
dropped in lieu of a normal integer declaration. In some routines, the
reason is that the variable in question is the index of a do-loop, and it
is desirable to have its integral nature obvious to the reader. Ideally,
one would have set up ``conversions'' from these integers to the actual
class variables.
  \item Some classes, e.g., the tallies, must be completely defined at the
start of the run. In this case, the |CL_copy| function is not really
needed and is implemented in only the most superficial manner.
  \item For similar reasons, |CL_check| may not always be as thorough as it
could be.
\end{enumerate}

{\em Regarding subscript notation:} \\
There is a wide variety of subscript notation in use throughout the code.
Since it may never be unified, it is necessary to alert the reader
to the possible forms and their interpretation.
\begin{itemize}
  \item All macros contain argument lists in parentheses: $(x,y)$. These
variables may either be passed into some macro code, or may only represent
an abbreviation of a common variable name. For example, |el_name(x)| is 
a macro meaning |element_name|[|x|]. It {\em should} be the case that
the order of the indices in these macro arrays corresponds to that used in
C; i.e., the rightmost index is the most rapidly varying as the
length of the array is traversed in memory. To be certain, one must check
the macro definition.
  \item Direct references to common variables have 
subscripts in brackets: $[x]$. Through
some separate coding (not explicit macros in the class declarations as above) 
C-like subscripts have been set up in the code so
that multiple subscripts may be written as: $[y][x]$. In this case, it
is guaranteed that the order of the subscripts is reversed in 
translating these expressions into compilable FORTRAN. The
primary reason for establishing the C-like syntax is that a compact 
vector notation
can be implemented via some well-defined macros.
  \item Unfortunately, the hybrid syntax $[x,y]$ is also found throughout 
the code.
In this case, the order of the array subscripts matches that of the
underlying FORTRAN array (leftmost index is most rapidly varying); usage of 
this sort should be discouraged.
  \item Finally, one can write the subscripts in the familiar FORTRAN notation:
|reaction_reagent(i,x)|. This is discouraged since it may
possibly cause a variable reference to be mis-identified by a reader as a
macro call. Also, the first two syntax options, macro or C-like, should be
used whenever possible to encourage uniformity throughout the code.
  \item To summarize, the following are equivalent variable references:
  \begin{enumerate}
    \item |rc_reagent(x,i)|, invokes a macro,
    \item |reaction_reagent|[|i,x|], is the result of processing the macro,
    \item |reaction_reagent|[|x|][|i|],is the corresponding C-like syntax,
    \item |reaction_reagent(i,x)|, is what the compiler will see.
  \end{enumerate}
  \begin{itemize}
    \item Throughout most of the rest of this document and in the ``woven'' 
code, these are typeset as (note that FWEAVE {\em does not} swap the index
order in the third case as it should):
    \begin{enumerate}
      \item |rc_reagent(x,i)|, invokes a macro,
      \item |reaction_reagent[i,x]|, is the result of processing the macro,
      \item |reaction_reagent[x][i]|, is the corresponding C-like syntax,
      \item |reaction_reagent(i,x)|, is what the compiler will see.
    \end{enumerate}
  \end{itemize}
  \item The macro invocations used to define arrays in the header files,
|define_var_pk| and |define_varp_pk|, order the subscripts in the FORTRAN
way. E.g., the definition of the array used in the previous example is:
\begin{verbatim}
      define_varp_pk(rc,reaction_reagent,INT,reagent_ind,reaction_ind)
\end{verbatim}
with |i| being associated with |reagent_ind| and |x| with |reaction_ind|.
  \item But, netCDF is based on C conventions and the array declaration is
again turned around in there:
\begin{verbatim}
	int reaction_reagent(reaction_ind, reagent_ind) ;
\end{verbatim}
The representation of the data in the file is consistent with that:
\begin{verbatim}
 reaction_reagent =
  2, 3,
  2, 5,
  5, 3,
  2, 4,
\end{verbatim}
and so on with each line specifying the reagents for a given reaction, and
one line appearing for each reaction.
\end{itemize}

For more details on array definitions and the macros used to carry them out, 
see the documentation in |array.hweb|.

The only instance in which the macro representation of an array cannot be
used is in the invocation of memory allocation arrays. These must contain
the names of the actual common variables. 

Throughout the code there are a handful of large, multidimensional data
objects. Frequently appearing are the arrays containing the
reaction and plasma-material interaction data, e.g., |reaction_handling|,
and the arrays containing the tally and output data, e.g., |output_grp|.
Because these dimensions are ``ragged'', direct representation as 
multi-dimensional FORTRAN arrays is not convenient. Instead, a 
large, one dimensional array is dimensioned, and pointers or base address
arrays used to identify the portion of the array corresponding to a 
particular combination of subscript values. Specific macros are invoked
at setup to compute the size of the array and to establish the base
addresses. Another 
macro is used to mimic the multi-dimensional representation for
the reader's benefit. However, the tally and output 
arrays are treated differently,
because of the presence of additional regular structure in them
See the specific section below on the output class for more details.

@* Class Attribute Descriptions.

Have moved this documentation into the header files themselves (inserted
into this file by FWEB) to facilitate updating documentation with code
changes.

@i classes.hweb
@* INDEX.



