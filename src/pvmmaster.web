% $Id: 0aed53943d898a72a6770366b9544bbb4599787f $
\Title{pvmmaster}


@* A test program for the geometry routines.

\ID{$Id: 0aed53943d898a72a6770366b9544bbb4599787f $}

@m FILE 'pvmmaster.web'
@I macros.hweb
@I pvm.hweb
@I sysdep.hweb
@I string.hweb
@I zone.hweb
@I random.hweb

@ The main program.

@a
      program pvm_master
      implicit_none_f77
      implicit_none_f90
      integer nflights,nfrag,nslaves,i
      character*LINELEN arg
      sy_decls
      st_decls
      
      nflights=100000
      nslaves=13
      nfrag=500

      do i=1,max(2,arg_count())
         call command_arg(i,arg)
         if (i == 1) nflights=read_integer(arg)
         if (i == 2) nfrag=read_integer(arg)
         if (i == 3) nslaves=read_integer(arg)
      end do


      call readfilenames
      call master_init
      call pvm_flights_master(nflights,nfrag,nslaves)

      stop
      end

      @<Functions and Subroutines@>

@ Initialize common blocks.

@<Functions...@>=
      subroutine master_init
      implicit_none_f77
      implicit_none_f90
      
      call read_geometry
      
      return
      end
      
@ The master controller.  This farms out calculations to do to slave
processes.  |nflights| is the total number of flights to compute;
|nfrag| is the ``chunk'' size for the pieces of calculations to do;
|nslaves| is the number of slave processes to start.

@<Functions...@>=
      subroutine pvm_flights_master(nflights,nfrag,nslaves)

      define_dimen(temp_ind,2)
      define_varp(stat,FLOAT,temp_ind,zone_ind)
      define_varp(stat1,FLOAT,temp_ind,zone_ind)

      implicit_none_f77
      zn_common
      implicit_none_f90
      integer nflights,nfrag,nslaves     // Input
      integer i,j,num,nparcel // Local
      rn_seed_decl(seed)
      integer mytid,tids[0:99],numt,ret,msgtag,tid,buf,bytes
      @<Memory allocation interface@>
      real weight,weight1
c      real stat(2,zn_num)
c      real stat1(2,zn_num)
      declare_varp(stat)
      declare_varp(stat1)
      
      var_alloc(stat)
      var_alloc(stat1)

      call decimal_to_seed('12',seed) // Initialize random number seed
      
      weight=zero
      do i=1,zn_num
         do j=1,2
            stat[j,i]=zero
         end do
      end do

      call pvmfmytid(mytid)     // Enroll in PVM
      call pvmfspawn('pvmslave',PVMDEFAULT,'*',nslaves,tids,numt) // Start slaves
      assert(numt == nslaves)

      nparcel=(nflights+nfrag-1)/nfrag // The number of chunks

      do j=0,min(nparcel,nslaves)-1 // Send out the initial requests

         num=min(nfrag,nflights-j*nfrag)

         call pvmfinitsend(PVMDEFAULT,ret) // Make the request
         call pvmfpack(pvm_int,j*nfrag,1,1,ret)
         call pvmfpack(pvm_int,num,1,1,ret)
         call pvmfpack(pvm_int,seed,2,1,ret)
         msgtag=1
         call pvmfsend(tids[j],msgtag,ret)

         call next_seed(nfrag,seed) // Advance random number seed
      end do

      do j=min(nparcel,nslaves),nparcel-1 // Loop reading results and making additional requests

         msgtag=2               // Read the results
         call pvmfrecv(-1,msgtag,buf)
         call pvmfbufinfo(buf,bytes,msgtag,tid,ret)
         call pvmfunpack(pvm_real,stat1,2*zn_num,1,ret)
         call pvmfunpack(pvm_real,weight1,1,1,ret)

         num=min(nfrag,nflights-j*nfrag)

         call pvmfinitsend(PVMDEFAULT,ret) // Make the next request
         call pvmfpack(pvm_int,j*nfrag,1,1,ret)
         call pvmfpack(pvm_int,num,1,1,ret)
         call pvmfpack(pvm_int,seed,2,1,ret)
         msgtag=1
         call pvmfsend(tid,msgtag,ret)

         call next_seed(nfrag,seed) // Advance the seed

         call stat_acc(zn_num,weight1,stat1,weight,stat) // Accumulate the results
      end do
      
      do j=0,min(nparcel,nslaves)-1 // Do the final reads
         msgtag=2
         call pvmfrecv(-1,msgtag,buf)
         call pvmfbufinfo(buf,bytes,msgtag,tid,ret)
         call pvmfunpack(pvm_real,stat1,2*zn_num,1,ret)
         call pvmfunpack(pvm_real,weight1,1,1,ret)

         call stat_acc(zn_num,weight1,stat1,weight,stat)
      end do
         
      num=0                     // Terminate the slave processes
      call pvmfinitsend(PVMDEFAULT,ret)
      call pvmfpack(pvm_int,num,1,1,ret)
      call pvmfpack(pvm_int,num,1,1,ret)
      call pvmfpack(pvm_int,num,1,1,ret)
      call pvmfpack(pvm_int,num,1,1,ret)
      msgtag=1
      call pvmfmcast(nslaves,tids,msgtag,ret)

      call pvmfexit(ret)        // Let PVM know we're done

      open(unit=diskout,file='stat.dat')
      write(diskout,*) SP ((stat(i,j),i=1,2),j=1,zn_num)
      close(unit=diskout)

      var_free(stat)
      var_free(stat1)

      return
      end


@* INDEX.
