% $Id: d6e8fd04f08fbee8cb88d0bc35ab2e87bc142ff1 $
\Title{conversions}

@* Routines used to convert tallies from their raw form to the one desired.
 
\ID{$Id: d6e8fd04f08fbee8cb88d0bc35ab2e87bc142ff1 $}

@m FILE 'conversions.web'

@I macros.hweb
@I tally.hweb
@I particle.hweb
@I string.hweb
@I problem.hweb
@I species.hweb
@I zone.hweb
@I geomint.hweb
@I background.hweb
@I output.hweb

@ The main program

@a
      @<Functions and subroutines@>

@ Subroutine to convert |scoring_data| prior to adding to tallies.

@<Functions...@>=
      subroutine track_conversions(tl_dummy(jscore),pt_dummy(p),
     $   index_parameters,scoring_data,converted_data)

      implicit_none_f77
      pr_common                                  // Common
      tl_common
      implicit_none_f90

      tl_decl(jscore)                            // Input
      pt_decl(p)
      integer index_parameters[tl_index_unknown:tl_index_max]
      real scoring_data[scoring_data_max]              

      real converted_data[scoring_data_max]      // Output

      integer icv,j_tl_cv,k,ip,i,j               // Local
      real cv_params[tl_cv_max_params],local_data[tl_cv_max_local_data],
     $     local_data_out[tl_cv_max_local_data]

      tl_decls
      st_decls

      do k=1,pr_var0_num                    // Need to do this every call!
         converted_data[k]=scoring_data[k]
      end do

/*
   We originally had |scoring_data| in the assignment of |local_data| below.
   If there were more than one track conversion for this score, that would
   have meant that only the last would have been remembered.
*/
      assert(tally_num_conversions[jscore] > 0)

      call set_track_cv_params(tl_args(jscore),index_parameters,
     $     pt_args(p),cv_params)

      do j_tl_cv=1,tally_num_conversions[jscore]
         icv=tally_cv_ptr[jscore][j_tl_cv]
         if (tally_cv_type[icv] == tl_cv_track) then
            i=0
            do ip=1,tally_cv_num_partners[icv]
               do j=1,tally_dep_var_dim[tally_cv_partners[icv][ip]]
                  i++
                  local_data[i]=converted_data[
     $            tl_scoring_index(tally_dep_var[tally_cv_partners[icv][ip]],
     $                              j,index_parameters)]
               end do
            end do
            assert(i <= tl_cv_max_local_data)

            call do_conversions(icv,cv_params,local_data,
     $           tally_dep_var_dim[tally_cv_partners[icv][1]],
     $           local_data_out)
                  
/*
   Only the data for the first partner (i.e., the score itself) gets altered.
*/
            i=0
            do j=1,tally_dep_var_dim[tally_cv_partners[icv][1]]
               i++
               converted_data[
     $              tl_scoring_index(tally_dep_var[tally_cv_partners[icv][1]],
     $              j,index_parameters)]=local_data_out[i]
            end do
         end if
      end do

      return
      end

@ Preparatory routine for post-process and output conversions. Note that
|track_conversions| works on a copy of the score data while this routine
modifies the data directly. In this case, it would be painful to make a
complete copy of the full |scores| array, and we can be certain that we
alter only the scores needed. In |track_conversions|, use of the
score data on subsequent calls are not determined a priori so that it is 
not appropriate to make permanent changes to them.

@<Functions...@>=
      subroutine final_conversions(type,scores)

      implicit_none_f77
      pr_common                                           // Common
      tl_common
      implicit_none_f90

      integer type                                        // Input

      real scores[0:*][o_mean:o_var]                      // Input / Output

      integer icv,jscore,ip,i,j,k,l,m,is,jv,dim1          // Local
      integer ind_val[tl_rank_max],
     $     index_parameters[tl_index_unknown:tl_index_max]
      real check_data
      real local_data[tl_cv_max_local_data],
     $     local_data_out[tl_cv_max_local_data],cv_params[tl_cv_max_params]

      tl_decls

      do icv=1,nconversions
         if (tally_cv_type[icv] == type) then
            jscore=tally_cv_partners[icv][1]
            assert(jscore > 0)

            do i=tl_index_unknown,tl_index_max
               index_parameters[i]=zero
            end do

/*
   Note: this routine assumes that all partners have 
   the same |tally_tab_index|.
*/
            assert(tl_rank_max == 5)
            do m=1,tally_tab_index[jscore][5]
               ind_val[5]=m-1
               index_parameters[tally_indep_var[jscore][5]]=m
               do l=1,tally_tab_index[jscore][4]
                  ind_val[4]=l-1
                  index_parameters[tally_indep_var[jscore][4]]=l
                  do k=1,tally_tab_index[jscore][3]
                     ind_val[3]=k-1
                     index_parameters[tally_indep_var[jscore][3]]=k
                     do j=1,tally_tab_index[jscore][2]
                        ind_val[2]=j-1
                        index_parameters[tally_indep_var[jscore][2]]=j
                        do i=1,tally_tab_index[jscore][1]
                           ind_val[1]=i-1
                           index_parameters[tally_indep_var[jscore][1]]=i

                           call set_cv_params(tl_args(jscore),index_parameters,
     $                          cv_params)

                           is=0
                           check_data=zero
                           dim1=tally_dep_var_dim[tally_cv_partners[icv][1]]
                           do ip=1,tally_cv_num_partners[icv]
                              do jv=1,tally_dep_var_dim[tally_cv_partners[icv][ip]]
                                 is++
                                 local_data[is]=scores[out_array_index(jv,ind_val,tally_cv_partners[icv][ip])][o_mean]
                                 check_data+=abs(local_data[is])
                              end do
                           end do
                           assert(is <= tl_cv_max_local_data)

                           if (check_data > zero) then
                              call do_conversions(icv,cv_params,local_data,
     $                           dim1,local_data_out)

/*
   Only the data for the first partner (i.e., the score itself) gets altered.
*/
                              is=0
                              do jv=1,dim1
                                 is++
                                 scores[out_array_index(jv,ind_val,tally_cv_partners[icv][1])][o_mean]=local_data_out[is]
                              end do
                           end if
                        end do        // |i|, \ldots
                     end do
                  end do
               end do    
            end do                    // \ldots, |m|
         end if
      end do                          // |icv|

      return
      end

@ Subroutine to set parameters used to do track conversions.

@<Functions...@>=
      subroutine set_track_cv_params(tl_dummy(jscore),index_parameters,
     $   pt_dummy(p),cv_params)

      implicit_none_f77
      implicit_none_f90


      tl_decl(jscore)                              // Input
      integer index_parameters[tl_index_unknown:tl_index_max]
      pt_decl(p)

      real cv_params[tl_cv_max_params]             // Output
                                                   // Local
      integer i                                  
/*
   It is extremely convenient to have this separate from the analogous
   |set_cv_params| routine used for the final conversions. The main reason
   is that we probably will need at least the current particle position
   to do the velocity coordinate conversion. We pass in a particle so
   that we can eventually do more (e.g., if we end up averaging x/R along
   the track and pass the track specification along with the particle, or
   maybe it'll have to be a flight at that point). Because the post-process
   conversions were established almost entirely to allow a fake particle
   to be set up for the post-process scores, it's asking too much to pass
   down a particle specification for that |set_cv_params| routine. 
   It is reasonable for this routine to call that one as a subset;
   e.g., if there was a need to divide out the mass or volume on the
   fly. But right now that's not necessary.
*/

      do i=1,tl_cv_max_params
         cv_params[i]=zero
      end do

      cv_params[tl_cv_pos_1]=lc_x(pt_loc(p))[1]
      cv_params[tl_cv_pos_2]=lc_x(pt_loc(p))[2]
      cv_params[tl_cv_pos_3]=lc_x(pt_loc(p))[3]

@#if 0
      call set_cv_params(tl_args(jscore),index_parameters,cv_params)
@#endif

      return
      end

@ Set parameters used for scaling and other conversions.

@<Functions...@>=
      subroutine set_cv_params(tl_dummy(jscore),index_parameters,cv_params)

      implicit_none_f77
      pr_common                                    // Common
      tl_common
      sp_common
      zn_common
      implicit_none_f90

      tl_decl(jscore)                              // Input
      integer index_parameters[tl_index_unknown:tl_index_max]

      real cv_params[tl_cv_max_params]             // Output
      
      integer k                                    // Local
      zn_decl(zone)

      tl_decls
      zn_decls

/*  Will this suffice to trap pathological cases if we check for 
    zeroes later? Are there cases where zero is a reasonable value?
*/
      do k=1,tl_cv_max_params
         cv_params[k]=zero
      end do

/* We can do constants here, too, although they might be better done in
   constants.hweb with obvious names.
*/
      cv_params[tl_cv_Pa_per_mTorr]=const(1.3332,-1) // NRL Plasma Formulary
      cv_params[tl_cv_three_halves]=const(1.5)       // For neutral temperature

      if (pr_test_check(index_parameters[tl_index_test])) 
     $cv_params[tl_cv_test_mass]=sp_m(pr_test(index_parameters[tl_index_test]))

      if (pr_background_check(index_parameters[tl_index_problem_sp])) then
         cv_params[tl_cv_problem_sp_mass]=sp_m(pr_background(index_parameters[tl_index_problem_sp]))
      else if (pr_test_check(index_parameters[tl_index_problem_sp]-pr_background_num)) then
         cv_params[tl_cv_problem_sp_mass]=sp_m(pr_test(index_parameters[tl_index_problem_sp]-pr_background_num))
      end if
         

      zone=index_parameters[tl_index_zone]
      if (zn_check(zone)) then
         
         cv_params[tl_cv_volume]=zn_volume(zone)
/* Presently, |zone_centers| defined only for plasma zones. Could we
   be doing some sort of volume average here? Does it make any difference?
 */
         if (zn_type(zone) == zn_plasma) then
            cv_params[tl_cv_zone_pos_1]=zone_center[zone][1]
            cv_params[tl_cv_zone_pos_2]=zone_center[zone][2]
            cv_params[tl_cv_zone_pos_3]=zone_center[zone][3]
         end if
      end if

/*  The other parameter we've imagined including here is the sector area.
    However, that is not presently computed during the geometry setup!
    Hold off on that until we get all of this transform stuff working.
*/

      return
      end

@ Actually do the conversions. This routine contains all of the
details. {\bf Note: additive conversions might cause problems with
the |check_data| variable used to determine whether or not a given
score is nonzero.} E.g., a dependent variable datum initially zero,
could be converted into a nonzero value by an addition.

@<Functions...@>=
      subroutine do_conversions(icv,cv_params,local_data,dim,local_data_out)

      implicit_none_f77
      gi_common                                     // Common
      bk_common
      pr_common
      tl_common
      implicit_none_f90

      integer icv,dim                               // Input
      real cv_params[tl_cv_max_params],local_data[tl_cv_max_local_data]

      real local_data_out[tl_cv_max_local_data]     // Output

      integer i                                     // Local
      vc_decl(x)

      tl_decls

      do i=1,tl_cv_max_local_data
         local_data_out[i]=zero
      end do

      if (tally_cv_action[icv] == tl_cv_scale) then
         if (cv_params[tally_cv_scalers[icv][1]] != zero) then
            do i=1,dim
               local_data_out[i]=local_data[i]
     $              /cv_params[tally_cv_scalers[icv][1]]
            end do
         else
            do i=1,dim
               local_data_out[i]=local_data[i]
            end do
         end if

      else if (tally_cv_action[icv] == tl_cv_divide_number) then
/*
  Verify that partner conversions have been done; settle for checking 
  just the first. {\em NOTE:} this conversion does not work as intended
  for runs with multiple source groups. The ``number'' used in the
  denominator will be that corresponding to the current source group,
  not to the sum over all groups.
*/
         assert(tally_cv_ptr[tally_cv_partners[icv][2]][1] < icv)
         if (local_data[dim+1]  != zero) then
            do i=1,dim
               local_data_out[i]=local_data[i]/local_data[dim+1]
            end do
         else
            do i=1,dim
               local_data_out[i]=local_data[i]
            end do
         end if
         local_data_out[dim+1]=local_data[dim+1]

      else if (tally_cv_action[icv] == tl_cv_to_internal_coords) then
         assert(dim==3)
         x[1]=cv_params[tl_cv_zone_pos_1]
         x[2]=cv_params[tl_cv_zone_pos_2]
         x[3]=cv_params[tl_cv_zone_pos_3]
         v_ext_to_int(x,local_data,local_data_out,geometry_symmetry,background_coords)

      else if (tally_cv_action[icv] == tl_cv_to_external_coords) then
         assert(dim==3)
         x[1]=cv_params[tl_cv_pos_1]
         x[2]=cv_params[tl_cv_pos_2]
         x[3]=cv_params[tl_cv_pos_3]
         v_int_to_ext(x,local_data,local_data_out,geometry_symmetry,background_coords)

      else
         assert('Unsupported conversion' == ' ')
      end if

      return
      end
         


