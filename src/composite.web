% $Id: 4ca02c31bb3c001390646194ab125f2188e12b65 $
\Title{composite}


@* Introduction.

\ID{$Id: 4ca02c31bb3c001390646194ab125f2188e12b65 $}

This file defines some composite zones, includes polygons rotated about
the $\hat {\vect z}$ axis.

@m FILE 'composite.web'

@I macros.hweb
@I sysdep.hweb
@I location.hweb
@I zone.hweb

@i geomint.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@* Some utility routines.  First check whether two line segments intersect.
Each line segment is given by a two-dimensional array, whose first index
corresponds to $x$ ($1$) or $z$ ($2$), and whose second index ($1$ or $2$)
corresponds to the two end points.

@<Functions...@>=
      function segment_intersect(x1,x2)
      implicit_none_f77
      implicit_none_f90
      logical segment_intersect // Function
      real x1[2,2],x2[2,2]      // Input
      real d,f11,f12,f21,f22    // Local

      d=(x1[1,2]-x1[1,1])*(x2[2,2]-x2[2,1])-(x2[1,2]-x2[1,1])*(x1[2,2]-x1[2,1])

      if (d == zero) then       // Segments are parallel, no intersection.
         segment_intersect=.false.
         return
      end if

/* |fij/d| is the fractional distance of intersection from $j$th end of the
$i$th segment. */

      f11=(x2[1,1]-x1[1,1])*x2[2,2]+(x1[1,1]-x2[1,2])*x2[2,1]+
     $     (x2[1,2]-x2[1,1])*x1[2,1]
      f12=(x1[1,2]-x2[1,1])*x2[2,2]+(x2[1,1]-x2[1,2])*x1[2,2]+
     $     (x2[1,2]-x1[1,2])*x2[2,1]
      f21=(x2[1,1]-x1[1,1])*x1[2,2]+(x1[1,1]-x1[1,2])*x2[2,1]+
     $     (x1[1,2]-x2[1,1])*x1[2,1]
      f22=(x1[1,2]-x1[1,1])*x2[2,2]+(x1[1,1]-x2[1,2])*x1[2,2]+
     $     (x2[1,2]-x1[1,2])*x1[2,1]

      segment_intersect=(f11>zero) && (f12>zero) && (f21>zero) && (f22>zero)

      return
      end

@ Check a polygon for self-intersection.  A $n$-sided polygon is
represented by a array |x[2,0:n]| where the $0$th and $n$th points
coincide.

@<Functions...@>=      
      function self_intersect(n,x)
      implicit_none_f77
      implicit_none_f90
      logical self_intersect    // Function
      integer n                 // Input
      real x[2,0:n]
      integer i,j                // Local
      external segment_intersect // External
      logical segment_intersect

      check(n>=3)               // Need at least a triangle
      check(x[1,0] == x[1,n] && x[2,0] == x[2,n]) // Check end points

      self_intersect=.true.

      do i=0,n-1
         do j=i+2,min(n-1,n+i-2)
            if (segment_intersect(x[1,i],x[1,j])) then

               return
            end if
         end do
      end do

/* Note that with $n=3$, we always drop through to here. */
      self_intersect=.false.

      return
      end

@ Check convexity of polygon.  Polygon is transversed in the clockwise
direction in the $(x,z)$ plane.  This doesn't even tolerate collinearity
of the points.

@<Functions...@>=
      function convex_polygon(n,x)
      implicit_none_f77
      implicit_none_f90
      logical convex_polygon    // Function
      integer n                 // Input
      real x[2,0:n]
      integer i                 // Local
      real pi,totang,dir0,dir,delta 
      external self_intersect   // External
      logical self_intersect

      check(n>=3)               // Need at least a triangle
      check(x[1,0] == x[1,n] && x[2,0] == x[2,n]) // Check end points
      
      convex_polygon=.false.
      if (self_intersect(n,x)) return
      pi=PI
      assert(x[2,n]!=x[2,n-1]||x[1,n]!=x[1,n-1])
      dir0=atan2(x[2,n]-x[2,n-1],x[1,n]-x[1,n-1])
      totang=zero
      do i=0,n-1
         dir=atan2(x[2,i+1]-x[2,i],x[1,i+1]-x[1,i])
/*	 write (stderr,*)' dir,dir0', dir,dir0 */
         delta=dir-dir0
         if (delta > pi) then
            delta=delta-two*pi
         else if (delta < -pi) then
            delta=delta+two*pi
         end if
         if (delta >= -sqrt(epsilon_angle)) return // This used to be |>= zero|.
         totang=totang+delta
         dir0=dir
      end do

      assert(abs(totang+two*pi) <= epsilon_angle) // Make sure we only went round once

      convex_polygon=.true.
      return
      end

@ Check for being inside a convex polygon.

@<Functions...@>=
      function inside_polygon(a,n,x)
      implicit_none_f77
      implicit_none_f90
      logical inside_polygon    // Function
      integer n                 // Input
      real a[2],x[2,0:n]
      integer i                 // Local

      inside_polygon=.false.

      do i=0,n-1
         if ((x[2,i+1]-x[2,i])*(a[1]-x[1,i])-(x[1,i+1]-x[1,i])*(a[2]-x[2,i])
     $        <=zero) return
      end do

      inside_polygon=.true.

      return
      end
    
@ Compute the volume of a non-convex polygon of revolution.

@<Functions...@>=
      function polygon_volume(n,x)
      implicit_none_f77
      gi_common                 // Common
      implicit_none_f90
      real polygon_volume       // Function
      integer n                 // Input
      real x[2,0:n]
      integer i                 // Local

      polygon_volume=zero

      if (geometry_symmetry==geometry_symmetry_plane ||
     $     geometry_symmetry==geometry_symmetry_oned ||
     $     geometry_symmetry==geometry_symmetry_plane_hw) then
         do i=0,n-1
            polygon_volume=polygon_volume+(x[1,i]+x[1,i+1])*(x[2,i]-x[2,i+1])
         end do
         polygon_volume=(universal_cell_max[2]-universal_cell_min[2])*polygon_volume/const(2.0)
      else if (geometry_symmetry==geometry_symmetry_cylindrical ||
     $        geometry_symmetry==geometry_symmetry_cyl_hw ||
     $        geometry_symmetry==geometry_symmetry_cyl_section) then
         do i=0,n-1
            polygon_volume=polygon_volume+(x[1,i]^2+x[1,i]*x[1,i+1]+x[1,i+1]^2)*(x[2,i]-x[2,i+1])
         end do
@#if 0
         polygon_volume=PI*polygon_volume/const(3.0)
@#else
         polygon_volume=half*(universal_cell_max[2]-universal_cell_min[2])     
     $                 *polygon_volume/const(3.0)
@#endif
      end if
      
@#if 0
      assert(polygon_volume > zero)
@#endif
      return
      end

@ Temporary space for |decompose_polygon|.

@a

@ Decompose non-convex polygon.

@<Functions...@>=
      subroutine decompose_polygon(n,x,zonearray,mdiv,facearray)

      define_dimen(segment,2)
      define_dimen(vert,0,n)
      define_dimen(vert1,0,n-1)
      define_varp(a,FLOAT,segment,vert)
      define_varp(b,FLOAT,segment,vert1)

      implicit_none_f77
      implicit_none_f90
      integer n,mdiv                                       // Input
      integer zonearray[0:mdiv-1],facearray[0:mdiv]
      real x[2,0:n]
      declare_varp(a)
      declare_varp(b)
      integer i,j,m,k,start,asize
      logical intersect
      @<Memory allocation interface@>
      external self_intersect,check_split,convex_polygon   // External
      logical self_intersect,check_split,convex_polygon

      check(n>=3)
      check(x[1,0] == x[1,n] && x[2,0] == x[2,n]) // Check end points

/*      write(stderr,*) 'Original x'
      do i=0,n
          write(stderr,*) x[1,i],x[2,i]
      end do
*/  

/*
   First attempt at writing out geometry data for use in AVS.
   Note: Scott would like this file to begin with a line containing
   the number of polygons and the total number of points.
*/
@#if 0    
      write(40,*) zonearray[0],n
      do i=1,n
         write(40,*) x[1,i],x[2,i]
      end do
@#endif

      var_alloc(a)
      var_alloc(b)

      m=0
      a[1,m]=x[1,m]
      a[2,m]=x[2,m]
      do i=1,n
         if (x[1,i] != a[1,m] || x[2,i] != a[2,m]) then  
            m++
            a[1,m]=x[1,i]
            a[2,m]=x[2,i]
         end if
      end do
      assert(m>=3)

      intersect=self_intersect(m,a)
      if (intersect) then
         do i=0,n
            write(stderr,*) a[1,i],a[2,i]
         end do
      end if
      check( ! intersect ) // Check the polygon isn't self intersecting

loop: continue

@#if 0
      write(stderr,*) 'Decomposing polygon:'
      do i=0,m
         write(stderr,*) a[1,i],a[2,i]
      end do
@#endif

      if (convex_polygon(m,a)) then
         call process_polygon(m,a,zonearray,mdiv,facearray)
         var_free(a)
         var_free(b)
         return
      end if

      k=3
      do i=0,m-1                // Break off a triangle
         if (check_split(m,a,i,k,b)) then
            start=i
            asize=k
            goto break
         end if
      end do


      write(stderr,*) 'Couldn''t break up the following polygon:'
      do i=0,n
         write(stderr,*) x[1,i],x[2,i]
      end do
      assert(.false.)

break:continue                  // Now try extending the triangle backwards

      do k=asize+1,m-1
         if (! check_split(m,a,start-(k-asize),k,b)) then
            start=start-(k-1-asize)
            asize=k-1
            goto break1
         end if
      end do

break1:continue                 // Now extend forwards

      do k=asize+1,m-1
         if (! check_split(m,a,start,k,b)) then
            asize=k-1
            goto break2
         end if
      end do

break2:continue

      b[1,asize]=b[1,0]
      b[2,asize]=b[2,0]
      assert(check_split(m,a,start,asize,b))

      call process_polygon(asize,b,zonearray,mdiv,facearray)

@#if 0
      write(stderr,*) 'Split off polygon:'
      do i=0,asize
         write(stderr,*) b[1,i],b[2,i]
      end do
@#endif

      j=0
      do i=0,m-asize+1
         b[1,j]=a[1,mod(i+start+asize-1,m)]
         b[2,j]=a[2,mod(i+start+asize-1,m)]
         j=j+1
      end do

      m=m-asize+2
      do i=0,m-1
         a[1,i]=b[1,i]
         a[2,i]=b[2,i]
      end do

      a[1,m]=a[1,0]
      a[2,m]=a[2,0]
/*
      write(stderr,*) 'And leave ',asize
      do i=0,m
         write(stderr,*) a[1,i],a[2,i]
      end do
*/
      goto loop

      end

@ Check tentative split off.

@<Functions...@>=
      function check_split(n,a,start,size,b)
      implicit_none_f77
      implicit_none_f90
      logical check_split       // Function
      integer n,start,size      // Input
      real a[2,0:n]
      real b[2,0:size]          // Output
      integer i,j,l             // Local
      real x[2]
      external convex_polygon,inside_polygon,segment_intersect   // External
      logical convex_polygon,inside_polygon,segment_intersect

      do i=0,size-1             // Copy sides to |b|
         b[1,i]=a[1,mod(i+start+n,n)]
         b[2,i]=a[2,mod(i+start+n,n)]
      end do
      b[1,size]=b[1,0]
      b[2,size]=b[2,0]

      check_split=.false.

      if (b[1,size] == b[1,size-1] && b[2,size] == b[2,size-1]) goto break
      if (!convex_polygon(size,b)) goto break
      do l=start+size,start-2+n
         if (inside_polygon(a[1,mod(l,n)],size,b)) goto break
         x[1]=half*(a[1,mod(l,n)]+a[1,mod(l+1,n)])
         x[2]=half*(a[2,mod(l,n)]+a[2,mod(l+1,n)])
         if (inside_polygon(x,size,b)) goto break
         do j=0,size-1
            if (segment_intersect(b[1,j],a[1,mod(l,n)])) goto break
         end do
      end do
      if (inside_polygon(a[1,mod(start-1+n,n)],size,b)) goto break

      check_split=.true.

break: continue

      return
      end

@ Process a convex polygon.

@<Functions...@>=
      subroutine process_polygon(n,x,zonearray,mdiv,facearray)
      implicit_none_f77
      gi_common
      implicit_none_f90
      integer n,mdiv                                         // Input
      integer zonearray[0:mdiv-1],facearray[0:mdiv]
      real x[2,0:n]
      
      assert(geometry_symmetry==geometry_symmetry_plane ||
     $     geometry_symmetry==geometry_symmetry_oned ||
     $     geometry_symmetry==geometry_symmetry_cylindrical ||
     $     geometry_symmetry==geometry_symmetry_plane_hw ||
     $     geometry_symmetry==geometry_symmetry_cyl_hw ||
     $     geometry_symmetry==geometry_symmetry_cyl_section)
      
      if (geometry_symmetry==geometry_symmetry_oned) then
         assert(mdiv == 1)
         call process_polygon_oned(n,x,zonearray[0])
      else if (geometry_symmetry==geometry_symmetry_plane
     $        || geometry_symmetry==geometry_symmetry_plane_hw) then
         call process_polygon_plane(n,x,zonearray,mdiv,facearray)
      else if (geometry_symmetry==geometry_symmetry_cylindrical
     $        || geometry_symmetry==geometry_symmetry_cyl_hw
     $        || geometry_symmetry==geometry_symmetry_cyl_section) then
         call process_polygon_cylindrical(n,x,zonearray,mdiv,facearray)
      end if
      
      return
      end

@ Process a convex polygon in one-dimensional geometry. This should permit
multiple polygon segments in the second ignorable direction (i.e., $z$),
even though there is no good reason for them to appear. This routine
explicitly defines the cell boundaries where they meet the universal cell.
Polygon segments at constant $z$ are assumed to be coincident with the
universal cell boundaries in that direction.

@<Functions...@>=
      subroutine process_polygon_oned(n,x,zone)

      implicit_none_f77
      gi_common
      implicit_none_f90
      integer n,zone                                       // Input
      real x[2,0:n]
      integer i,cell,face // Local
      real coeff[NCOEFFS],x1[3],x2[3],x3[3],a[3]
      external define_surface,start_cell,                  // External
     $     vector_compare,define_surface_a 
      integer define_surface,start_cell,vector_compare,define_surface_a
      
      cell=start_cell(zone)

      vc_set(a,zero,one,zero)
      call plane(universal_cell_min,a,coeff)
      face=define_surface(coeff,.true.)
      call add_surface(face,cell,.true.)
      call plane(universal_cell_max,a,coeff)
      face=define_surface(coeff,.true.)
      call add_surface(-face,cell,.true.)

      vc_set(a,zero,zero,one)
      call plane(universal_cell_min,a,coeff)
      face=define_surface(coeff,.true.)
      call add_surface(face,cell,.true.)
      call plane(universal_cell_max,a,coeff)
      face=define_surface(coeff,.true.)
      call add_surface(-face,cell,.true.)

      do i=0,n-1
         vc_set(x1,x[1,i],zero,x[2,i])
         vc_set(x2,x[1,i+1],zero,x[2,i+1])
         if (vector_compare(x1,x2)>0) then
            vc_set(x3,x1[1],one,x1[3])
         else
            vc_set(x3,x2[1],one,x2[3])
         end if
         if (x1[3] != x2[3]) then
            call planea(x1,x3,x2,coeff)
            face=define_surface_a(coeff,x1,x2)
            call add_surface(face,cell,.true.)
            if (face>0) then
               vc_copy(x1,surface_points[0,face])
               vc_copy(x2,surface_points[1,face])
            end if
         else
            assert(x1[3] == x2[3])
            assert((x1[3] == universal_cell_min[3])
     $           || (x1[3] == universal_cell_max[3]))
         end if
      end do

      return
      end

@ Process a convex polygon in plane geometry.

@<Functions...@>=
      subroutine process_polygon_plane(n,x,zonearray,mdiv,facearray)

      define_dimen(divs,0,mdiv-1)
@#if 0
      define_varp(cella,FLOAT,divs)
@#endif
      define_varp(cella,INT,divs)

      implicit_none_f77
      gi_common
      implicit_none_f90
      integer n,mdiv                                         // Input
      integer zonearray[0:mdiv-1],facearray[0:mdiv]
      real x[2,0:n]
      integer i,m,face // Local
      real coeff[NCOEFFS],x1[3],x2[3],x3[3],a[3]
      declare_varp(cella)
      @<Memory allocation interface@>
      external define_surface,start_cell,vector_compare,define_surface_a // External
      integer define_surface,start_cell,vector_compare,define_surface_a
      
      var_alloc(cella)
      do m=0,mdiv-1
         cella[m]=start_cell(zonearray[m])
      end do
      if (geometry_symmetry == geometry_symmetry_plane) then
         assert((mdiv==1) && (facearray[0] == facearray[1])) 
         vc_set(a,zero,one,zero)
         call plane(universal_cell_min,a,coeff)
         face=define_surface(coeff,.true.)
         call add_surface(face,cella[0],.true.)
         call plane(universal_cell_max,a,coeff)
         face=define_surface(coeff,.true.)
         call add_surface(-face,cella[0],.true.)
      else
         do m=0,mdiv-1
            call add_surface(facearray[m],cella[m],.true.)
            call add_surface(-facearray[m+1],cella[m],.true.)
         end do
      end if

      do i=0,n-1
         vc_set(x1,x[1,i],zero,x[2,i])
         vc_set(x2,x[1,i+1],zero,x[2,i+1])
         if (vector_compare(x1,x2)>0) then
            vc_set(x3,x1[1],one,x1[3])
         else
            vc_set(x3,x2[1],one,x2[3])
         end if
         call planea(x1,x3,x2,coeff)
         face=define_surface_a(coeff,x1,x2)
         do m=0,mdiv-1
            call add_surface(face,cella[m],.true.)
         end do
         if (face>0) then
            vc_copy(x1,surface_points[0,face])
            vc_copy(x2,surface_points[1,face])
         end if
      end do
      
      var_free(cella)

      return
      end

@ Process a convex polygon in cylindrical geometry.

@<Functions...@>=
      subroutine process_polygon_cylindrical(n,x,zonearray,mdiv,facearray)

      define_var(k,INT,vert1)
      define_var(type,INT,vert1)
      define_var(z,FLOAT,vert1)

      implicit_none_f77
      gi_common
      implicit_none_f90
      integer n,mdiv                                           // Input
      integer zonearray[0:mdiv-1],facearray[0:mdiv]
      real x[2,0:n]
      integer i,j,ia,ja,m,leftmin,leftmax,rightmin,rightmax,surf_type,kdiv // Local
      real zmin,zmax,zmina,zmaxa,ztarget,guardmin,guardmax,cutmin,cutmax,
     $     coeff[NCOEFFS],x1[3],x2[3],apex[3],a[3],x0[3]
      declare_varp(k)
      declare_varp(type)
      declare_varp(z)
      declare_varp(cella)
      @<Memory allocation interface@>
      external define_surface,start_cell,define_surface_a // External
      integer define_surface,start_cell,define_surface_a
      
      leftmin=0
      leftmax=0
      zmin=x[2,0]
      zmax=x[2,0]

      do i=1,n-1                // Look for minimum and maximum $z$ values.
         if (x[2,i] < zmin) then
            leftmin=i
            zmin=x[2,i]
         else if (x[2,i] > zmax) then
            leftmax=i
            zmax=x[2,i]
         end if
      end do

      check(leftmax != leftmin)
      check(zmax > zmin)

      rightmin = leftmin
      rightmax = leftmax

      if (leftmax < leftmin) then
         leftmax = leftmax+n     // |do i=leftmin,leftmax| goes along left boundary
      else
         rightmin = leftmin+n     // |do i=rightmin,rightmax,-1| goes along right boundary
      end if

      var_alloc(k)
      var_alloc(type)
      var_alloc(z)
      x1[2]=zero
      x2[2]=zero
      do i=0,n-1
         x1[1]=x[1,i]
         x1[3]=x[2,i]
         x2[1]=x[1,i+1]
         x2[3]=x[2,i+1]
         call conea(x1,x2,coeff,surf_type,apex)
         k[i]=define_surface_a(coeff,x1,x2)
         if (k[i]>0) then
            vc_copy(x1,surface_points[0,k[i]])
            vc_copy(x2,surface_points[1,k[i]])
         end if
         type[i]=surf_type
         z[i] = apex[3]
      end do

      vc_set(a,zero,zero,one)
      vc_set(x0,zero,zero,zero)

      i=leftmin
      kdiv=0                    // No dividing plane yet

      var_alloc(cella)

loop: continue                  // Loop over cells

      do m=0,mdiv-1
         cella[m] = start_cell(zonearray[m]) // Start a new cell
      end do
@#if 0
      if (m>1) then       // A typo?
@#else
      if ((mdiv > 1) || ((mdiv == 1) 
     $         && (geometry_symmetry == geometry_symmetry_cyl_section))) then
@#endif
         do m=0,mdiv-1
            assert(facearray[m] != facearray[m+1])
            call add_surface(facearray[m],cella[m],.true.)
            call add_surface(-facearray[m+1],cella[m],.true.)
         end do
      end if
      if (kdiv != 0) then
         do m=0,mdiv-1
@#if 0
            call add_surface(kdiv,cella[n],.true.)
@#endif
            call add_surface(kdiv,cella[m],.true.)
         end do
         guardmin = guardmax
      else
         guardmin = -geom_infinity
      end if
      ia=mod(i,n)
      zmina=x[2,ia]             // Minimum $z$ for this cell
      zmaxa=x[2,ia]             // Maximum $z$ for this cell
      guardmax = geom_infinity
      ztarget = geom_infinity

loop1:continue                  // Loop over left segments
      
      if (i == leftmax || x[2,ia+1] > ztarget || z[ia] > zmina && z[ia] < zmaxa ) then
         check( zmina >= zmin && zmaxa <= zmax && zmaxa > zmina )
         if (i < leftmax) then
            x0[3] = x[2,ia]
            call plane(x0,a,coeff)
            kdiv=define_surface(coeff,.false.)
            do m=0,mdiv-1
               call add_surface(-kdiv,cella[m],.true.)
            end do
            guardmax = x0[3]
         end if
         cutmax = geom_infinity
         cutmin = -geom_infinity
         do j=rightmax,rightmin-1
            ja=mod(j,n)
            if ( ! ( 
     $           x[2,ja] < zmina && x[2,ja+1] <= zmina ||
     $           x[2,ja] <= zmina && x[2,ja+1] < zmina ||
     $           x[2,ja] > zmaxa && x[2,ja+1] >= zmaxa ||
     $           x[2,ja] >= zmaxa && x[2,ja+1] > zmaxa
     $           ) ) then
               do m=0,mdiv-1
                  call add_surface(k[ja],cella[m],.true.)
               end do
               if (type[ja] == 1) then
                  check( z[ja] > zmaxa || z[ja] < zmina )
                  if ( z[ja] > zmaxa ) then
                     cutmax = min(cutmax, z[ja])
                  else
                     cutmin = max(cutmin, z[ja])
                  end if
               else if (type[ja] == 0) then
                  assert( j == rightmax || j == rightmin-1 )
                  if (j == rightmax) then
                     guardmax = min(guardmax, z[ja])
                  else if (j == rightmin-1) then
                     guardmin = max(guardmin, z[ja])
                  end if
               end if
            end if
         end do
         if (cutmin > guardmin) then
            x0[3] = cutmin
            call plane(x0,a,coeff)
            do m=0,mdiv-1
               call add_surface(define_surface(coeff,.false.),cella[m],.false.)
            end do
         end if
         if (cutmax < guardmax) then
            x0[3] = cutmax
            call plane(x0,a,coeff)
            do m=0,mdiv-1
               call add_surface(-define_surface(coeff,.false.),cella[m],.false.)
            end do
         end if
         if (i == leftmax) then
            check( zmaxa == zmax )
            goto break
         else
            goto loop
         end if
      end if
            
      zmaxa=x[2,ia+1]
      do m=0,mdiv-1
         call add_surface(k[ia],cella[m],.true.)
      end do
      
      if (type[ia] == 0) then
         if (x[1,ia] > x[1,ia+1]) then
            guardmin = z[ia]
         else
            guardmax = z[ia]
         end if
      else if (type[ia] == 1) then
         if (z[ia] > zmaxa) then
            ztarget = min(ztarget,z[ia])
         end if
      end if

      i=i+1
      ia=mod(i,n)
      goto loop1

break:continue

      var_free(k)
      var_free(type)
      var_free(z)

      var_free(cella)

      return
      end
      
@ Set minimum and maximum points on a zone.

@<Functions...@>=
      subroutine set_zn_min_max(n,x,zone,init)
      implicit_none_f77
      zn_common
      implicit_none_f90
      integer n,zone       // Input
      real x[2,0:n]
      logical init

      integer i            // Local


      if (init) then
         vc_set(zone_min[zone],x[1,0],zero,x[2,0])
         vc_set(zone_max[zone],x[1,0],zero,x[2,0])
      end if

      do i=0,n
         zone_min[zone][1]=min(zone_min[zone][1],x[1,i])
         zone_min[zone][3]=min(zone_min[zone][3],x[2,i])
         zone_max[zone][1]=max(zone_max[zone][1],x[1,i])
         zone_max[zone][3]=max(zone_max[zone][3],x[2,i])
      end do

      return
      end
         
@* References.

\bibliographystyle{report}
\bibliography{../../degas}

@* INDEX.

