% $Id: 62083b1d1f3e52758339ba877f11083410bec6d6 $
\Title{geometry utilities}


@* Introduction.

\ID{$Id: 62083b1d1f3e52758339ba877f11083410bec6d6 $}

Geometry utility routines for degas.

@m FILE 'geomutils.web'

@I macros.hweb

@I geomint.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>
@#if CRAY && !DEBUG
@o    geomutils.il.f
@#endif
      @<Inline Procedures@>

@* Matrix manipulations.  The transformation matrix has the form
\begin{equation}
\tens M = \left(
\begin{array}{cccc}
a_{11} & a_{12} & a_{13} & t_1 \\
a_{21} & a_{22} & a_{23} & t_2 \\
a_{31} & a_{32} & a_{33} & t_3 \\
 0 & 0 & 0 & 1
\end{array} \right).
\end{equation}
Positions transform with $\vect x = [x_1, x_2, x_3, 1]$.  Velocities
transform with $\vect v = [v_1, v_2, v_3, 0]$.

@ Compose two transforms, $\tens T = \tens M \cdot \tens N$.  $\tens T$ may
occupy the same memory as $\tens M$ or $\tens N$.

@<Inline...@>=
      subroutine compose(m,n,t)
      implicit_none_f77
      implicit_none_f90
      real m[3,4],n[3,4]        // Input
      real t[3,4]               // Output
      integer i,j               // Local
      real temp[3,4]

      do i=1,3
         do j=1,4
            temp[i,j]=m[i,1]*n[1,j]+m[i,2]*n[2,j]+m[i,3]*n[3,j]
         end do
         temp[i,4]=temp[i,4]+m[i,4]
      end do

      do i=1,3
         do j=1,4
            t[i,j]=temp[i,j]
         end do
      end do

      return
      end

@ Determinant of a transform; returns $\abs{\tens M}$.

@<Inline...@>=
      function determinant(m)
      implicit_none_f77
      implicit_none_f90
      real determinant          // Function
      real m[3,4]               // Input

      determinant=m[1,1]*(m[2,2]*m[3,3]-m[2,3]*m[3,2])
     $     -m[1,2]*(m[2,1]*m[3,3]-m[2,3]*m[3,1])
     $     +m[1,3]*(m[2,1]*m[3,2]-m[2,2]*m[3,1])

      return
      end

@ Invert a transforms, $\tens N = \tens M^{-1}$.  $\tens N$ and $\tens M$ can
share the same memory.

@<Functions...@>=
      subroutine invert(m,n)
      implicit_none_f77
      implicit_none_f90
      real m[3,4]               // Input
      real n[3,4]               // Output
      integer i,j               // Local
      real det,temp[3,4]
      external determinant      // External
      real determinant

      det=determinant(m)
      assert(det != zero)

      temp[1,1]=m[2,2]*m[3,3]-m[2,3]*m[3,2]
      temp[1,2]=m[1,3]*m[3,2]-m[1,2]*m[3,3]
      temp[1,3]=m[1,2]*m[2,3]-m[1,3]*m[2,2]
      temp[1,4]=(m[1,3]*m[2,2]-m[1,2]*m[2,3])*m[3,4]
     $     +(m[1,2]*m[2,4]-m[1,4]*m[2,2])*m[3,3]
     $     +(m[1,4]*m[2,3]-m[1,3]*m[2,4])*m[3,2]
      temp[2,1]=m[2,3]*m[3,1]-m[2,1]*m[3,3]
      temp[2,2]=m[1,1]*m[3,3]-m[1,3]*m[3,1]
      temp[2,3]=m[1,3]*m[2,1]-m[1,1]*m[2,3]
      temp[2,4]=(m[1,1]*m[2,3]-m[1,3]*m[2,1])*m[3,4]
     $     +(m[1,4]*m[2,1]-m[1,1]*m[2,4])*m[3,3]
     $     +(m[1,3]*m[2,4]-m[1,4]*m[2,3])*m[3,1]
      temp[3,1]=m[2,1]*m[3,2]-m[2,2]*m[3,1]
      temp[3,2]=m[1,2]*m[3,1]-m[1,1]*m[3,2]
      temp[3,3]=m[1,1]*m[2,2]-m[1,2]*m[2,1]
      temp[3,4]=(m[1,2]*m[2,1]-m[1,1]*m[2,2])*m[3,4]
     $     +(m[1,1]*m[2,4]-m[1,4]*m[2,1])*m[3,2]
     $     +(m[1,4]*m[2,2]-m[1,2]*m[2,4])*m[3,1]

      do i=1,3
         do j=1,4
            n[i,j]=temp[i,j]/det
         end do
      end do

      return
      end

@* Transform a surface.  If $\vect x' = \tens M \cdot \vect x$, and
|coeff| describes a surface in the primed coordinate system, then return
|new_coeff| describing the same surface in the unprimed coordinate system.
|new_coeff| can share memory with |coeff|.

@<Functions...@>=
      subroutine transform_face(coeff,m,new_coeff)
      implicit_none_f77
      implicit_none_f90
      real coeff[NCOEFFS],m[3,4] // Input
      real new_coeff[NCOEFFS] // Output
      real temp[NCOEFFS]  // Local
      integer i

      temp[c0] = m[3,4]^2*coeff[czz]+m[3,4]*coeff[cz]+
     $     m[2,4]*m[3,4]*coeff[cyz]+m[2,4]^2*coeff[cyy]+
     $     m[2,4]*coeff[cy]+m[1,4]*m[3,4]*coeff[cxz]+
     $     m[1,4]*m[2,4]*coeff[cxy]+m[1,4]^2*coeff[cxx]+
     $     m[1,4]*coeff[cx]+coeff[c0]
      temp[cx] = 2*m[3,1]*m[3,4]*coeff[czz]+
     $     m[3,1]*coeff[cz]+
     $     (m[2,1]*m[3,4]+m[2,4]*m[3,1])*coeff[cyz]+
     $     2*m[2,1]*m[2,4]*coeff[cyy]+m[2,1]*coeff[cy]+
     $     (m[1,1]*m[3,4]+m[1,4]*m[3,1])*coeff[cxz]+
     $     (m[1,1]*m[2,4]+m[1,4]*m[2,1])*coeff[cxy]+
     $     2*m[1,1]*m[1,4]*coeff[cxx]+m[1,1]*coeff[cx]
      temp[cy] = 2*m[3,2]*m[3,4]*coeff[czz]+
     $     m[3,2]*coeff[cz]+
     $     (m[2,2]*m[3,4]+m[2,4]*m[3,2])*coeff[cyz]+
     $     2*m[2,2]*m[2,4]*coeff[cyy]+m[2,2]*coeff[cy]+
     $     (m[1,2]*m[3,4]+m[1,4]*m[3,2])*coeff[cxz]+
     $     (m[1,2]*m[2,4]+m[1,4]*m[2,2])*coeff[cxy]+
     $     2*m[1,2]*m[1,4]*coeff[cxx]+m[1,2]*coeff[cx]
      temp[cz] = 2*m[3,3]*m[3,4]*coeff[czz]+
     $     m[3,3]*coeff[cz]+
     $     (m[2,3]*m[3,4]+m[2,4]*m[3,3])*coeff[cyz]+
     $     2*m[2,3]*m[2,4]*coeff[cyy]+m[2,3]*coeff[cy]+
     $     (m[1,3]*m[3,4]+m[1,4]*m[3,3])*coeff[cxz]+
     $     (m[1,3]*m[2,4]+m[1,4]*m[2,3])*coeff[cxy]+
     $     2*m[1,3]*m[1,4]*coeff[cxx]+m[1,3]*coeff[cx]
      temp[cxx] = m[3,1]^2*coeff[czz]+
     $     m[2,1]*m[3,1]*coeff[cyz]+m[2,1]^2*coeff[cyy]+
     $     m[1,1]*m[3,1]*coeff[cxz]+m[1,1]*m[2,1]*coeff[cxy]+
     $     m[1,1]^2*coeff[cxx]
      temp[cyy] = m[3,2]^2*coeff[czz]+
     $     m[2,2]*m[3,2]*coeff[cyz]+m[2,2]^2*coeff[cyy]+
     $     m[1,2]*m[3,2]*coeff[cxz]+m[1,2]*m[2,2]*coeff[cxy]+
     $     m[1,2]^2*coeff[cxx]
      temp[czz] = m[3,3]^2*coeff[czz]+
     $     m[2,3]*m[3,3]*coeff[cyz]+m[2,3]^2*coeff[cyy]+
     $     m[1,3]*m[3,3]*coeff[cxz]+m[1,3]*m[2,3]*coeff[cxy]+
     $     m[1,3]^2*coeff[cxx]
      temp[cxy] = 2*m[3,1]*m[3,2]*coeff[czz]+
     $     (m[2,1]*m[3,2]+m[2,2]*m[3,1])*coeff[cyz]+
     $     2*m[2,1]*m[2,2]*coeff[cyy]+
     $     (m[1,1]*m[3,2]+m[1,2]*m[3,1])*coeff[cxz]+
     $     (m[1,1]*m[2,2]+m[1,2]*m[2,1])*coeff[cxy]+
     $     2*m[1,1]*m[1,2]*coeff[cxx]
      temp[cyz] = 2*m[3,2]*m[3,3]*coeff[czz]+
     $     (m[2,2]*m[3,3]+m[2,3]*m[3,2])*coeff[cyz]+
     $     2*m[2,2]*m[2,3]*coeff[cyy]+
     $     (m[1,2]*m[3,3]+m[1,3]*m[3,2])*coeff[cxz]+
     $     (m[1,2]*m[2,3]+m[1,3]*m[2,2])*coeff[cxy]+
     $     2*m[1,2]*m[1,3]*coeff[cxx]
      temp[cxz] = 2*m[3,1]*m[3,3]*coeff[czz]+
     $     (m[2,1]*m[3,3]+m[2,3]*m[3,1])*coeff[cyz]+
     $     2*m[2,1]*m[2,3]*coeff[cyy]+
     $     (m[1,1]*m[3,3]+m[1,3]*m[3,1])*coeff[cxz]+
     $     (m[1,1]*m[2,3]+m[1,3]*m[2,1])*coeff[cxy]+
     $     2*m[1,1]*m[1,3]*coeff[cxx]

      do i=1,NCOEFFS
         new_coeff[i]=temp[i]
      end do

      return
      end

@* Some common transformations.  The identity transformation.

@<Inline...@>=
      subroutine init_identity(m)
      implicit_none_f77
      implicit_none_f90
      real m[3,4]               // Output
      integer i,j               // Local

      do i=1,3
         do j=1,4
            m[i,j]=zero
         end do
         m[i,i]=one
      end do

      return
      end

@ The remaining transformations all compose with the argument $\tens M$.  A
translation.  The origin of the new coordinate system is at $\vect x_0$.

@<Inline...@>=
      subroutine geom_translate(x0,m)
      implicit_none_f77
      implicit_none_f90
      real x0[3]                // Input
      real m[3,4]               // Input/Output
      integer i,j               // Local
      real temp[3,4]

      do i=1,3
         do j=1,3
            temp[i,j]=zero
         end do
         temp[i,i]=one
         temp[i,4]=-x0[i]
      end do

      call compose(temp,m,m)

      return
      end

@ A scaling.  Scale each coordinate by $a$.

@<Inline...@>=
      subroutine geom_scale(a,m)
      implicit_none_f77
      implicit_none_f90
      real a                    // Input
      real m[3,4]               // Input/Output
      integer i,j               // Local
      real temp[3,4]

      assert(a != zero)

      do i=1,3
         do j=1,4
            temp[i,j]=zero
         end do
         temp[i,i]=const(1.0)/a
      end do

      call compose(temp,m,m)

      return
      end

@ Another scaling.  Scale the $i$th coordinate by $a_i$.

@<Inline...@>=
      subroutine geom_scalea(a,m)
      implicit_none_f77
      implicit_none_f90
      real a[3]                 // Input
      real m[3,4]               // Input/Output
      integer i,j               // Local
      real temp[3,4]

      do i=1,3
         assert(a[i] != zero)
         do j=1,4
            temp[i,j]=zero
         end do
         temp[i,i]=const(1.0)/a[i]
      end do

      call compose(temp,m,m)

      return
      end

@ A rotation by  $\theta$ right-handedly about $\vect v$.  The expression is
\def\vv{\hat{\vect v}}
\begin{equation}
\tens M\cdot \vect x = \vv\vv\cdot \vect x +
  \cos\theta  (\tens I - \vv\vv)\cdot\vect x -
  \sin\theta \vv\times \vect x.
\end{equation}

@<Functions...@>=
      subroutine geom_rotate(theta,v,m)
      implicit_none_f77
      implicit_none_f90
      real theta,v[3]           // Input
      real m[3,4]               // Input/Output
      integer i,j,k             // Local
      real vh[3],c,s,temp[3,4]
      vc_decls

      vc_unit(v,vh)
      c=cos(theta)
      s=two*sin(half*theta)^2   // accurate calculation of $1-\cos\theta$

      do i=1,3
         do j=1,3
            temp[i,j]=s*vh[i]*vh[j]
         end do
         temp[i,i]=c+temp[i,i]
         temp[i,4]=zero         // no translation component
      end do

/* If $\tens M\cdot \vect x = \vv\times \vect x$, then
$M_{ik}=\epsilon_{ijk}v_j$. */

      s=-sin(theta)

      do i=1,3
         j=mod(i,3)+1
         k=mod(j,3)+1           // $i,j,k$ form a positive sequence
         temp[i,k]=temp[i,k]+s*vh[j] // $\epsilon_{ijk}=1$
         temp[i,j]=temp[i,j]-s*vh[k] // $\epsilon_{ikj}=-1$
      end do

      call compose(temp,m,m)

      return
      end

@ A rotation to bring $\hat{\vect z}$ parallel to $\vect a$.

@<Functions...@>=
      subroutine geom_rotatea(a,m)
      implicit_none_f77
      implicit_none_f90
      real a[3]                 // Input
      real m[3,4]               // Input/Output
      real theta,z[3],v[3]      // Local
      vc_decls

      assert( vc_abs(a) > zero )
      theta=atan2(sqrt(a[1]^2+a[2]^2),a[3]) // Angle to rotate by

      z[1]=zero
      z[2]=zero
      z[3]=one
      vc_cross(z,a,v)
      if (vc_abs(v) == zero) then
         v[1]=one
      end if
      call geom_rotate(theta,v,m)

      return
      end

@ A reflection in a plane given by |coeff|.
      
@<Functions...@>=
      subroutine reflect_plane(coeff,m)
      implicit_none_f77
      implicit_none_f90
      real coeff[NCOEFFS]       // Input
      real m[3,4]               // Output
      integer i,j               // Local
      
      assert(coeff[cxx]==zero &&
     $     coeff[cyy]==zero &&
     $     coeff[czz]==zero &&
     $     coeff[cxy]==zero &&
     $     coeff[cyz]==zero &&
     $     coeff[cxz]==zero)

      m[1,1] = coeff[cz]^2+coeff[cy]^2-coeff[cx]^2
      m[1,2] = -two*coeff[cx]*coeff[cy]
      m[1,3] = -two*coeff[cx]*coeff[cz]
      m[1,4] = -two*coeff[c0]*coeff[cx]
      m[2,1] = -two*coeff[cx]*coeff[cy]
      m[2,2] = coeff[cz]^2-coeff[cy]^2+coeff[cx]^2
      m[2,3] = -two*coeff[cy]*coeff[cz]
      m[2,4] = -two*coeff[c0]*coeff[cy]
      m[3,1] = -two*coeff[cx]*coeff[cz]
      m[3,2] = -two*coeff[cy]*coeff[cz]
      m[3,3] = -coeff[cz]^2+coeff[cy]^2+coeff[cx]^2
      m[3,4] = -two*coeff[c0]*coeff[cz]

      assert(coeff[cz]^2+coeff[cy]^2+coeff[cx]^2 > zero)
      do i=1,3
         do j=1,4
            m[i,j]=m[i,j]/(coeff[cz]^2+coeff[cy]^2+coeff[cx]^2)
         end do
      end do

      return
      end

@* Some utility routines. Compare vectors to produce a ranking.  Return
$-1$, $0$, or $1$ depending on whether $\vect a < \vect b$, $\vect a =
\vect b$, or $\vect a > \vect b$, where $=$ stands for equality and $<$ and
$>$ are according to some arbitrary metric (lexicographical ordering).  We
have |vector_compare(a,b) = -vector_compare(b,a)|.

@<Functions...@>=
      function vector_compare(a,b)
      implicit_none_f77
      implicit_none_f90
      integer vector_compare    // Function
      real a[3],b[3]            // Input
      integer i

      do i=1,3
         if (a[i] < b[i]) then
            vector_compare=-1
            return
         else if (a[i] > b[i]) then
            vector_compare=1
            return
         end if
      end do

      vector_compare=0
      return

      end

@ Comparing surfaces for equality.  Normalize surface so that the largest
element (in absolute value) is unity.

@<Inline...@>=
      subroutine surface_normalize(coeff)
      implicit_none_f77
      implicit_none_f90
      real coeff[NCOEFFS]   // Input/Output
      real temp                 // Local
      integer i

      temp=zero

      do i=1,NCOEFFS
         temp=max(temp,abs(coeff[i]))
      end do

      assert(temp>zero)

      do i=1,NCOEFFS
         coeff[i]=coeff[i]/temp
      end do

      return
      end

@ Check for equality.  In the case of equality, set |orientation| to $1$ if
the orientation is the same and $-1$ otherwise.

@<Functions...@>=
      function surface_equal(coeff1,coeff2,orientation)
      implicit_none_f77
      implicit_none_f90
      logical surface_equal     // Function
      real coeff1[NCOEFFS],coeff2[NCOEFFS] // Input
      integer orientation       // Output
      real temp                 // Local
      logical start
      integer i

      start=.true.
      surface_equal=.false.

      do i=1,NCOEFFS
         if (start) then
            if (coeff1[i] == coeff2[i]) then
               if (coeff1[i] != zero) then
                  temp=one
                  start=.false.
               end if
            else if (coeff1[i] == -coeff2[i]) then
               temp=-one
               start=.false.
            else
               return
            end if
         else
            if (coeff1[i] != temp*coeff2[i]) then
               return
            end if
         end if
      end do

      assert( !start )
      orientation=int(temp)
      surface_equal=.true.

      return
      end      

@* INDEX.

