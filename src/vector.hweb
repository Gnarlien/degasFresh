@* Header macros for vector.
% $Id: 303e0d71f24c53b987960599664578f61cecece7 $

@ Macro definitions.

\ID{$Id: 303e0d71f24c53b987960599664578f61cecece7 $}

@f vc_decls integer
@m vc_decls real vector_temp[3]

@m vc_difference(x,y,z)
      $DO(I,1,3) {
          z[I]=x[I]-y[I];
      }

@m vc_add(x,y,z)
      $DO(I,1,3) {
          z[I]=x[I]+y[I];
      }

@m vc_copy(x,y) vc_copy1(x,y)
@m vc_copy1(x,y)
      $DO(I,1,3) {
          y[I]=x[I];
      }

@m vc_product(x,y)
      (x[1]*y[1]+x[2]*y[2]+x[3]*y[3])

@m vc_abs(x)
      sqrt(x[1]^2+x[2]^2+x[3]^2)

@m vc_abs(x)
      sqrt(vc_abs2(x))

@m vc_abs2(x)
      (x[1]^2+x[2]^2+x[3]^2)

@m vc_equal(x,y)
      (x[1] == y[1] && x[2] == y[2] && x[3] == y[3])

@m vc_cross(x,y,z)
      vector_temp[1]=x[2]*y[3]-x[3]*y[2];
      vector_temp[2]=x[3]*y[1]-x[1]*y[3];
      z[3]=x[1]*y[2]-x[2]*y[1];
      z[1]=vector_temp[1];
      z[2]=vector_temp[2]@;

@m vc_unit(x,y)
      vector_temp[1]=vc_abs(x);
      assert(vector_temp[1] > zero);
      vc_scale(one/vector_temp[1],x,y)@;

@m vc_scale(a,x,y)
      $DO(I,1,3) {
         y[I]=(a)*x[I];
      }

@m vc_set(x,a,b,c) x[1]=a;x[2]=b;x[3]=c@;

@m vc_xvt(x,v,t,z)
      $DO(I,1,3) {
         z[I]=x[I]+v[I]*(t);
      }

@m vc_swap(x,y)
      $DO(I,1,3) {
         vector_temp[I]=x[I];
         x[I]=y[I];
         y[I]=vector_temp[I];
      }

@m vc_expand(x)
      x[1],x[2],x[3]

@m vc_dummy(x)
      x

@m vc_decl(x)
      real x[3] @;

@m vc_args(x)
      x[1]

