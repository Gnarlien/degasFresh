@* Read actual file names and map to corresponding symbols.

See also documentation in |readfilenames.hweb|.

To add more symbolic filenames, first make the changes described in
|readfilenames.hweb|. Then, add a new assignment statement 
to the \verb+elseif+ block.

\ID{$Id: f1962acca763ade9b8c1476045c2867da502b2c3 $}

@m FILE 'readfilenames.web'
@I macros.hweb
@I readfilenames.hweb
@I sysdep.hweb
@I string.hweb

@f namelist integer
@ The unnamed module.

@a
      @<Functions and Subroutines@>
@ The main program

@<Functions...@>=

      subroutine readfilenames
      implicit_none_f77
      rf_common
      implicit_none_f90
      
      character*FILELEN filename ,sym_name	
      character*LINELEN line
      integer length,p,b,e,i // Local
      @<Memory allocation interface@>
      st_decls
/* 
   This is hard coded for now, for want of a better means 
*/
      filename ='degas2.in'
      open(unit=diskin,file=filename,status='old',form='formatted')
/* 
   Read the file containing filenames 
*/
      var_alloc(filenames_array)
      do i=1,filenames_max
         filenames_array[i]=char_undef
      end do
loop:      if (! read_string(diskin,line,length) ) goto eof 
      assert(length<=len(line))

      length=parse_string(line(:length))
      p=0
      assert( next_token(line,b,e,p) )
      sym_name = line(b:e)
      assert( next_token(line,b,e,p) )
      
      if ( sym_name == 'elementsfile') then
         filenames_array[elementsfile]  = line(b:e)
      elseif ( sym_name == 'backgroundfile') then
         filenames_array[backgroundfile] = line(b:e)
      elseif ( sym_name == 'testfile') then 
         filenames_array[testfile] = line(b:e)
      elseif ( sym_name == 'geometryfile') then
         filenames_array[geometryfile] = line(b:e)
      elseif ( sym_name == 'problemfile')  then
         filenames_array[problemfile] =line(b:e)
      elseif ( sym_name == 'reactionfile') then
         filenames_array[reactionfile] = line(b:e)
      elseif ( sym_name == 'speciesfile')  then
         filenames_array[speciesfile] = line(b:e)
      elseif ( sym_name == 'aladinfile')  then
         filenames_array[aladinfile] = line(b:e)
      elseif ( sym_name == 'aladoutfile')  then
         filenames_array[aladoutfile] = line(b:e)
      elseif ( sym_name == 'elements_infile')  then
         filenames_array[elements_infile] = line(b:e)
      elseif ( sym_name == 'problem_infile')  then
         filenames_array[problem_infile] = line(b:e)
      elseif ( sym_name == 'reaction_infile')  then
         filenames_array[reaction_infile] = line(b:e)
      elseif ( sym_name == 'species_infile')  then
         filenames_array[species_infile] = line(b:e)
      elseif ( sym_name == 'materials_infile')  then
         filenames_array[materials_infile] = line(b:e)
      elseif ( sym_name == 'materialsfile')  then
         filenames_array[materialsfile] = line(b:e)
      elseif ( sym_name == 'pmi_infile')  then
         filenames_array[pmi_infile] = line(b:e)
      elseif ( sym_name == 'pmifile')  then
         filenames_array[pmifile] = line(b:e)
      elseif ( sym_name == 'cramdproblemfile') then
         filenames_array[cramdproblemfile] = line(b:e)
      elseif ( sym_name == 'tallyfile') then
         filenames_array[tallyfile] = line(b:e)
      elseif ( sym_name == 'outputfile') then
         filenames_array[outputfile] = line(b:e)
      elseif ( sym_name == 'oldsourcefile') then
         filenames_array[oldsourcefile] = line(b:e)
      elseif ( sym_name == 'tally_infile') then
         filenames_array[tally_infile] = line(b:e)
      elseif ( sym_name == 'snapshotfile') then
         filenames_array[snapshotfile] = line(b:e)
      else 
         assert('Unknown symbolic name' == ' ')
      endif

      goto loop
eof:  continue
      close(diskin)

      return
      end

@* INDEX.


