% $Id: 6dfade0c9aac3f0e7bb228fa63dce58d9b656c03 $
\Title{sourcetest}

@* Test source sampling routines. 

\ID{$Id: 6dfade0c9aac3f0e7bb228fa63dce58d9b656c03 $}

This program consists of two 
primary pieces:
\begin{enumerate}
  \item Test of the sampling of the source segments within a group 
(called the ``segment test''),
  \item Test of the sampling of particles from a given source segment
(indicated below by ``velocity test'').
\end{enumerate}

|sourcetest| can only be run 
after the problem and background netCDF files have 
been generated. Only the sources specified in those files can be tested.

\section*{Segment Test}

The objective of the segment test is to verify that the distribution 
of sampled flights corresponds to the input current distribution
(i.e., as specified by the input |source_current| array). This test
is carried out on only source group at a time. The code asks the user
for that source group number as well as the number of samples to be
used in the test:
\begin{verbatim}
 Enter index for a source group, 1 to   2 And number of samples
\end{verbatim}
The user's response should be a pair of integers, with the first being
between the indicated limits (the upper bound being the number
of source groups in the problem, |so_grps|). For the second, any
number larger than 1 is valid. A useful number would be one comparable
to the number of flights expected to be used for that group in the
run of DEGAS 2.

The output from |sourcetest| is written to a file in the run directory called 
\verb+sourcetest.out+. 

The first section describes the results of the segment test. For example,
\begin{verbatim}
    For source group =   1
   Seg  Ptr    Weight      Rel.Wt.   Rel.Curr.
    1   234  0.0000E+00  0.0000E+00  2.9232E-02
    2   233  5.0000E+00  5.0000E-02  2.7951E-02
    3   232  4.0000E+00  4.0000E-02  2.6836E-02
\end{verbatim}
\vdots
\begin{verbatim}
   30   205  6.0000E+00  6.0000E-02  4.3854E-02
   31   204  5.0000E+00  5.0000E-02  4.5339E-02
   32   203  5.0000E+00  5.0000E-02  4.8014E-02
   Minimum
  Rel.Curr.   Num. Points    Chi Sqd./Num.Pts.    Prob.
   1.0E-02          32            0.988628      0.484895
\end{verbatim}

The first line identifies the source group. The columns are:
\begin{description}
  \item[Seg] The source segment number. This will just be an enumeration
of the segments in the group.
  \item[Ptr] A pointer from each segment to its corresponding geometry
element. For a surface source, the pointer provides a sector number.
For a volume source, it corresponds to a zone number.
  \item[Weight] The total weight sampled from each segment during the
test. If the relative weight (|source_segment_rel_wt|) is 1, this is
just the number of flights sampled.
  \item[Rel.Wt.] Is the sampled weight divided by the total weight
(the number of samples).
  \item[Rel.Curr.] Is the current on each segment (|source_current|) divided
by the total source current for the group (|so_tot_curr|).
\end{description}

If the sampling routines are working correctly, the \verb+Rel.Wt.+ column
will smoothly approach the \verb+Rel.Curr.+ column as the number of samples
approaches infinity. The code attempts to quantify this agreement by
evaluating a $\chi^{2}$ expression (e.g., see Bevington, {\em Data Reduction
and Error Analysis for the Physical Sciences}),
\begin{equation}
\chi^{2} = \sum_{i=1}^{N_{\rm seg}} 
\frac{(w_{i} - w_{\rm tot} p_{i})^{2}}{w_{\rm tot} p_{i}},
\end{equation}
where $N_{\rm seg}$ is the number of source segments, $w_{i}$ is the
weight sampled on the $i$th segment (\verb+Weight+ column), 
$w_{\rm tot}$ is the total weight
sampled (equals the number of samples), and $p_{i}$ is the relative current
(column \verb+Rel.Curr.+) for the segment. The denominator represents the
uncertainty in the sample for the $i$th segment (the variance). Since this
process represents the random sampling of a finite number of items, the
results should have a Poisson distribution and the variance should equal
the mean, $w_{\rm tot} p_{i}$. The code actually prints out the 
reduced $\chi^{2}_{\nu} \equiv \chi^{2} / N_{\rm seg}$. 

The 
cumulative probability
distribution of $\chi^{2}$, $P_{\chi}(\chi^{2} \mid \nu)$ is given by
\begin{equation}
P_{\chi}(\chi^{2} \mid \nu) = 1 - {\cal P}\left( \frac{\nu}{2}, \frac{\chi^{2}}{2}
 \right),
\label{pchi}
\end{equation}
where 
\begin{equation}
{\cal P}(a,x) \equiv \frac{1}{\Gamma(a)} \int_{0}^{x} e^{-t} t^{a-1} \: dt,
\end{equation}
is the incomplete gamma function, and $\Gamma$ is the gamma function. 
The symbol ${\cal P}$ was chosen for the incomplete gamma function
so as to be consistent with the notation in Abramowitz and Stegun and 
is obviously
a possible source of confusion in Eq.~(\ref{pchi}). 
Equation~(\ref{pchi}) for $P_{\chi}(\chi^{2}_{0} \mid \nu)$
gives the probability that a typical sampling of the source
distribution will yield a $\chi^{2}$, call it $X^{2}$, with 
$X^{2} > \chi^{2}_{0}$. In other words, if there is a problem with
the sampling routines, you will consistently find small values
for this probability $P_{\chi}(\chi^{2}_{0} \mid \nu)$.
Note that for $\nu \gg 1$, 
$\chi^{2}_{\nu} = 1$ corresponds roughly to
a probability of 0.5. So, values of 
$P_{\chi}(\chi^{2}_{0} \mid \nu) \simeq 0.5$ do {\em not} indicate
a problem.
If $\chi^{2}_{\nu}$ is significantly larger than 1, say, $> 1.5$, or if
the resulting probability is very small, the sampling process should be
examined more carefully. 
On the other hand,
if the sampling routine ``nails'' the distribution,
$P_{\chi}(\chi^{2}_{0} \mid \nu)$ will approach one.
This is what you would obtain when using
the ``direct sampling'' method described in |sources.hweb|.
In this case, the error scales
like $1/w_{\rm tot}$ rather than $1/\sqrt{w_{\rm tot}}$. The result will
be small values of $\chi^{2}_{\nu}$, decreasing steadily with increasing
$w_{\rm tot}$. The probabilities in this case quickly reach 1 as
$w_{\rm tot}$ grows.

Additional machinery has been added to |sourcetest| to aid in evaluating
the sampling of recombination sources. Because the code automatically
assumes that every plasma zone is a source, no matter how great, the
range in source currents can be many orders of magnitude. The result
is that any reasonable sample size will still leave a significant number
of segments unsampled. These unsampled, physically irrelevant, segments 
can dominate the value of $\chi^{2}_{\nu}$. To better evaluate the sampling,
several $\chi^{2}_{\nu}$ are computed by restricting the analysis to
zones having a relative current greater than some minimum value, $p_{\rm min}$.
For example, for $p_{\rm min} = 10^{-4}$, a $\chi^{2}_{\nu}$ is computed
based on only those segments having $p_{i} \geq 10^{-4}$; the number
of such segments is given as well. The resulting values and probabilities
can be interpreted as described above, but the user's attention should be
focussed on the higher values for the minimum relative current. These
represent the zones which will be the physically significant sources in
the problem.

\section*{Velocity Test}

The purpose of this part of |sourcetest| is to check the velocity 
distribution of the neutrals generated by this source. It also
provides the spatial distribution of the source particles
across the specified source segment. The random number
generator is called in such a way that the random number
sequence should exactly match that used in the main
code.  Hence, if there is only one source segment in
the problem, the particle
positions and velocities produced here should be exactly 
the same as those that will be used to initialize the
flights in the run of |flighttest|.

Note that there is no on-screen feedback following the segment
test, except in the case of code failure. Instead, the user 
is immediately presented with the velocity test. A choice for
the source group to be examined is requested:
\begin{verbatim}
 Segment test: enter source group, 1 to   2
\end{verbatim}
The user is asked to choose a particular segment 
(sector or zone,
depending on the type of source) of this group and to enter the
number of samples:
\begin{verbatim}
 Enter segment number, 1 to   32, and number of samples
\end{verbatim}

Following the segment test output in \verb+sourcetest.out+, the code
will write the output for the velocity test. In this case, {\em there
will be one line per sample}, so be careful when specifying the
number of samples!

The first line of this output section echoes the input information
and provides a pointer to the corresponding geometry element, a sector
number for surface sources, zone number for volume sources:
\begin{verbatim}
 For source group   1, segment   25, which points to geometry element   210
\end{verbatim}

The actual output differs for surface and volume sources.  Here is an
example of the output for a surface source:
\begin{verbatim}
     i      x            y            z            vx           vy           vz         energy         fr         cos_th       vpar1        vpar2         fr_y
     0  1.0000E-08   1.9390E-01   1.2678E-01   2.1346E+03  -3.2493E+02   2.0787E+02   9.8218E-02   2.8451E-01   9.8406E-01   9.5827E-02   1.4980E-01   7.5591E-01
     1  1.0000E-08   1.7510E-01   1.2757E-01   3.9551E+02  -6.7830E+02  -4.3682E+00   1.2869E-02   4.1078E-01   5.0371E-01  -5.5632E-03   8.6386E-01   3.9839E-03
     2  1.0000E-08   1.9999E-01   1.2889E-01   3.9319E+02  -1.6741E+03   4.5871E+02   6.6119E-02   6.2271E-01   2.2092E-01   2.5773E-01   9.4062E-01   9.9943E-01
     3  1.0000E-08   1.7604E-01   1.2871E-01   6.1353E+02  -3.8940E+02  -4.5450E+02   1.5334E-02   5.9407E-01   7.1582E-01  -5.3027E-01   4.5432E-01   4.1716E-02
\end{verbatim}
\vdots

Where
\begin{description}
  \item[i] Is just a label for each individual sample. Again, if there is only
one source segment in the problem, this position and velocity will be
that of flight number $i$ in |flighttest|.
  \item[x,y,z] Are the coordinates in physical space. These should lie within
the bounds of the chosen sector.
  \item[vx,vy,vz] Are the components of the velocity. Note that in some
cases these can be quite simple. For example, the usual assumption for
a plate source is normal incidence. I.e., this initial vector will be
normal to the sector.
  \item[energy] The sampled energy. In some cases, such as the EIRENE
benchmark examples, this may be constant.
  \item[fr] This is the fractional distance of
the sample from the beginning of the sector computed using the
values of |sector_points|; should be between 0 and 1.
The distribution of this quantity can be plotted to verify the spatial
sampling scheme.
  \item[cos\_th] Cosine of the angle of incidence relative to the surface
normal. For the usual plate source, this will be -1, with the minus sign
indicating that the flight is directed towards the surface.
  \item[vpar1] Component of the sampled velocity parallel to the the line
formed by the endpoints of the sector (in |sector_points|).
  \item[vpar2] Second parallel component of the sampled velocity, perpendicular
to the endpoints of the sector.
  \item[fr\_y] For 3-D cases, this is the fractional distance of the
sample from the beginning of the sector in the $y$ (or in toroidal
angle in cylindrical / toroidal problems).  This is computed using
the |zone_min| and |zone_max| of the source segment's |sector_zone|.
In 2-D cases, this will be zero.
\end{description}

The heading used for a volume source is:
\begin{verbatim}
    i      x            y            z            vx           vy           vz         energy         fr         vhatx       vhaty        vhatz         fr_y
\end{verbatim}

The |fr| and |fr_y| quantities will be zero in this case. The |vhatx|, etc. columns 
provide the unit vector for the velocity, $\vec{v}/v$.

At the end of the file, averages of these quantities are given. These can
be used as a quick check of the sampled positions and velocities. However,
testing of new source routines should include plotting the distributions
of these velocities and computing moments higher than the mean (e.g.,
the variance).

@m FILE 'sourcetest.web'

@I macros.hweb
@I geomint.hweb
@I zone.hweb
@I sysdep.hweb
@I particle.hweb
@I flight.hweb
@I random.hweb
@I background.hweb
@I species.hweb
@I string.hweb
@I problem.hweb
@I location.hweb
@I sector.hweb
@I sources.hweb
@I vector.hweb
@I reaction.hweb
@I materials.hweb
@I tally.hweb
@I mpi.hweb

@ The main program.

@a
      program sourcetest
      implicit_none_f77
      mp_common
      implicit_none_f90
      mp_decls

@#if MPI
      mpi_init
@#endif

      call readfilenames
      call init_sourcetest
      call do_src_tests

@#if MPI
      mpi_end
@#endif
      stop
      end

      @<Functions and subroutines@>

@ Routine to actually do tests.

@m max_num_chis 10
@f sources_localcommon integer
@m sources_localcommon save /sources_common/;
      vc_decl(x_surface);
      common /sources_common/ x_surface @;

@<Functions...@>=
      subroutine do_src_tests
      define_varp(stat,FLOAT,source_seg_ind)
      define_varp(num_seg_samp,INT,source_seg_ind)
      define_varp(prob_seg,FLOAT,source_seg_ind)

      implicit_none_f77
      gi_common
      zn_common
      sp_common
      sc_common
      so_common
      implicit_none_f90
      real rel_wt,weight_tot,energy,fr,vsrc_mag,vnorm_mag,cos_theta,
     $     deltax_mag,vpar1,vpar2,vplane2_mag,phi,y_min,y_max,fr_y,
     $     min_prob,max_prob,energy_avg,fr_avg,costh_avg,vpar1_avg,
     $     vpar2_avg,fr_y_avg,dummy
      real chi_sqd[max_num_chis],estimator_factors[1]
      integer num,i,xseg,nsample,zone,nseg,j,num_chis,kseg,iparam
      integer num_points[max_num_chis]
      integer length,p,b,e
      character*LINELEN line

      external gammq                    // External
      real gammq

      rn_seed_decl(seed)
      rn_seed_decl(temp_seed)
      rn_decl(temp_rand)
      lc_decl(xsrc)
      so_decl(isource)
      sp_decl(spsrc)
      pt_decl(x)
      rn_decl(x)
      vc_decl(vzero)
      vc_decl(vone)
      vc_decl(deltax)
      vc_decl(xp)
      vc_decl(vsrc)
      vc_decl(xsrc_avg)
      vc_decl(vsrc_avg)
      vc_decl(vnorm)
      vc_decl(vplane2)
      vc_decl(s0)
      vc_decl(s1)

      sources_localcommon

      @<Memory allocation interface@>
      rn_decls
      st_decls
      pt_decls
      lc_decls
      vc_decls

      declare_varp(stat)
      declare_varp(num_seg_samp)
      declare_varp(prob_seg)

      var_alloc(stat)
      var_alloc(num_seg_samp)
      var_alloc(prob_seg)

      call decimal_to_seed(so_seed_decimal,rn_seed_args(seed))
      if (so_sampling == so_direct) then
         rn_seed_copy(seed,temp_seed)
         call next_seed(-1,rn_seed_args(temp_seed))
         rn_init(rn_seed_args(temp_seed),temp_rand)
         rn_next(so_direct_delta,temp_rand)
      else if (so_sampling == so_random) then
         so_direct_delta=zero
      else
         assert('Illegal value of so_sampling' == ' ')
      end if

      open(unit=diskout,file='sourcetest.out',status='unknown')

loop1: continue

      write(stdout,*) 'Enter index for a source group, 1 to ',so_grps,
     $     ' And number of samples'
      if (! read_string(stdin,line,length)) goto break
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      isource=read_integer(line(b:e))
      if (!so_check(isource)) then
         write(stdout,*) ' Source group ',isource,' is invalid; try again.'
         go to loop1
      end if
      assert(next_token(line,b,e,p))
      nsample=read_integer(line(b:e))

      if (so_nseg(isource) > 1) then
         min_prob=one
         max_prob=zero
         do i=1,so_nseg(isource)
            prob_seg[i]=source_current[so_base(isource)+i-1]/so_tot_curr(isource)
            if (prob_seg[i] > zero) then
               min_prob=min(min_prob,prob_seg[i])
               max_prob=max(max_prob,prob_seg[i])
            end if
         end do
         assert(min_prob > zero)
         assert(max_prob < one)

         do i=1,so_nseg(isource)
            stat[i]=zero
            num_seg_samp[i]=0
         end do

         weight_tot=zero

@#if 0
      do num=1,nsample
@#endif
         do num=0,nsample-1
            rn_init(seed,x)
            call sample_sources(tl_est_unknown,isource,num,pt_args(x),
     $           rn_args(x),kseg)
            rel_wt=pt_w(x)
            stat[kseg+1]+=rel_wt
            num_seg_samp[kseg+1]+=1
            weight_tot+=rel_wt
            call next_seed(1,seed)
         end do

         min_prob=const(1.,1)**max(int(log10(min_prob))-1,-10)
         num_chis=int(log10(max_prob/min_prob))+1
         assert(num_chis <= max_num_chis)
         do j=1,num_chis
            chi_sqd[j]=zero
            num_points[j]=0
         end do

         write(diskout,*)
         write(diskout,*) '   For source group = ',isource
         write(diskout,*) 
     $        '  Seg  Ptr    Number      Weight      Rel.Wt.   Rel.Curr.' 
         do i=1,so_nseg(isource)
            write(diskout,'(i5,1x,i5,1x,1pe11.4,1x,1pe11.4,1x,e11.4,1x,e11.4)') 
     $           i,source_segment_ptr[so_base(isource)+i-1],
     $           areal(num_seg_samp[i]),
     $           stat[i],stat[i]/weight_tot,prob_seg[i]
            do j=1,num_chis
               if (prob_seg[i] > min_prob*const(1.,1)**(j-1)) then
                  num_points[j]++
                  chi_sqd[j]+=(stat[i]-weight_tot*prob_seg[i])**2
     $                 /(weight_tot*prob_seg[i])
               end if
            end do
         end do

         write(diskout,*) '  Minimum'
         write(diskout,*) ' Rel.Curr.   Num. Points    Chi Sqd./Num.Pts.    Prob.'
         do j=1,num_chis
            assert(num_points[j] > 0)
            write(diskout,'(2x,1pe8.1,7x,i5,8x,e13.6,5x,e13.6)') min_prob*const(1.,1)**(j-1),num_points[j],
     $           chi_sqd[j]/num_points[j],gammq(areal(num_points[j])*half,
     $           chi_sqd[j]*half)
         end do
      end if

break:  continue

      var_free(stat)
      var_free(num_seg_samp)
      var_free(prob_seg)

loop2: continue

      write(stdout,*) 'Segment test: enter source group, 1 to ',so_grps
      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      isource=read_integer(line(b:e)) 
      if (!so_check(isource)) then
         write(stdout,*) ' Source group ',isource,' is invalid; try again.'
         go to loop2
      end if
loop3: continue
      write(stdout,*) 'Enter segment number, 1 to ',so_nseg(isource),
     $     ', and number of samples'

      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      nseg=read_integer(line(b:e))
      if (nseg <= 0 || nseg > so_nseg(isource)) then
         write(stdout,*) ' Segment ',nseg,' is invalid; try again.'
         go to loop3
      end if
      assert(next_token(line,b,e,p))
      nsample=read_integer(line(b:e))

      xseg=source_segment_ptr[so_base(isource)+nseg-1]
      kseg=int_lookup(xseg,source_segment_ptr[so_base(isource)],
     $                so_nseg(isource))-1

      vc_set(vzero,zero,zero,zero)
      vc_set(vone,zero,zero,one)

      write(diskout,*)
      write(diskout,'(a,i2,a,i5,a,i5)') 'For source group ',isource,
     $     ', segment ',nseg,', which points to geometry element ',xseg
      if (so_geom(isource) != so_volume) then
         write(diskout,*) '    i      x            y            z            vx           vy           vz         energy         fr         cos_th       vpar1        vpar2         fr_y'
      else
         write(diskout,*) '    i      x            y            z            vx           vy           vz         energy         fr         vhatx       vhaty        vhatz         fr_y'
      end if
      vc_set(xsrc_avg,zero,zero,zero)
      vc_set(vsrc_avg,zero,zero,zero)
      energy_avg=zero
      fr_avg=zero
      costh_avg=zero
      vpar1_avg=zero
      vpar2_avg=zero
      fr_y_avg=zero
/*
   Try to sync these samples with a normal run, too. 
*/
      call decimal_to_seed(so_seed_decimal,rn_seed_args(seed))
      
      do i=0,nsample-1
         rn_init(seed,x)
         if (so_sampling == so_random) then
            rn_next(dummy,x)     // Match one used for segment choice.
         end if
         call set_source_x(tl_est_unknown,so_args(isource),xseg,kseg,
     $        rn_args(x),lc_args(xsrc))
         call set_source_v(so_args(isource),xseg,kseg,lc_args(xsrc),
     $        rn_args(x),vc_args(vsrc))
         call next_seed(1,seed)
         if (so_type(isource) != so_snapshot) then
            spsrc=so_species(isource)
         else
            call init_snapshot_pt(so_args(isource),xseg,kseg,pt_args(x))
            spsrc=pt_sp(x)
         end if
         energy=half*sp_m(spsrc)*vc_abs2(vsrc)/electron_charge
/* For surface sources, break |xsrc| and |vsrc| down into components
   relative to surface.
 */
         if (so_geom(isource) == so_surface) then
/*
   Use |x_surface| set in |set_source_x|, just as in main code.
*/
            call surface_reflect(sector_surface[xseg],vc_args(x_surface),
     $           vc_args(vzero),vc_args(vone),vc_args(vnorm))
            vnorm_mag=vc_abs(vnorm)
            vsrc_mag=vc_abs(vsrc)
            if (vnorm_mag != zero && vsrc_mag != zero) then
               cos_theta=vc_product(vnorm,vsrc)/(vnorm_mag*vsrc_mag)
            else
               cos_theta=zero
            end if
/*
   Rotate |sector_points| to same toroidal angle as |x_surface|, if needed.
*/
            if ((geometry_symmetry == geometry_symmetry_cyl_hw)
     $          || (geometry_symmetry == geometry_symmetry_cyl_section)) then
               phi=atan2(x_surface[2],x_surface[1])
/*
   This is assumed in |set_source_x| also.
*/
               assert(sector_points[xseg][0][2] == zero)
               assert(sector_points[xseg][1][2] == zero)
               vc_set(s0,sector_points[xseg][0][1]*cos(phi),
     $              sector_points[xseg][0][1]*sin(phi),sector_points[xseg][0][3])
               vc_set(s1,sector_points[xseg][1][1]*cos(phi),
     $              sector_points[xseg][1][1]*sin(phi),sector_points[xseg][1][3])
/*
   Fractional distance in |y|.
*/
               y_min=zone_min[sector_zone[xseg]][2]
               y_max=zone_max[sector_zone[xseg]][2]
               if (phi < y_min) then
                  phi+=two*PI
               else if (phi > y_max) then
                  phi-=two*PI
               end if
               fr_y=(phi-y_min)/(y_max-y_min)
               assert((fr_y >= zero) && (fr_y <= one)) 
            else
               vc_copy(sector_points[xseg][0],s0)
               vc_copy(sector_points[xseg][1],s1)
               if (geometry_symmetry == geometry_symmetry_plane_hw) then
                  y_min=zone_min[sector_zone[xseg]][2]
                  y_max=zone_max[sector_zone[xseg]][2]
                  fr_y=(x_surface[2]-y_min)/(y_max-y_min)
                  assert((fr_y >= zero) && (fr_y <= one)) 
               else
                  fr_y=zero
               end if
            end if
/*
   Distance along segment, all symmetries
*/
            vc_difference(s1,s0,deltax)
            vc_difference(x_surface,s0,xp)
            fr=vc_product(xp,deltax)/vc_abs2(deltax)
            assert(fr >= zero && fr <= one)

// Components in plane of surface
            deltax_mag=vc_abs(deltax)  // deltax is one direction in plane
            if (deltax_mag != zero && vsrc_mag != zero) then
               assert(abs(vc_product(deltax,vnorm)/(deltax_mag*vnorm_mag)) 
     $              < geom_epsilon)   // Check that normal is normal
               vpar1=vc_product(deltax,vsrc)/(deltax_mag*vsrc_mag)
            else
               vpar1=zero
            end if

            vc_cross(vnorm,deltax,vplane2)  // A second direction in plane
            vplane2_mag=vc_abs(vplane2)
            if (vplane2_mag != zero && vsrc_mag != zero) then
               vpar2=vc_product(vplane2,vsrc)/(vplane2_mag*vsrc_mag)
            else
               vpar2=zero
            end if
         else if (so_geom(isource) == so_volume) then
            fr=zero
            fr_y=zero
            vsrc_mag=vc_abs(vsrc)
            if (vsrc_mag > zero) then
               cos_theta=vsrc[1]/vsrc_mag
               vpar1=vsrc[2]/vsrc_mag
               vpar2=vsrc[3]/vsrc_mag
            else
               cos_theta=zero
               vpar1=zero
               vpar2=zero
            end if
         else               // Not a surface or volume source
            fr=zero
            cos_theta=zero
            vpar1=zero
            vpar2=zero
            fr_y=zero
         end if

         write(diskout,'(1x,i5,1x,1p,12(e11.4,2x))') i,lc_x(xsrc)[1],
     $        lc_x(xsrc)[2],lc_x(xsrc)[3],
     $        vsrc[1],vsrc[2],vsrc[3],energy,fr,cos_theta,vpar1,vpar2,fr_y
         vc_add(lc_x(xsrc),xsrc_avg,xsrc_avg)
         vc_add(vsrc,vsrc_avg,vsrc_avg)
         energy_avg+=energy
         fr_avg+=fr
         costh_avg+=cos_theta
         vpar1_avg+=vpar1
         vpar2_avg+=vpar2
         fr_y_avg+=fr_y
      end do
      write(diskout,*) '----------------------------------------------------------------------------------------------------------------------------------------------'
      vc_scale(one/areal(nsample),xsrc_avg,xsrc_avg)
      vc_scale(one/areal(nsample),vsrc_avg,vsrc_avg)
      energy_avg/=areal(nsample)
      fr_avg/=areal(nsample)
      costh_avg/=areal(nsample)
      vpar1_avg/=areal(nsample)
      vpar2_avg/=areal(nsample)
      fr_y_avg/=areal(nsample)
      write(diskout,*) ' Averages:'
      write(diskout,'(7x,1p,12(e11.4,2x))') xsrc_avg[1],xsrc_avg[2],
     $     xsrc_avg[3],vsrc_avg[1],vsrc_avg[2],vsrc_avg[3],energy_avg,
     $     fr_avg,costh_avg,vpar1_avg,vpar2_avg,fr_y_avg
@#if 0
      go to loop2
@#endif
eof: continue
      close(unit=diskout)

      return
      end

@ Incomplete gamma function. Returns the incomplete gamma function
\begin{equation}
Q(a,x) \equiv \frac{1}{\Gamma(a)} \int^{\infty}_{x} e^{-x} t^{a-1} \: dt,
\end{equation}
for $a > 0$. Taken from {\em Numerical Recipes} by W. H. Press et al. 
(Cambridge Press, New York, 1986).

@<Functions...@>=
      function gammq(a,x)

      implicit_none_f77
      implicit_none_f90

      real gammq                     // Function

      real a,x                       // Input

      real gamser,gln,gammcf         // Local

      assert(x >= 0 && a > 0)
      if (x < a+one) then
         call gser(a,x,gamser,gln)     // Use series representation
         gammq=one-gamser
      else
         call gcf(a,x,gammcf,gln)      // Use continued fraction
         gammq=gammcf
      end if

      return
      end

@ Series representation of the incomplete gamma function. Returns the
incomplete gamma function $P(a,x)$ evaluated by its series representation
as |gamser|. Also returns $\ln \Gamma (a)$ as |gln|. Taken from {\em Numerical 
Recipes} by W. H. Press et al. (Cambridge Press, New York, 1986).

@m itmax 500
@m eps const(3.,-7)

@<Functions...@>=
      subroutine gser(a,x,gamser,gln)

      implicit_none_f77
      implicit_none_f90

      real a,x                        // Input
      real gamser,gln                 // Output

      integer n                       // Local
      real ap,sum,del

      external gammln                 // External
      real gammln

      gln=gammln(a)
      if (x <= zero) then
         assert(x == zero)
         gamser=zero
         return
      end if
      ap=a
      sum=one/a
      del=sum
      do n=1,itmax
         ap+=one
         del*=x/ap
         sum+=del
         if (abs(del) < abs(sum)*eps) go to break
      end do
      assert("a too large, itmax too small" == " ")
break: continue
      gamser=sum*exp(-x+a*log(x)-gln)

      return
      end

@ Continued fraction representation of the incomplete gamma function. Returns
the incomplete gamma function $Q(a,x)$ evaluated by its continued fraction
representation as |gammcf|. Also returns $\ln \Gamma (a)$ as |gln|. Taken from
{\em Numerical Recipes} by W. H. Press et al. (Cambridge Press, New York, 
1986).

@<Functions...@>=
      subroutine gcf(a,x,gammcf,gln)

      implicit_none_f77
      implicit_none_f90

      real a,x                        // Input
      real gammcf,gln                 // Output

      integer n                       // Local
      real a0,a1,b0,b1,fac,an,ana,anf,gold,g

      external gammln                 // External
      real gammln

      gln=gammln(a)
/*
   This is the previous value, tested against for convergence.
*/
      gold=zero
/*
   Setting the $A$'s and $B$'s of Eq. (5.2.4) in {\em Numerical Recipes} for
   evaluating the continued fraction.
*/
      a0=one
      a1=x
      b0=zero
      b1=one
/*
   |fac| is the renormalization factor for preventing overflow of the partial
   numerators and denominators.
*/
      fac=one
      do n=1,itmax
         an=areal(n)
         ana=an-a
         a0=(a1+a0*ana)*fac    // One step of the recurrence (5.2.5)
         b0=(b1+b0*ana)*fac
         anf=an*fac
         a1=x*a0+anf*a1        // The next step of the recurrence (5.2.5)
         b1=x*b0+anf*b1
         if (a1 != zero) then
            fac=one/a1                             // Renormalize
            g=b1*fac                               // New value of answer
            if ((abs(g-gold)/g) < eps) go to break  // Is converged.
            gold=g                                 // Not converged, try again
         end if
      end do
      assert("a too large, itmax too small" == " ")
break: continue
      gammcf=g*exp(-x+a*log(x)-gln)

      return
      end

@ Log of the gamma function. Returns the value of $\ln Gamma (x)$ for $x > 0$.
Full accuracy is obtained for $x > 1$. For $x < 1$, the reflection formula
is used. This routine is taken from {\em Numerical Recipes} by W. H. Press 
et al. (Cambridge Press, New York, 1986).

@<Functions...@>=
      function gammln(xx)

      implicit_none_f77
      implicit_none_f90

      real gammln                   // Function

      real xx                       // Input

      integer j,smallx              // Local
      real stp,x,tmp,ser
      real cof(6)

      cof(1)=const(76.18009173)
      cof(2)=const(-86.50532033)
      cof(3)=const(24.01409822)
      cof(4)=const(-1.231739516)
      cof(5)=const(0.120858003,-2)
      cof(6)=const(-0.536382,-5)

      stp=const(2.50662827465)

      assert(xx > zero)
      if (xx < one) then
         smallx=TRUE     // To use reflection formula Eq. (6.1.4)
         x=one-xx
      else
         smallx=FALSE
         x=xx-one
      end if
      tmp=x+const(5.5)
      tmp=(x+half)*log(tmp)-tmp

      ser=one
      do j=1,6
        x+=one
        ser+=cof(j)/x
      end do

      gammln=tmp+log(stp*ser)
      if (smallx == TRUE) gammln=log(PI*(one-xx)/sin(PI*(one-xx)))-gammln

      return
      end

@* Initialize.

@<Functions...@>=
      subroutine init_sourcetest
      implicit_none_f77
      implicit_none_f90
      
      call read_geometry
      call nc_read_elements
      call nc_read_species
      call nc_read_reactions
      call nc_read_materials
      call nc_read_pmi
      call nc_read_problem
      call nc_read_background

      call read_cramd_data
      
      return
      end


@* INDEX.
