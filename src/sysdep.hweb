@* Macros for machine dependencies.
% $Id: 5dfe53f51600e5efc9454cda22dba168305ed870 $
\ID{$Id: 5dfe53f51600e5efc9454cda22dba168305ed870 $}

@#if defined(CRAY)
    @m CRAY 1
    @m SUN 0
    @m IBM 0
    @m ALPHA 0
    @m HP 0
    @m SGI 0
    @m VAX 0
    @m LINUX 0
    @m LINUX64 0
    @m MACOSX 0
@#elif defined(SUN)
    @m CRAY 0
    @m SUN 1
    @m IBM 0
    @m ALPHA 0
    @m HP 0
    @m SGI 0
    @m VAX 0
    @m LINUX 0
    @m LINUX64 0
    @m MACOSX 0
@#elif defined(IBM)
    @m CRAY 0
    @m SUN 0
    @m IBM 1
    @m ALPHA 0
    @m HP 0
    @m SGI 0
    @m VAX 0
    @m LINUX 0
    @m LINUX64 0
    @m MACOSX 0
@#elif defined(ALPHA)
    @m CRAY 0
    @m SUN 0
    @m IBM 0
    @m ALPHA 1
    @m HP 0
    @m SGI 0
    @m VAX 0
    @m LINUX 0
    @m LINUX64 0
    @m MACOSX 0
@#elif defined(HP)
    @m CRAY 0
    @m SUN 0
    @m IBM 0
    @m ALPHA 0
    @m HP 1
    @m SGI 0
    @m VAX 0
    @m LINUX 0
    @m LINUX64 0
    @m MACOSX 0
@#elif defined(SGI)
    @m CRAY 0
    @m SUN 0
    @m IBM 0
    @m ALPHA 0
    @m HP 0
    @m SGI 1
    @m VAX 0
    @m LINUX 0
    @m LINUX64 0
    @m MACOSX 0
@#elif defined(VAX)
    @m CRAY 0
    @m SUN 0
    @m IBM 0
    @m ALPHA 0
    @m HP 0
    @m SGI 0
    @m VAX 1
    @m LINUX 0
    @m LINUX64 0
    @m MACOSX 0
@#elif defined(LINUX)
    @m CRAY 0
    @m SUN 0
    @m IBM 0
    @m ALPHA 0
    @m HP 0
    @m SGI 0
    @m VAX 0
    @m LINUX 1
    @m LINUX64 0
    @m MACOSX 0
@#elif defined(LINUX64)
    @m CRAY 0
    @m SUN 0
    @m IBM 0
    @m ALPHA 0
    @m HP 0
    @m SGI 0
    @m VAX 0
    @m LINUX 0
    @m LINUX64 1
    @m MACOSX 0
@#elif defined(MACOSX)
    @m CRAY 0
    @m SUN 0
    @m IBM 0
    @m ALPHA 0
    @m HP 0
    @m SGI 0
    @m VAX 0
    @m LINUX 0
    @m LINUX64 0
    @m MACOSX 1
@#endif

@#if defined(NAGWARE)
    @m NAGWARE 1
    @m PGROUP 0
    @m FUJITSU 0
    @m PATHSCALE 0
    @m INTEL 0
@#elif defined(PGROUP)
    @m NAGWARE 0
    @m PGROUP 1
    @m FUJITSU 0
    @m PATHSCALE 0
    @m INTEL 0
@#elif defined(FUJITSU)
    @m NAGWARE 0
    @m PGROUP 0
    @m FUJITSU 1
    @m PATHSCALE 0
    @m INTEL 0
@#elif defined(PATHSCALE)
    @m NAGWARE 0
    @m PGROUP 0
    @m FUJITSU 0
    @m PATHSCALE 1
    @m INTEL 0
@#elif defined(INTEL)
    @m NAGWARE 0
    @m PGROUP 0
    @m FUJITSU 0
    @m PATHSCALE 0
    @m INTEL 1
@#else
    @m NAGWARE 0
    @m PGROUP 0
    @m FUJITSU 0
    @m PATHSCALE 0
    @m INTEL 0
@#endif

@#if defined(HDF4)
    @m HDF4 1
    @m SILO 0
@#elif defined(SILO)
    @m HDF4 0
    @m SILO 1
    @m silo_precision DB_DOUBLE
    @m silo_format DB_PDB
@#elif defined(SILO_HDF5)
    @m HDF4 0
    @m SILO 1
      @m silo_precision DB_DOUBLE
@#if 0      
    @m silo_format DB_PDB       // Is also available
@#endif
    @m silo_format DB_HDF5      // See Silo manual for other HDF5 options
@#else
    @m HDF4 0
    @m SILO 0
@#endif

@ Fortran 77 vs. 90.

@#if defined(FORTRAN90)
    @m FORTRAN90 1
    @m FORTRAN77 0
    @m ASSIGN $UNQUOTE('=>')
@#else
    @m FORTRAN77 1
    @m FORTRAN90 0
@#endif

@ Use MPI (PVM??).

@#if defined(MPI)
      @m MPI 1
@#else
      @m MPI 0
@#endif

@ Allow source sampling to be done on master rather than slaves.

@#if defined(MASTER_SAMPLE)
      @m MASTER_SAMPLE 1
@#else
      @m MASTER_SAMPLE 0
@#endif

@ Define precision.

@f single_precision real
@f address real

@#if FORTRAN90
  @m f90_kinds SINGLE=kind(0.0),DOUBLE=selected_real_kind(12)
  @m real     REAL(kind=DOUBLE)
  @m areal(x) REAL(x,DOUBLE)
                            // Need (...) here for negative values.
  @m const(x,...) (x@&$IFCASE(#0,,e###1)@&_DOUBLE) 
                           // Except in data statements; use this instead. 
  @m dconst(x,...) x@&$IFCASE(#0,,e###1)@&_DOUBLE 
  @m epsilon  (5*EPSILON(const(0.0))) // 1.1e-15 on Sun/Alpha. 7.1e-14 on Cray.
  @m single_precision REAL(kind=SINGLE)
  @m single(x) REAL(x,SINGLE)
@#else
                       // Use single precision on the Cray
@#if CRAY
  @m real     REAL
  @m areal    REAL
  @m const(x,...) (x@&$IFCASE(#0,e0,e###1))
  @m dconst(x,...) x@&$IFCASE(#0,e0,e###1)
  @m epsilon  1.0e-15
  @m single_precision Real
  @m single   Real
@#else
  @m real     DOUBLE PRECISION  // Default precision
  @m areal    DBLE              // Coerce to default precision
  @m const(x,...) (x@&$IFCASE(#0,d0,d###1)) // Constant in default precision
  @m dconst(x,...) x@&$IFCASE(#0,d0,d###1)
  @m epsilon  1.0d-15           // Approximate round-off error
  @m single_precision Real      // Declare single precision
  @m single   Real              // Coerce to single precision
@#endif
@#endif

@#if CRAY
  @m HIPREC 1
@#else
  @m HIPREC 0
@#endif
                      // Pointers are 64-bits on Alphas
@#if ALPHA
  @m address INTEGER*8
@#elif SGI
  @m address INTEGER*8
@#elif LINUX64
  @m address INTEGER*8
@#else
  @m address INTEGER
@#endif 

@#if defined(USEINT)
  @m USEINT 1
@#else
@#if SGI || CRAY || LINUX || LINUX64
  @m USEINT 0
@#else
  @m USEINT 1
@#endif
@#endif

@ The sizes of integers and characters in terms of reals.

@#if CRAY
  @m int_mem(n) n
@#else
  @m int_mem(n) ((n)+1)/2
@#endif

@m char_mem(n) ((n)+7)/8

@ The Sun uses |implicit undefined(a-z)| instead of |implicit none|.
(Actually it accepts |implicit none| now.)

@f pointer integer
@f implicit_none_f77 implicit
@f implicit_none_f90 implicit
@#if FORTRAN77
@m implicit_none_f77 implicit none @;
@m implicit_none_f90
@#else
@m implicit_none_f77
@m implicit_none_f90 implicit none;
  integer,parameter:: f90_kinds@;
@m implicit_none_f90mod implicit none;
  integer,parameter,private:: f90_kinds@;
@#endif

@ Declarations for system dependent routines.

@f sy_decls integer
@m sy_decls
      external get_env,wall_time,cpu_time,get_pid,arg_count,set_cwd;
      logical get_env,set_cwd;
      integer get_pid,arg_count;
      real cpu_time,wall_time@;

@ Interface for memory allocation.

@<Memory allocation interface@>=
@#if FORTRAN77
      external mem_alloc, mem_realloc, mem_free;
      address mem_alloc, mem_realloc @;
@#else
      interface

         function mem_alloc_c1(size,l1,u1,name) result(p)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1
         character(len=size), dimension(:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_c2(size,l1,u1,l2,u2,name) result(p)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,l2,u2
         character(len=size), dimension(:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_c3(size,l1,u1,l2,u2,l3,u3,name) result(p)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,l2,u2,l3,u3
         character(len=size), dimension(:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_c4(size,l1,u1,l2,u2,l3,u3,l4,u4,name) result(p)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,l2,u2,l3,u3,l4,u4
         character(len=size), dimension(:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_i1(l1,u1,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1
         integer, dimension(:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_i2(l1,u1,l2,u2,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2
         integer, dimension(:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_i3(l1,u1,l2,u2,l3,u3,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3
         integer, dimension(:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_i4(l1,u1,l2,u2,l3,u3,l4,u4,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4
         integer, dimension(:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_i5(l1,u1,l2,u2,l3,u3,l4,u4,l5,u5,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4,l5,u5
         integer, dimension(:,:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_r1(l1,u1,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1
         real, dimension(:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_r2(l1,u1,l2,u2,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2
         real, dimension(:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_r3(l1,u1,l2,u2,l3,u3,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3
         real, dimension(:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_r4(l1,u1,l2,u2,l3,u3,l4,u4,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4
         real, dimension(:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_alloc_r5(l1,u1,l2,u2,l3,u3,l4,u4,l5,u5,name) result(p)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4,l5,u5
         real, dimension(:,:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_c1(p,size,l1,u1,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,nu
         character(len=size), dimension(:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_c2(p,size,l1,u1,l2,u2,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,l2,u2,nu
         character(len=size), dimension(:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_c3(p,size,l1,u1,l2,u2,l3,u3,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,l2,u2,l3,u3,nu
         character(len=size), dimension(:,:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_c4(p,size,l1,u1,l2,u2,l3,u3,l4,u4,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,l2,u2,l3,u3,l4,u4,nu
         character(len=size), dimension(:,:,:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_i1(p,l1,u1,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,nu
         integer, dimension(:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_i2(p,l1,u1,l2,u2,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,nu
         integer, dimension(:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_i3(p,l1,u1,l2,u2,l3,u3,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,nu
         integer, dimension(:,:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_i4(p,l1,u1,l2,u2,l3,u3,l4,u4,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4,nu
         integer, dimension(:,:,:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_i5(p,l1,u1,l2,u2,l3,u3,l4,u4,l5,u5,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4,l5,u5,nu
         integer, dimension(:,:,:,:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_r1(p,l1,u1,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,nu
         real, dimension(:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_r2(p,l1,u1,l2,u2,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,nu
         real, dimension(:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_r3(p,l1,u1,l2,u2,l3,u3,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,nu
         real, dimension(:,:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_r4(p,l1,u1,l2,u2,l3,u3,l4,u4,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4,nu
         real, dimension(:,:,:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         function mem_realloc_r5(p,l1,u1,l2,u2,l3,u3,l4,u4,l5,u5,nu,name) result(np)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4,l5,u5,nu
         real, dimension(:,:,:,:,:), pointer :: p,np
         character(len=*), intent(in) :: name
         end function

         subroutine mem_free_c1(p,size,l1,u1,name)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1
         character(len=size), dimension(:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_c2(p,size,l1,u1,l2,u2,name)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,l2,u2
         character(len=size), dimension(:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_c3(p,size,l1,u1,l2,u2,l3,u3,name)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,l2,u2,l3,u3
         character(len=size), dimension(:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_c4(p,size,l1,u1,l2,u2,l3,u3,l4,u4,name)
         implicit_none_f90
         integer, intent(in) :: size,l1,u1,l2,u2,l3,u3,l4,u4
         character(len=size), dimension(:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_i1(p,l1,u1,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1
         integer, dimension(:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_i2(p,l1,u1,l2,u2,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2
         integer, dimension(:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_i3(p,l1,u1,l2,u2,l3,u3,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3
         integer, dimension(:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_i4(p,l1,u1,l2,u2,l3,u3,l4,u4,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4
         integer, dimension(:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_i5(p,l1,u1,l2,u2,l3,u3,l4,u4,l5,u5,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4,l5,u5
         integer, dimension(:,:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_r1(p,l1,u1,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1
         real, dimension(:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_r2(p,l1,u1,l2,u2,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2
         real, dimension(:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_r3(p,l1,u1,l2,u2,l3,u3,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3
         real, dimension(:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_r4(p,l1,u1,l2,u2,l3,u3,l4,u4,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4
         real, dimension(:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

         subroutine mem_free_r5(p,l1,u1,l2,u2,l3,u3,l4,u4,l5,u5,name)
         implicit_none_f90
         integer, intent(in) :: l1,u1,l2,u2,l3,u3,l4,u4,l5,u5
         real, dimension(:,:,:,:,:), pointer :: p
         character(len=*), intent(in) :: name
         end subroutine

      end interface
@#endif
