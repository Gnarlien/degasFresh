@* Header macros for pvm.
% $Id: e0a2d8791379a29cfbbd8a693fcc7ba60ce25c6b $

@ Macro definitions for MPI.

\ID{$Id: e0a2d8791379a29cfbbd8a693fcc7ba60ce25c6b $}

@#if MPI

@m mp_decls
      include 'mpif.h';
      integer mpi_err ;
      integer mpi_status ;
      dimension mpi_status(MPI_STATUS_SIZE) @:

@m mpi_init
      call MPI_init(mpi_err);
      mpi_degas2_root=0;
      call MPI_Comm_dup(MPI_COMM_WORLD,comm_world_dup,mpi_err) ;
      call MPI_comm_rank(comm_world_dup, mpi_rank, mpi_err);
      call MPI_comm_size(comm_world_dup, mpi_size, mpi_err) @;

@m mpi_copy_comm
      mpi_degas2_root=0;
      call MPI_Comm_dup(MPI_COMM_WORLD,comm_world_dup,mpi_err) ;
      call MPI_comm_rank(comm_world_dup, mpi_rank, mpi_err);
      call MPI_comm_size(comm_world_dup, mpi_size, mpi_err) @;

@m mpi_end
      call MPI_barrier(comm_world_dup, mpi_err);
      call MPI_finalize(mpi_err) @;

@m mpi_char MPI_CHARACTER
@m mpi_int MPI_INTEGER
@m mpi_real MPI_DOUBLE_PRECISION

@m mpi_broadcast(name)
      call MPI_bcast(name, array_size(name), $IFCASE(type_##name,mpi_char,mpi_int, mpi_real), mpi_degas2_root, comm_world_dup, mpi_err) @;

@m mpi_send(name,dest,tag)
      call MPI_send(name, array_size(name), $IFCASE(type_##name,mpi_char,mpi_int, mpi_real), dest, tag, comm_world_dup, mpi_err) @;

@m mpi_receive(name,source,tag)
      call MPI_recv(name, array_size(name), $IFCASE(type_##name,mpi_char,mpi_int, mpi_real), MPI_ANY_SOURCE, MPI_ANY_TAG, comm_world_dup, mpi_status, mpi_err);
      source=mpi_status(MPI_SOURCE);
      tag=mpi_status(MPI_TAG) @;

@m mpi_master (mpi_rank==mpi_degas2_root)

@m mpi_slave_map_m(il,is) mpi_slave_map[(il-1)*mpi_nslaves+is]

@#else
@m mp_decls
@m mp_common
@m mpi_init
@m mpi_end
@m mpi_broadcast(name)
@m mpi_send(name dest,tag)
@m mpi_receive(name,source,tag)
@m mpi_master .true.
@#endif

@a
      package_init(mp)
@#if MPI      
      define_var_pk(mp,comm_world_dup,INT)
      define_var_pk(mp,mpi_degas2_root,INT)
      define_var_pk(mp,mpi_size,INT)
      define_var_pk(mp,mpi_rank,INT)
      define_var_pk(mp,mpi_nslaves,INT)
      define_var_pk(mp,mpi_nlevels,INT)

      define_dimen_pk(mp,mpi_levels_ind,mpi_nlevels)
      define_dimen_pk(mp,mpi_slave_map_ind,mpi_nslaves*mpi_nlevels)

      define_varp_pk(mp,mpi_slave_map,INT,mpi_slave_map_ind)
      define_varp_pk(mp,mpi_meta_slave_comms,INT,mpi_levels_ind)
      define_varp_pk(mp,mpi_meta_slave_groups,INT,mpi_levels_ind)
@#endif
      package_end(mp)
