\Title{dataexam}

@* A program to view and manipulate reaction specific data. 

\ID{$Id: 3622dd807ee9513187f9acecb4fa382a5511ef22 $}

This program
lets the user select and view the contents of DEGAS 2 atomic physics
data files in a controlled and intelligible manner. One nice feature
of this program is that it can be run {\em at any time} during the
development period of a run. Only the netCDF file containing the
data is required. However, the code will read the reaction netCDF file 
specified in the \verb+degas2.in+ file; an error will result if one
cannot be found.

The code begins by asking for the reaction symbol corresponding to the
file to be examined:
\begin{verbatim}
 Enter the symbol of the reaction for the examined file:
\end{verbatim}
The user might respond with
\begin{verbatim}
hionize
\end{verbatim}
Note that this is the symbol (short), not the name (long), of the reaction.
For example, symbols are used in the problem input file.
If the user wishes to bypass this question and directly specify the
name of the file, an arbitrary string (i.e., one that
does not match the name of a reaction!) can be entered.

If the reaction is contained in the reaction netCDF file, it will
print out the location of the data file:
\begin{verbatim}
  Reaction file is: 
 ../examples/Eirene_bench_same_physics/hionize.nc 
\end{verbatim}
This is followed by a printout of the reaction name:
\begin{verbatim}
 Reaction Name: electron impact ionization of hydrogen
\end{verbatim}

If the reaction is not in the reaction netCDF file, the code
replies with:
\begin{verbatim}
 Reaction not in reactions file.
    Enter instead name of netCDF file:
\end{verbatim}
The user should provide the path name (absolute or relative) to the
netCDF file. For example,
\begin{verbatim}
../data/hionize.nc
\end{verbatim}

At this point, the code reads the data file and begins by listing the
dependent variables contained therein:
\begin{verbatim}
   2 Dependent variables used.
 
Variable #   Name                                (Units)
 
   1        reaction_rate                        (cm^3/s)
   2        background_energy_loss_rate          (eV*cm^3/s)
 
 Choose the dependent variable number to examine
 Enter integer value or  3 to exit
\end{verbatim}

The user should respond to the prompt with the integer corresponding to
the input variable to be examined. E.g., 
\begin{verbatim}
    1 
\end{verbatim}

The code then lists the independent variables associated with the selected
dependent variable. In addition to its name, its units, number of values,
and range are printed.
\begin{verbatim}
 The independent variables for reaction_rate are:
 
Independent                   # of
Variable #   Name            Values     Min            Max       (Units)
 
 1          temperature        54    1.00000E-01    1.99526E+04  (eV)
 2          density            15    1.00000E+02    1.00000E+09  (1.e8*cm^-3)
\end{verbatim}

The code next requests
ranges for each independent variable:
\begin{verbatim}
 Enter beginning and ending range indices, separated by a space, for 
 temperature                             
\end{verbatim}
The user's reply should be either one (indicating just a single value)
or two integers (for a range). The values must be between 1 and the 
\verb+# of values+ column listed for the independent variable. If
the data need to be displayed with the independent variable decreasing,
make the second integer smaller than the first. The process is repeated
for other independent variables, if present. E.g., a complete exchange
might look like:
\begin{verbatim}
 Enter beginning and ending range indices, separated by a space, for 
 temperature                             
5 10
 Enter beginning and ending range indices, separated by a space, for 
 density                                 
2 3
\end{verbatim}

Finally, the code needs to know whether to print the data to the screen
or to a file:
\begin{verbatim}
 Display this on s for Screen or f for File.
\end{verbatim}
If the user requests file (with an \verb+f+), a prompt for a filename is
generated:
\begin{verbatim}
 Enter filename to store information
\end{verbatim}
A full or relative path name can be given (the user must have write
permission in the directory!).

The data are printed out in a simple linear format in all cases.
The first independent variable (first column)
will vary most rapidly in the list,
etc. The last column is the dependent variable itself:

\begin{verbatim}
  temperature                density                    reaction_rate
 
  2.5118864E-01              3.1622777E+02              9.0300304E-32
  3.1622777E-01              3.1622777E+02              2.4413070E-27
  3.9810717E-01              3.1622777E+02              9.9610678E-24
  5.0118723E-01              3.1622777E+02              8.5679825E-21
  6.3095734E-01              3.1622777E+02              2.0579230E-18
  7.9432823E-01              3.1622777E+02              1.7460819E-16
  2.5118864E-01              1.0000000E+03              1.0074663E-31
  3.1622777E-01              1.0000000E+03              2.7893137E-27
  3.9810717E-01              1.0000000E+03              1.1472429E-23
  5.0118723E-01              1.0000000E+03              9.8420261E-21
  6.3095734E-01              1.0000000E+03              2.3420341E-18
  7.9432823E-01              1.0000000E+03              1.9614474E-16
\end{verbatim}

Finally, the code queries the user about whether or not to continue:
\begin{verbatim}
 Look at another variable y = Yes or n = No 
\end{verbatim}
A negative response (\verb+n+) will cause the program to quit. To
examine a separate file, the user must start the program again. A positive
response (\verb+y+) will take the user back to the dependent variable
selection dialog.

@m FILE 'dataexam.web'

@I macros.hweb
@I zone.hweb
@I background.hweb
@I species.hweb
@I reactiondata.hweb
@I xsection.hweb
@I netcdf.hweb
@I sysdep.hweb
@I reaction.hweb
@I particle.hweb
@I string.hweb
@I materials.hweb

@ The main program.

@a
      program dataexam
      implicit_none_f77
      xs_common
      rc_common
      implicit_none_f90
      xs_decls
      character*LINELEN line    // Local
      character*FILELEN tempfile
      character*rc_sy_len symbol

      real value
      real min(xs_table_rank_max),delta(xs_table_rank_max)
      real fvar1,fvar2,fvar3

      integer length,p,b,e
      integer i,j,k
      integer fileid
      integer dep_choice,screen,nunit

      rc_decl(reaction)

      integer min_slice(xs_table_rank_max,xs_dep_var_max)
      integer max_slice(xs_table_rank_max,xs_dep_var_max)
      integer direction(xs_table_rank_max)

      xs_ncdecl
      nc_decls
      @<Memory allocation interface@>
      st_decls

      call readfilenames
      call nc_read_reactions
      write(stdout,*)
      write(stdout,*) 'Enter the symbol of the reaction for the examined file:'

      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      symbol = line(b:e)
      reaction=rc_lookup(symbol)

      if (reaction > 0) then
         tempfile=rc_filename(reaction)
         write(stdout,*) ' Reaction file is: ',tempfile
      else
         write(stdout,*) 'Reaction not in reactions file.'
         write(stdout,*) '   Enter instead name of netCDF file:'
         if (!read_string(stdin,line,length)) goto eof
         assert(length<=len(line))
         length=parse_string(line(:length))
         p=0
         assert(next_token(line,b,e,p))
         tempfile=line(b:e)
      end if

      fileid = ncopen(tempfile,NC_NOWRITE,nc_stat)
      xs_ncread(fileid)
      call ncclose(fileid,nc_stat)

loop: continue

      write(stdout,*)
      if (reaction > 0)
     $     write(stdout,*) 'Reaction Name: ',trim(rc_name(reaction))
      write(stdout,*) 
      write(stdout,*) xs_num_dep_var,' Dependent variables used.'
      write(stdout,*)      
      write(stdout,'(a,3x,a,2x,t50,a)') 'Variable #','Name','(Units)'
      write(stdout,*)      

      do i = 1 , xs_num_dep_var 
           write(stdout,'(2x,i2,8x,a,t50,a)') i,trim(xs_var(0,i)),'('\/trim(xs_units[0,i])\/')'
      end do

      write(stdout,*)
      write(stdout,*) 'Choose the dependent variable number to examine'
      write(stdout,*) 'Enter integer value or',xs_num_dep_var+1,' to exit'

      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      dep_choice=read_integer(line(b:e))
      if(dep_choice == xs_num_dep_var+1 ) goto eof

      write(stdout,*)
      if ( xs_rank(dep_choice) == 0 ) then

         write(stdout,*)      
         write(stdout,*) 'This is a scalar quantity'
         write(stdout,*) xs_var[0,dep_choice],'   ',xs_data_table(0,0,0,dep_choice)
         goto loop1

      else

         write(stdout,*)'The independent variables for ',
     $        trim(xs_var(0,dep_choice)),' are:'
         write(stdout,*)
         write(stdout,'(a,t30,1x,a)') 'Independent','# of'
         write(stdout,'(a,3x,a,t30,a,5x,a,12x,a,7x,a)') 'Variable #',
     $        'Name','Values','Min','Max','(Units)'
         write(stdout,*)

         do i = 1 , xs_rank(dep_choice)
            write(stdout,'(i2,10x,a,t30,i4,2x,1pe13.5,2x,e13.5,2x,a)') i,
     $           trim(xs_var(i,dep_choice)),xs_tab_index(i,dep_choice),
     $           xs_min(i,dep_choice),xs_max(i,dep_choice),
     &           '('\/trim(xs_units(i,dep_choice))\/')'
         end do 

      endif

@#if 0
      write(stdout,*)
      write(stdout,*)'Do you want to examine a range of values?'
      write(stdout,*)'Enter y for Yes and n for No.'

      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      tempfile = line(b:e)
      if(tempfile == 'n' || tempfile == 'N') goto loop1
@#endif

      do i = 1 , xs_table_rank_max
         do j = 1 , xs_dep_var_max
            min_slice(i,j) = 0
            max_slice(i,j) = 0
         end do
      end do

      do i = 1 , xs_rank(dep_choice)
loop3: continue
         write(stdout,*)
     $        'Enter beginning and ending range indices, separated by a space, for ',xs_var(i,dep_choice)
         if (! read_string(stdin,line,length)) goto eof
         assert(length<=len(line))
         length=parse_string(line(:length))
         p=0
         assert(next_token(line,b,e,p))
         min_slice(i,dep_choice) = read_integer(line(b:e))
         if (next_token(line,b,e,p)) then
            max_slice(i,dep_choice) = read_integer(line(b:e))
         else
            max_slice(i,dep_choice) = min_slice(i,dep_choice)
         end if
         if (max_slice(i,dep_choice) >= min_slice(i,dep_choice)) then
            direction(i)=1
         else
            direction(i)=-1
         end if
         if (max_slice(i,dep_choice) < 1 
     $        || max_slice(i,dep_choice) > xs_tab_index(i,dep_choice)
     $        || min_slice(i,dep_choice) < 1 
     $        || min_slice(i,dep_choice) > xs_tab_index(i,dep_choice)) then
            write(stdout,*) ' Integers must be between 1 and ',
     $           xs_tab_index(i,dep_choice),'; Try again.'
            go to loop3
         end if
      end do

loop2: continue
      write(stdout,*)
      write(stdout,*)'Display this on s for Screen or f for File.'
      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      tempfile = line(b:e)

      do i=1,xs_rank[dep_choice]

         if ( xs_spacing[i,dep_choice] == 'linear' ) then
            min[i]=xs_min[i,dep_choice]
            delta[i]=
     $            (xs_max[i,dep_choice]-xs_min[i,dep_choice])/
     $            areal(xs_tab_index[dep_choice][i]-1)
         else if ( xs_spacing[i,dep_choice] == 'log' ) then
            min[i]=log(xs_min[i,dep_choice])
            delta[i]=
     $           log(xs_max[i,dep_choice]/xs_min[i,dep_choice])/
     $           areal(xs_tab_index[dep_choice][i]-1)
         else
            min[i]=zero
            delta[i]=zero
         end if
 
      end do

      i = 0
      j = 0
      k = 0

      if(tempfile == 'S' || tempfile == 's') then
         screen=TRUE
         nunit=stdout
      else if (tempfile == 'F' || tempfile == 'f') then
         screen=FALSE
         write(stdout,*)
         write(stdout,*)'Enter filename to store information'
         write(stdout,*)

         if (! read_string(stdin,line,length)) goto eof
         assert(length<=len(line))
         length=parse_string(line(:length))
         p=0
         assert(next_token(line,b,e,p))
         tempfile = line(b:e)
         open(unit=diskin,file=tempfile,status='unknown')

         nunit=diskin
      else
         write(stdout,*) 'No, that will not work, try again.'
         goto loop2
      end if
      
      if ( xs_rank(dep_choice) == 1 ) then

         write(nunit,*)
         write(nunit,'(2x,a,t30,a)') trim(xs_var(1,dep_choice)),
     $        trim(xs_var(0,dep_choice))
         write(nunit,*)

         do i=min_slice(1,dep_choice)-1, max_slice(1,dep_choice)-1,direction(1)
          
            if ( xs_spacing[1,dep_choice] == 'linear' ) then
               fvar1 = xs_min(1,dep_choice) + areal(i) * delta(1)
            else if ( xs_spacing[1,dep_choice] == 'log' ) then
               fvar1 = exp( log(xs_min(1,dep_choice)) + areal(i) * delta(1) )
            end if 
    
            value=xs_data_table(i,j,k,dep_choice)

            write(nunit,'(1pe15.7,12x,e15.7)') fvar1,value

         end do

      else if ( xs_rank(dep_choice) == 2 ) then

         write(nunit,*)
         write(nunit,'(2x,a,t30,a,t57,a)') trim(xs_var(1,dep_choice)),
     $        trim(xs_var(2,dep_choice)),trim(xs_var(0,dep_choice))
         write(nunit,*)

         do j=min_slice(2,dep_choice)-1,max_slice(2,dep_choice)-1,direction(2)
            do i=min_slice(1,dep_choice)-1,max_slice(1,dep_choice)-1,direction(1)

               if ( xs_spacing[1,dep_choice] == 'linear' ) then
                  fvar1 = xs_min(1,dep_choice) + areal(i) * delta(1)
               else if ( xs_spacing[1,dep_choice] == 'log' ) then
                  fvar1 = exp( log(xs_min(1,dep_choice)) + areal(i) * delta(1) )
               end if 

               if ( xs_spacing[2,dep_choice] == 'linear' ) then
                  fvar2 = xs_min(2,dep_choice) + areal(j) * delta(2)
               else if ( xs_spacing[2,dep_choice] == 'log' ) then
                  fvar2 = exp( log(xs_min(2,dep_choice)) + areal(j) * delta(2) )
               end if 

               value=xs_data_table(i,j,k,dep_choice)

               write(nunit,'(1pe15.7,12x,e15.7,12x,e15.7)') fvar1,fvar2,value

            end do
         end do

         else if ( xs_rank(dep_choice) == 3 ) then

         write(nunit,*)
         write(nunit,'(2x,a,t30,a,t57,a,t84,a)') trim(xs_var(1,dep_choice)),
     $        trim(xs_var(2,dep_choice)),trim(xs_var(3,dep_choice)),
     $        trim(xs_var(0,dep_choice))
         write(nunit,*)

         do k=min_slice(3,dep_choice)-1,max_slice(3,dep_choice)-1,direction(3)
            do j=min_slice(2,dep_choice)-1,max_slice(2,dep_choice)-1,direction(2)
               do i=min_slice(1,dep_choice)-1,max_slice(1,dep_choice)-1,direction(1)

               if ( xs_spacing[1,dep_choice] == 'linear' ) then
                  fvar1 = xs_min(1,dep_choice) + areal(i) * delta(1)
               else if ( xs_spacing[1,dep_choice] == 'log' ) then
                  fvar1 = exp( log(xs_min(1,dep_choice)) + areal(i) * delta(1) )
               end if 

               if ( xs_spacing[2,dep_choice] == 'linear' ) then
                  fvar2 = xs_min(2,dep_choice) + areal(j) * delta(2)
               else if ( xs_spacing[2,dep_choice] == 'log' ) then
                  fvar2 = exp( log(xs_min(2,dep_choice)) + areal(j) * delta(2) )
               end if 

               if ( xs_spacing[3,dep_choice] == 'linear' ) then
                  fvar3 = xs_min(3,dep_choice) + areal(k) * delta(3)
               else if ( xs_spacing[3,dep_choice] == 'log' ) then
                  fvar3 = exp( log(xs_min(3,dep_choice)) + areal(k) * delta(3) )
               end if 

               value=xs_data_table(i,j,k,dep_choice)

               write(nunit,'(1pe15.7,12x,e15.7,12x,e15.7,12x,e15.7)') 
     $              fvar1,fvar2,fvar3,value

               end do
            end do
         end do

         if (screen == FALSE) close(unit=diskin)

      end if

loop1: continue

      write(stdout,*) 'Look at another variable y = Yes or n = No '

      if (! read_string(stdin,line,length)) goto eof
      assert(length<=len(line))
      length=parse_string(line(:length))
      p=0
      assert(next_token(line,b,e,p))
      if ( line(b:e) == 'y' || line(b:e) == 'Y') goto loop

eof:  continue

      stop
      end

 
