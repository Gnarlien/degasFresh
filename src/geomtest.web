% $Id: af6870ab56b5bcf759695d57075e218271c7043b $
\Title{geomtest}


@* A test program for the geometry routines.

\ID{$Id: af6870ab56b5bcf759695d57075e218271c7043b $}

@m FILE 'geomtest.web'

@I macros.hweb

@I geomint.hweb
@I zone.hweb
@I background.hweb
@I sysdep.hweb
@I particle.hweb
@I location.hweb


@ The main program.

@a
      program geometry_test
      implicit_none_f77
      implicit_none_f90

      call exercise_setup
      call read_geometry
      call exercise_track

      stop
      end

      @<Functions and Subroutines@>

@ Exercise the setup functions

@<Functions...@>=
      subroutine exercise_setup
      implicit_none_f77
      zn_common
      bk_common
      implicit_none_f90
      integer nx,nz
      parameter (nx=2,nz=3)
      @<Memory allocation interface@>
      real x1[3],x2[3],x[2,0:4],xa[2,0:nx+2],xx1[3],xx2[3],vol // Local
      integer n,zone,i,j,stratum,sector,segment
      integer zonearray[0:0],facearray[0:1]
      gi_ext
      external init_geometry,
     $     add_surface,plane,boundaries_neighbors,check_geometry,print_geometry,
     $     erase_geometry // External

      call readfilenames
      call init_geometry
      vc_set(x1,-one,-one,-one)
      vc_set(x2,nx+one,one,nz+one)
      call universal_cell(geometry_symmetry_plane,x1,x2,vol)
      write(stdout,*) vol
      facearray[0]=int_unused
      facearray[1]=int_unused
      zone=0
      segment=0
      do i=0,nx-1
         do j=0,nz-1
            zone++
            n=0
            x[1,n]=i;   x[2,n]=j; n++
            x[1,n]=i;   x[2,n]=j+1; n++
            x[1,n]=i+1; x[2,n]=j+1; n++
            x[1,n]=i+1; x[2,n]=j; n++
            x[1,n]=i;   x[2,n]=j
            zonearray[0]=zone
            call decompose_polygon(n,x,zonearray,1,facearray)
            zn_type_set(zone,zn_plasma)
            zn_volume(zone)=polygon_volume(n,x)
         end do
      end do
      
      stratum=0
      
      zone++
      
 /* Bottom */
      n=0
      xa[1,n]=x1[1]; xa[2,n]=x1[3]; n++
      do i=0,nx
         xa[1,n]=i; xa[2,n]=0; n++
      end do
      xa[1,n]=x2[1]; xa[2,n]=x1[3]; n++
      xa[1,n]=xa[1,0]; xa[2,n]=xa[2,0]
      zonearray[0]=zone
      call decompose_polygon(n,xa,zonearray,1,facearray)
      zn_type_set(zone,zn_vacuum)
      zn_volume(zone)=polygon_volume(n,xa)

 /* Top */
      n=0
      xa[1,n]=x2[1]; xa[2,n]=x2[3]; n++
      do i=nx,0,-1
         xa[1,n]=i; xa[2,n]=nz; n++
      end do
      xa[1,n]=x1[1]; xa[2,n]=x2[3]; n++
      xa[1,n]=xa[1,0]; xa[2,n]=xa[2,0]
      zonearray[0]=zone
      call decompose_polygon(n,xa,zonearray,1,facearray)
      zn_volume(zone)=zn_volume(zone)+polygon_volume(n,xa)

 /* Left */
      n=0
      xa[1,n]=x1[1]; xa[2,n]=x2[3]; n++
      do j=nz,0,-1
         xa[1,n]=0; xa[2,n]=j; n++
      end do
      xa[1,n]=x1[1]; xa[2,n]=x1[3]; n++
      xa[1,n]=xa[1,0]; xa[2,n]=xa[2,0]
      zonearray[0]=zone
      call decompose_polygon(n,xa,zonearray,1,facearray)
      zn_volume(zone)=zn_volume(zone)+polygon_volume(n,xa)
      
 /* Right */
      n=0
      xa[1,n]=x2[1]; xa[2,n]=x1[3]; n++
      do j=0,nz
         xa[1,n]=nx; xa[2,n]=j; n++
      end do
      xa[1,n]=x2[1]; xa[2,n]=x2[3]; n++
      xa[1,n]=xa[1,0]; xa[2,n]=xa[2,0]
      zonearray[0]=zone
      call decompose_polygon(n,xa,zonearray,1,facearray)
      zn_volume(zone)=zn_volume(zone)+polygon_volume(n,xa)

      call boundaries_neighbors

      segment=0
      zone=0
      do i=0,nx-1
         do j=0,nz-1
            zone++
            n=0
            x[1,n]=i;   x[2,n]=j; n++
            x[1,n]=i;   x[2,n]=j+1; n++
            x[1,n]=i+1; x[2,n]=j+1; n++
            x[1,n]=i+1; x[2,n]=j; n++
            x[1,n]=i;   x[2,n]=j
            if (i==0 && j<=1) then
               stratum=1
               vc_set(xx1,x[1,2],zero,x[2,2])
               vc_set(xx2,x[1,3],zero,x[2,3])
               sector=define_sector(stratum,segment,lookup_surface(xx1,xx2),zone)
               write(stderr,*) sector
            else if (i==1 && j>=1) then
               stratum=2
               vc_set(xx1,x[1,0],zero,x[2,0])
               vc_set(xx2,x[1,1],zero,x[2,1])
               sector=define_sector(stratum,segment,lookup_surface(xx1,xx2),zone)
               write(stderr,*) sector
            end if
         end do
      end do

      call end_sectors

      call check_geometry
      call write_geometry
/*
      call print_geometry(stdout)
*/
            
/*       call erase_geometry */

      return
      end

@ Exercise tracking.

@<Functions...@>=
      subroutine exercise_track
      implicit_none_f77
      implicit_none_f90
      pt_decl(x)
      logical done
      real t
      integer i,j
      lc_decls
      pt_decls

      do j=0,2
         vc_set(lc_x(pt_loc(x)),half,zero,j+half)
         lc_set(pt_loc(x))
         pt_type(x)=pt_neutral
         vc_set(pt_v(x),one,zero,zero)
      
         done=pt_track(const(5.0),t,x)
         write(stderr,*) "Location: ",t,(lc_x(pt_loc(x))[i],i=1,3)
         write(stderr,*) "Zones: ",lc_zone(pt_loc(x)),lc_zone_next(pt_loc(x))
         write(stderr,*) "Sectors: ",lc_sector(pt_loc(x)),lc_sector_next(pt_loc(x))
      end do
      
      return
      end

@* INDEX.
