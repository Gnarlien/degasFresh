example of how the expansion is done in geomsetup.web
The statement |gi_common| in geomsetup.web (init_geometry) produces the
following code in geomsetup.f
      save/gi_com_a/
      integer ncells
      common/gi_com_a/ncells
      integer nsurfaces
      common/gi_com_a/nsurfaces
      integer nboundaries
      common/gi_com_a/nboundaries
      integer nneighbors
      common/gi_com_a/nneighbors
      integer ntransforms
      common/gi_com_a/ntransforms
      pointer(ptr_cells,cells)
      integer cells((1):(4),(0):*)
      common/gi_com_a/ptr_cells
      pointer(ptr_surfaces,surfaces)
      integer surfaces((0):(1),(0):(1),(1):*)
      common/gi_com_a/ptr_surfaces
      pointer(ptr_boundaries,boundaries)
      integer boundaries((1):*)
      common/gi_com_a/ptr_boundaries
      pointer(ptr_neighbors,neighbors)
      integer neighbors((0):*)
      common/gi_com_a/ptr_neighbors
      pointer(ptr_surface_coeffs,surface_coeffs)
      DOUBLE PRECISION surface_coeffs((1):(10),(1):*)
      common/gi_com_a/ptr_surface_coeffs
      pointer(ptr_surface_points,surface_points)
      DOUBLE PRECISION surface_points((1):(3),(0):(1),(1):*)
      common/gi_com_a/ptr_surface_points

We can see how this came about, by going through the definitions of various
macros in the include files.
We find that the following code segment from 'geomint.hweb' has been
included in this. only the relevant part is shown below. 
the statement that does it is \\
@I geomint.hweb
the other file included is 'macros.hweb' which has the stmts. \\
@I array.hweb
@I vector.hweb
@I classes.hweb
@I constants.hweb 
there by including these files indirectly.

      package_init(gi)
      define_var_pk(gi,ncells,INT)
      define_var_pk(gi,nsurfaces,INT)
      define_var_pk(gi,nboundaries,INT)
      define_var_pk(gi,nneighbors,INT)
      define_var_pk(gi,ntransforms,INT)
      define_dimen_pk(gi,cell_info_ind,c_start,c_zone)
      define_dimen_pk(gi,cell_ind,0,ncells)
      define_dimen_pk(gi,surface_ind,nsurfaces)
      define_dimen_pk(gi,boundary_ind,nboundaries)
      define_dimen_pk(gi,neighbor_ind,0,nneighbors)
      define_dimen_pk(gi,neg_pos,s_neg,s_pos)
      define_dimen_pk(gi,surface_info_ind,s_start,s_count)
      define_dimen_pk(gi,coeff_ind,NCOEFFS)
@#if 0
      define_dimen_pk(gi,givc_ind,3)
@#endif
      define_varp_pk(gi,cells,INT,cell_info_ind,cell_ind)
      define_varp_pk(gi,surfaces,INT,neg_pos,surface_info_ind,surface_ind)
      define_varp_pk(gi,boundaries,INT,boundary_ind)
      define_varp_pk(gi,neighbors,INT,neighbor_ind)
      define_varp_pk(gi,surface_coeffs,FLOAT,coeff_ind,surface_ind)
@#if DEBUG
      define_varp_pk(gi,surface_points,FLOAT,vc_ind,neg_pos,surface_ind)
@#endif

@ Geometry declaration for geometry routines.

@f gi_common integer
@m gi_common
      gi_common_a @;

The first statement -  
package_init(gi) 
does the following using the
package defn. in 'array.hweb'
 _DEFINE(gi_common_a save /gi_com_a/;)
the statement       
define_var_pk(gi,ncells,INT)
gives (it gives other defns. like
gi_ncdef,gi_ncdecl,gi_ncwrite,gi_ncread,gi_pvmput,gi_pvmgeta etc. but we
are not trying to explain those now)
define_common(gi,ncells,a) = 
      _DEFINE(temp gi_common_a)
      _UNDEF(gi_common_a)
      _DEFINE(gi_common_a temp declare_var(ncells); common /gi_com_a/ ncells;)
      _UNDEF(temp)
this results in \\
gi_common_a = save /gi_com_a/;declare_var(ncells); common /gi_com_a/ ncells;
now,  
declare_var(ncells)
 gives \\
 integer ncells
so we have 
gi_common_a = save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
next we have \\
      define_var_pk(gi,nsurfaces,INT)
gives (among other things)
define_common(gi,nsurfaces,a) = 
      _DEFINE(temp gi_common_a)
      _UNDEF(gi_common_a)
      _DEFINE(gi_common_a temp declare_var(nsurfaces); common /gi_com_a/
nsurfaces;) 
      _UNDEF(temp) 
this results in \\
gi_common_a = save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	declare_var(nsurfaces); common /gi_com_a/ nsurfaces;
now,  
declare_var(nsurfaces)
 gives \\
 integer nsurfaces
so we have 

gi_common_a = save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	 integer nsurfaces; common /gi_com_a/ nsurfaces;

next we have \\
 define_var_pk(gi,nboundaries,INT)
gives (among other things)
define_common(gi,nboundaries,a) = 
      _DEFINE(temp gi_common_a)
      _UNDEF(gi_common_a)
      _DEFINE(gi_common_a temp declare_var(nboundaries); common /gi_com_a/
nboundaries;) 
      _UNDEF(temp) 
this results in \\
gi_common_a = save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	 integer nsurfaces; common /gi_com_a/ nsurfaces;
	declare_var(nboundaries); common /gi_com_a/ nboundaries;
now,  
declare_var(nboundaries)
 gives \\
 integer nboundaries
so we have 

gi_common_a = save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	 integer nsurfaces; common /gi_com_a/ nsurfaces;
	 integer nboundaries; common /gi_com_a/ nboundaries;

next we have \\
      define_var_pk(gi,nneighbors,INT)
this gives (among other things)
define_common(gi,nneighbors,a) = 
      _DEFINE(temp gi_common_a)
      _UNDEF(gi_common_a)
      _DEFINE(gi_common_a temp declare_var(nneighbors); common /gi_com_a/
nneighbors;) 
      _UNDEF(temp) 
this results in \\
gi_common_a = save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	 integer nsurfaces; common /gi_com_a/ nsurfaces;
	 integer nboundaries; common /gi_com_a/ nboundaries;
	declare_var(nneighbors); common /gi_com_a/ nneighbors;
now,  
declare_var(nneighbors)
 gives \\
 integer nneighbors
so we have 

gi_common_a = save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	 integer nsurfaces; common /gi_com_a/ nsurfaces;
	 integer nboundaries; common /gi_com_a/ nboundaries;
	 integer nneighbors; common /gi_com_a/ nneighbors;

next we have \\
      define_var_pk(gi,ntransforms,INT)
this gives (among other things)
define_common(gi,ntransforms,a) = 
      _DEFINE(temp gi_common_a)
      _UNDEF(gi_common_a)
      _DEFINE(gi_common_a temp declare_var(ntransforms); common /gi_com_a/
ntransforms;) 
      _UNDEF(temp) 
this results in \\
gi_common_a = save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	 integer nsurfaces; common /gi_com_a/ nsurfaces;
	 integer nboundaries; common /gi_com_a/ nboundaries;
	 integer nneighbors; common /gi_com_a/ nneighbors;
	declare_var(ntransforms); common /gi_com_a/ ntransforms;
now,  
declare_var(ntransforms)
 gives \\
 integer ntransforms
so we have 

gi_common_a = save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	 integer nsurfaces; common /gi_com_a/ nsurfaces;
	 integer nboundaries; common /gi_com_a/ nboundaries;
	 integer nneighbors; common /gi_com_a/ nneighbors;
	 integer ntransforms; common /gi_com_a/ ntransforms;

next we have \\
      define_dimen_pk(gi,cell_info_ind,c_start,c_zone)
this gives (among other things) \\
 define_dimen(cell_info_ind,c_start,c_zone)
which gives \\
  _DEFINE(min_cell_info_ind c_start)
 _DEFINE(max_cell_info_ind c_zone)

next we have \\
      define_dimen_pk(gi,cell_ind,0,ncells)
this gives (among other things) \\
      define_dimen(cell_ind,0,ncells)
which gives \\
_DEFINE(min_cell_ind 0)
_DEFINE(max_cell_ind ncells)

next we have \\
      define_dimen_pk(gi,surface_ind,nsurfaces)
which gives \\
 define_dimen(surface_ind,nsurfaces)
which gives \\
_DEFINE(min_surface_ind 1)
_DEFINE(max_surface_ind nsurfaces)

next we have \\
      define_dimen_pk(gi,boundary_ind,nboundaries)
which gives \\
     define_dimen(boundary_ind,nboundaries)
which gives \\
_DEFINE(min_boundary_ind 1)
_DEFINE(max_boundary_ind nboundaries)

next we have \\
      define_dimen_pk(gi,neighbor_ind,0,nneighbors
which gives \\
      define_dimen(neighbor_ind,0,nneighbors)
which gives \\
_DEFINE(min_neighbor_ind 0)
_DEFINE(max_neighbor_ind nneighbors)

next we have \\
      define_dimen_pk(gi,neg_pos,s_neg,s_pos)
which gives \\
      define_dimen(neg_pos,s_neg,s_pos)
which gives \\
_DEFINE(min_neg_pos s_neg)
_DEFINE(max_neg_pos s_pos)

next we have \\
      define_dimen_pk(gi,surface_info_ind,s_start,s_count)
which gives \\
      define_dimen(surface_info_ind,s_start,s_count)
which gives \\
_DEFINE(min_surface_info_ind s_start)
_DEFINE(max_surface_info_ind s_scount)

next we have \\
      define_dimen_pk(gi,coeff_ind,NCOEFFS)
which gives \\
      define_dimen(coeff_ind,NCOEFFS)
which gives \\
_DEFINE(min_coeff_ind 1)
_DEFINE(max_coeff_ind NCOEFFS)

next we have \\
      define_varp_pk(gi,cells,INT,cell_info_ind,cell_ind)
which gives (among other things\\
define_var(cells,INT,cell_info_ind,cell_ind)
      _DEFINE(temp gi_common_a)
      _UNDEF(gi_common_a)
      _DEFINE(gi_common_a temp declare_varp(cells); common /gi_com_a/
ptr_cells;)
      _UNDEF(temp)
define_var becomes \\
_DEFINE(ind_cells_1 cell_info)
_DEFINE(ind_cells_2 cell_ind)

declare_varp(cells) gives \\
ptr_decl(cells);_DEFINE(gi_common_a temp
cells(range(ind_cells_1),range_star(ind_cells_2))); 
the defn for range is -
range(ind_cells_1) = range(cell_info_ind) 
= range_min(cell_info_ind):range_max(cell_info_ind) 
= c_start:c_zone 
= 1:4
range_star(ind_cells_2) = range_star(cell_ind)
= range_min(cell_ind):*
= 0:*
ptr_decl(cells) = pointer(ptr_cells,cells)
so gi_common_a =  pointer(ptr_cells,cells) ; temp cells(1:4,0:*);common
/gi_com_a/ptr_cells 
temp is the earlier value of gi_common_a ie ..
	 save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	 integer nsurfaces; common /gi_com_a/ nsurfaces;
	 integer nboundaries; common /gi_com_a/ nboundaries;
	 integer nneighbors; common /gi_com_a/ nneighbors;
	 integer ntransforms; common /gi_com_a/ ntransforms;

so we have 
gi_common_a =
	 save /gi_com_a/; integer ncells; common /gi_com_a/ ncells;
	 integer nsurfaces; common /gi_com_a/ nsurfaces;
	 integer nboundaries; common /gi_com_a/ nboundaries;
	 integer nneighbors; common /gi_com_a/ nneighbors;
	 integer ntransforms; common /gi_com_a/ ntransforms;
	  pointer(ptr_cells,cells); cells(1:4,0:*);common
	/gi_com_a/ptr_cells 


the same logic has to be followed in the rest:
      define_varp_pk(gi,surfaces,INT,neg_pos,surface_info_ind,surface_ind)
      define_varp_pk(gi,boundaries,INT,boundary_ind)
      define_varp_pk(gi,neighbors,INT,neighbor_ind)
      define_varp_pk(gi,surface_coeffs,FLOAT,coeff_ind,surface_ind)

each time adding to the existing defn of gi_com_a.
