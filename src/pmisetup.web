% $Id: 229593edde6c67445687f491571c6b49c862b85a $
\Title{pmisetup}

@* Routines used to set up the PMI file.

\ID{$Id: 229593edde6c67445687f491571c6b49c862b85a $}

The file \verb+pmi_infile+ identified in \verb+degas2.in+ describes 
all of the plasma-material interactions
(PMI) available in DEGAS 2. Each interaction is described by four separate
lines:

\begin{enumerate}
\item The full name of the interaction
\item A blank delimited sequence of the form
\begin{verbatim}
species + material -> product1 + product2 + ...
\end{verbatim}
where ``species'' is a species symbol
and ``material'' is
a symbol from the list in \verb+materials_infile+. 
All of the products should be legitimate species. Currently, only binary
reactions of this form are supported. Essentially all PMI currently in use
yield zero (e.g., an exit) or one product; support of additional products 
within a given PMI will require some additional code. With the 
``\verb+->+'' symbol,
the PMI holds for all isotopically equivalent species; it's a 
generic PMI. Non-generic PMI are specified by a ``\verb+=>+'' symbol.
For the latter, the PMI applies to {\em only} the species explicitly appearing
in the file.
\item The path name (relative or absolute) of the netCDF data file
providing the yield and PMI handling data for this interaction.
\item  The PMI type. This is used to group PMI which are 
sufficiently similar that
their products and collisions can be processed using the same code.
Currently recognized types include
\begin{description}
\item[reflection] Reflection of the test particle with a significant
fraction of its incident energy.
\item[desorption] Thermal re-emission of not-permanently adsorbed test 
particles.
\item[adsorption] Permanent adsorption (i.e., removal of the incident test
particle from the problem).  Note that by implementing this process as a
PMI (as opposed to varying the material's recycling coefficient or designating
a sector as being of exit type), the amount of absorption can be made to
vary with species or other parameters.
\end{description}
\end{enumerate}

@m FILE 'pmisetup.web'

@I macros.hweb
@I readfilenames.hweb
@I pmi.hweb
@I species.hweb
@I materials.hweb
@I sysdep.hweb
@I string.hweb
@I netcdf.hweb

@ The unnamed module.

@a
      @<Functions and Subroutines@>

@ Read in data from \verb+pmi_infile+.

@<Functions...@>=
      subroutine read_pmi
      implicit_none_f77
      pm_common                    // Common
      sp_common
      ma_common
      rf_common
      implicit_none_f90
      integer length,p,b,e,i        // Local
      character*LINELEN line
      character*FILELEN file
      character*FILELEN tempfile     //local
      character*pm_type_len type
      @<Memory allocation interface@>
      st_decls
      pm_num=0

      pmi_version='unknown'

      tempfile = filenames_array[pmi_infile]
      open(unit=diskin,file=tempfile,
     $     form='formatted',status='old')
      assert( read_string(diskin,line,length) )
      assert(length<=len(line))
      pmi_version=line(:length)
loop1: continue
      if (! read_string(diskin,line,length) ) goto eof
/*
   Add next pmi
*/
      pm_num=pm_num+1
      var_realloca(pmi_name)
      var_realloca(pmi_type)
      var_realloca(pmi_sy)
      var_realloca(pmi_reagent)
      var_realloca(pmi_materials)
      var_realloca(pmi_generic)
      var_realloca(pmi_product_num)
      var_realloca(pmi_product)
      var_realloca(pmi_filename)

/*
   First line contains the full name of the pmi
*/
      length=parse_string(line(:length))
      pmi_name[pm_num]=line(:length)

      assert(read_string(diskin,line,length))
      length=parse_string(line(:length))
/*
   Identify reagent species and material
*/      
      p=0
      assert( next_token(line,b,e,p) )
      pm_sy(pm_num)=read_text(line(b:e))
      assert( next_token(line,b,e,p) )
      pm_reagent(pm_num) = sp_lookup(line(b:e))
      assert( next_token(line,b,e,p) )
      assert( line(b:e) == '+' )
      assert( next_token(line,b,e,p) )
      pm_materials(pm_num) = ma_lookup(line(b:e))
      assert( next_token(line,b,e,p) )
      if (line(b:e) == '->') then
         pm_gen(pm_num)=pmi_generic_yes             // Use generic species
      else if (line(b:e) == '=>') then
         pm_gen(pm_num)=pmi_generic_no              // Specific species
      else
         assert('Invalid token' == ' ')
      end if
/*
   Count and identify product species
*/      
      pm_product_num(pm_num) = 0
      do i=1,pm_product_max
         pm_product(pm_num,i)=int_unused
      end do
loop2: continue
      if ( next_token(line,b,e,p) ) then
         pm_product_num(pm_num) = pm_product_num(pm_num) + 1
         assert( pm_product_num(pm_num) <= pm_product_max )
         pm_product(pm_num,pm_product_num(pm_num)) = sp_lookup(line(b:e))
         assert(pm_product(pm_num,pm_product_num(pm_num)) > 0)
         if ( next_token(line,b,e,p) ) then
            assert( line(b:e) == '+' )
            goto loop2
         end if
      end if
/*
   Third line contains the path name for the data file
*/
      assert( read_string(diskin,file,length) )
      assert(length<=len(file))
      
      pm_filename(pm_num)=file

/*
  Fourth line gets the interaction type
*/
      assert( read_string(diskin,type,length) )
      assert(length<=len(type))
      pm_pmi_type(pm_num)=type


/*
   Get next interaction
*/
      goto loop1
eof:  continue
      close(unit=diskin)
      var_reallocb(pmi_name)
      var_reallocb(pmi_type)
      var_reallocb(pmi_sy)
      var_reallocb(pmi_reagent)
      var_reallocb(pmi_materials)
      var_reallocb(pmi_product_num)
      var_reallocb(pmi_product)
      var_reallocb(pmi_filename)

      return
      end


@ Write out data into netcdf file \verb+pmi.nc+
      
@<Functions...@>=
      subroutine nc_write_pmi
      implicit_none_f77
      pm_common                   // Common
      rf_common
      implicit_none_f90
      integer fileid
      pm_ncdecl
      nc_decls
      st_decls
      character*LINELEN description,program_version
      character*FILELEN tempfile      //local

      program_version=
     $     'DEGAS 2 Git commit: $Format:%H$, ref names: $Format:%d$'

      tempfile = filenames_array[pmifile]
      fileid = nccreate(tempfile,NC_CLOBBER,nc_stat)

      description = 'Data for pmi in degas 2'
      call ncattputc(fileid,NC_GLOBAL,'description',NC_CHAR,
     $     string_length(description),
     $     description,nc_stat)

      call ncattputc(fileid,NC_GLOBAL,'data_version',NC_CHAR,
     $     string_length(pmi_version),
     $     pmi_version,nc_stat)
      
      call ncattputc(fileid,NC_GLOBAL,'program_version',NC_CHAR,
     $     string_length(program_version),
     $     program_version,nc_stat)
      
      pm_ncdef(fileid)
      call ncendef(fileid,nc_stat)
      pm_ncwrite(fileid)
      call ncclose(fileid,nc_stat)
      
      return
      end

      



@* References.

\bibliographystyle{report}
\bibliography{../../degas}

@* INDEX.

